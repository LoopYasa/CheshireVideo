{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _addEventListener = require('../utils/dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _util = require('../utils/util');\n\nvar util = _interopRequireWildcard(_util);\n\nvar _event2 = require('../utils/event');\n\nvar _event3 = _interopRequireDefault(_event2);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 拥有所有的video dom对象的属性和方法，\n * 同时添加或者改造了新属性和方法。\n * 添加新的自定义事件\n * 事件监控需要使用on，不使用addEventListener方式\n * @this { boolean } loading 加载中（新增属性）\n * @this { boolean } playing 播放中（新增属性）\n * @this { boolean } living 是否是直播\n * @this { number } bufferTime buffer秒数（新增属性）\n * @this { boolean } isError 是否展示错误信息，这个属性在model/vidoe中设置的\n * @this { boolean } onControlbarEnter 鼠标是否在controlbar上，这个属性在model/vidoe中设置的\n * @this { boolean } seekingState 是否在seeking，timeline点击拖动也是在seeking，这个跟原生的有点不一样。\n * @this { boolean } notAutoPlayViewHide 当autoplay为false时，这个属性false为notAutoPlay页面展示，否则隐藏\n * @this { boolean } controlbarShow true controlbar显示，false controlbar 隐藏，这个属性在model/vidoe中设置的\n * @this { number } videoGaps 断片累加值，也是记录值\n * @this { number } currentSubtitleTrack 当前选择的字幕\n * @this { boolean } reloading 是否在重载\n *    //合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频\n *    //但是这个视频不是整个时段的，会有断的，为了给用户知道这段录像哪里断了，需要而外处理\n *    //这里是为了算出播放中，遇到断片的情况\n */\n\n\nvar API = function () {\n  function API(videoDOM, file) {\n    var _this2 = this;\n\n    (0, _classCallCheck3.default)(this, API);\n    this.videoGaps = 0;\n    this.seekingState = false;\n    this.videoDOM = videoDOM;\n    this.file = file; //绑定自定义事件处理方法\n\n    this.event = (0, _extends3.default)({}, _event3.default);\n\n    var _this = this;\n\n    try {\n      var _loop = function _loop(_k) {\n        if (_k === 'webkitDisplayingFullscreen' || _k === 'webkitSupportsFullscreen') {\n          return 'continue';\n        } //方法处理\n\n\n        if (Object.prototype.toString.apply(videoDOM[_k]) === '[object Function]') {\n          var oldKey = _k;\n\n          if (_this[_k]) {\n            //如果API中定义了该属性，则添加前缀\n            _k = '_' + _k;\n          }\n\n          _this2[_k] = function () {\n            videoDOM[oldKey].apply(videoDOM, arguments);\n          };\n        } else {\n          //属性处理\n          if (_this[_k]) {\n            //如果API中定义了该属性，则添加前缀\n            _k = '_' + _k;\n          }\n\n          _this = (0, _create2.default)(_this, (0, _defineProperty3.default)({}, _k, {\n            get: function get() {\n              return videoDOM[_k];\n            },\n            set: function set(val) {\n              videoDOM[_k] = val;\n            }\n          })); //自定义新属性\n\n          switch (_k) {\n            case 'paused':\n              _this = (0, _create2.default)(_this, {\n                playing: {\n                  get: function get() {\n                    return !videoDOM[_k];\n                  },\n                  set: function set(val) {\n                    videoDOM[_k] = !val;\n                  }\n                }\n              });\n              break;\n\n            case 'buffered':\n              _this = (0, _create2.default)(_this, {\n                bufferTime: {\n                  // eslint-disable-next-line\n                  get: function get() {\n                    return _this.getBufferTime();\n                  }\n                }\n              });\n              break;\n\n            case 'duration':\n              _this = (0, _create2.default)(_this, {\n                duration: {\n                  // eslint-disable-next-line\n                  get: function get() {\n                    return _this.fragmentDuration || videoDOM.duration;\n                  }\n                }\n              });\n              break;\n\n            default:\n          }\n        }\n\n        k = _k;\n      }; //这里把vidoeDOM里面的的大部分属性和方法，都绑在了this中。\n\n\n      for (var k in videoDOM) {\n        var _ret = _loop(k);\n\n        if (_ret === 'continue') continue;\n      }\n    } catch (e) {//nothing\n    }\n\n    return _this;\n  } //默认值\n\n\n  (0, _createClass3.default)(API, [{\n    key: 'play',\n    //载入视频源，这里不可以用箭头函数\n    value: function play() {\n      if (!this.playing) {\n        this._play();\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.playing) {\n        this._pause();\n      }\n    }\n  }, {\n    key: 'setVolume',\n    value: function setVolume(volume) {\n      if (!this.muted) {\n        this.volume = volume;\n      }\n    } //获取buffer的秒数\n\n  }, {\n    key: 'getBufferTime',\n    value: function getBufferTime() {\n      if (this.living) {\n        if (this.buffered.length > 0) {\n          return this.buffered.end(0);\n        } else {\n          return 0;\n        }\n      }\n\n      var buf = this.buffered;\n      var total = 0;\n\n      for (var ii = 0; ii < buf.length; ii++) {\n        total += buf.end(ii) - buf.start(ii);\n      }\n\n      return total;\n    } //重置api一些值\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.currentTime = 0;\n      this.videoGaps = 0;\n    }\n    /**\n     * 监控事件\n     * @param { string } type 事件类型\n     * @param { function } callback 回调函数\n     */\n\n  }, {\n    key: 'on',\n    value: function on(dom, type, callback) {\n      var _this3 = this;\n\n      if ((0, _isString2.default)(dom)) {\n        callback = type;\n        type = dom;\n        dom = this;\n      } //自定义事件和dom事件一起绑定了，这里不做判断有没有type类型的dom事件\n\n\n      var event = (0, _addEventListener2.default)(dom, type, callback); //自定义事件\n\n      this.event.on(type, callback); //remove适配\n\n      var eventListIndex = util.randomKey();\n\n      if (!this.eventList) {\n        this.eventList = {};\n      }\n\n      if (!this.eventList[type]) {\n        this.eventList[type] = {};\n      }\n\n      this.eventList[type][eventListIndex] = event; //这个remove是给当前事件解绑使用\n\n      var returnRemove = function returnRemove() {\n        _this3.eventList[type][eventListIndex] && _this3.eventList[type][eventListIndex].remove(); //删除移除指定的this.eventList[type]\n\n        delete _this3.eventList[type][eventListIndex]; //移除当前自定义事件\n\n        _this3.event.off(type, callback);\n      }; //返回的事件对像只能移除当前监听的事件。\n\n\n      return {\n        off: returnRemove\n      };\n    }\n    /**\n     * 移除指定或者全部监控事件，包括多次绑定的事件\n     * @param { string || undefined || array } type 事件类型\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type) {\n      var _this4 = this;\n\n      if (type === undefined) {\n        //移除全部事件\n        for (var _k2 in this.eventList) {\n          for (var j in this.eventList[_k2]) {\n            this.eventList[_k2][j].remove();\n          }\n        }\n\n        this.eventList = {}; //移除全部自定义事件\n\n        this.event.off();\n      } else if (Object.prototype.toString.apply(type) === '[object Array]') {\n        //移除部分事件\n        type.forEach(function (v) {\n          for (var _j in _this4.eventList[v]) {\n            _this4.eventList[v][_j].remove();\n          }\n\n          delete _this4.eventList[v];\n        });\n      } else {\n        //移除一个事件\n        for (var _j2 in this.eventList[type]) {\n          this.eventList[type][_j2].remove();\n        }\n\n        delete this.eventList[type]; //移除自定义事件\n\n        this.event.off(type);\n      }\n    } //触发自定义事件\n\n  }, {\n    key: 'trigger',\n    value: function trigger(name) {\n      var _event;\n\n      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      return (_event = this.event).trigger.apply(_event, [name].concat(params));\n    }\n  }]);\n  return API;\n}(); //使用的是backbone event\n//外api的事件，内部数据流只使用redux\n\n\nexports.default = API;","map":{"version":3,"sources":["C:/Users/MaGent/Desktop/video/video/node_modules/html5-player/libs/api/api.js"],"names":["Object","defineProperty","exports","value","default","undefined","_defineProperty2","require","_defineProperty3","_interopRequireDefault","_create","_create2","_extends2","_extends3","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_isString","_isString2","_addEventListener","_addEventListener2","_util","util","_interopRequireWildcard","_event2","_event3","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","API","videoDOM","file","_this2","videoGaps","seekingState","event","_this","_loop","_k","toString","apply","oldKey","arguments","get","set","val","playing","bufferTime","getBufferTime","duration","fragmentDuration","k","_ret","e","play","_play","pause","_pause","setVolume","volume","muted","living","buffered","length","end","buf","total","ii","start","reset","currentTime","on","dom","type","callback","_this3","eventListIndex","randomKey","eventList","returnRemove","remove","off","_this4","_k2","j","forEach","v","_j","_j2","trigger","name","_event","_len","params","Array","_key","concat"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _addEventListener = require('../utils/dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _util = require('../utils/util');\n\nvar util = _interopRequireWildcard(_util);\n\nvar _event2 = require('../utils/event');\n\nvar _event3 = _interopRequireDefault(_event2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 拥有所有的video dom对象的属性和方法，\n * 同时添加或者改造了新属性和方法。\n * 添加新的自定义事件\n * 事件监控需要使用on，不使用addEventListener方式\n * @this { boolean } loading 加载中（新增属性）\n * @this { boolean } playing 播放中（新增属性）\n * @this { boolean } living 是否是直播\n * @this { number } bufferTime buffer秒数（新增属性）\n * @this { boolean } isError 是否展示错误信息，这个属性在model/vidoe中设置的\n * @this { boolean } onControlbarEnter 鼠标是否在controlbar上，这个属性在model/vidoe中设置的\n * @this { boolean } seekingState 是否在seeking，timeline点击拖动也是在seeking，这个跟原生的有点不一样。\n * @this { boolean } notAutoPlayViewHide 当autoplay为false时，这个属性false为notAutoPlay页面展示，否则隐藏\n * @this { boolean } controlbarShow true controlbar显示，false controlbar 隐藏，这个属性在model/vidoe中设置的\n * @this { number } videoGaps 断片累加值，也是记录值\n * @this { number } currentSubtitleTrack 当前选择的字幕\n * @this { boolean } reloading 是否在重载\n *    //合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频\n *    //但是这个视频不是整个时段的，会有断的，为了给用户知道这段录像哪里断了，需要而外处理\n *    //这里是为了算出播放中，遇到断片的情况\n */\nvar API = function () {\n  function API(videoDOM, file) {\n    var _this2 = this;\n\n    (0, _classCallCheck3.default)(this, API);\n    this.videoGaps = 0;\n    this.seekingState = false;\n\n    this.videoDOM = videoDOM;\n    this.file = file;\n    //绑定自定义事件处理方法\n    this.event = (0, _extends3.default)({}, _event3.default);\n    var _this = this;\n    try {\n      var _loop = function _loop(_k) {\n        if (_k === 'webkitDisplayingFullscreen' || _k === 'webkitSupportsFullscreen') {\n          return 'continue';\n        }\n        //方法处理\n        if (Object.prototype.toString.apply(videoDOM[_k]) === '[object Function]') {\n          var oldKey = _k;\n          if (_this[_k]) {\n            //如果API中定义了该属性，则添加前缀\n            _k = '_' + _k;\n          }\n          _this2[_k] = function () {\n            videoDOM[oldKey].apply(videoDOM, arguments);\n          };\n        } else {\n          //属性处理\n          if (_this[_k]) {\n            //如果API中定义了该属性，则添加前缀\n            _k = '_' + _k;\n          }\n          _this = (0, _create2.default)(_this, (0, _defineProperty3.default)({}, _k, {\n            get: function get() {\n              return videoDOM[_k];\n            },\n            set: function set(val) {\n              videoDOM[_k] = val;\n            }\n          }));\n          //自定义新属性\n          switch (_k) {\n            case 'paused':\n              _this = (0, _create2.default)(_this, {\n                playing: {\n                  get: function get() {\n                    return !videoDOM[_k];\n                  },\n                  set: function set(val) {\n                    videoDOM[_k] = !val;\n                  }\n                }\n              });\n              break;\n            case 'buffered':\n              _this = (0, _create2.default)(_this, {\n                bufferTime: {\n                  // eslint-disable-next-line\n                  get: function get() {\n                    return _this.getBufferTime();\n                  }\n                }\n              });\n              break;\n            case 'duration':\n              _this = (0, _create2.default)(_this, {\n                duration: {\n                  // eslint-disable-next-line\n                  get: function get() {\n                    return _this.fragmentDuration || videoDOM.duration;\n                  }\n                }\n              });\n              break;\n            default:\n          }\n        }\n        k = _k;\n      };\n\n      //这里把vidoeDOM里面的的大部分属性和方法，都绑在了this中。\n      for (var k in videoDOM) {\n        var _ret = _loop(k);\n\n        if (_ret === 'continue') continue;\n      }\n    } catch (e) {\n      //nothing\n    }\n    return _this;\n  }\n  //默认值\n\n\n  (0, _createClass3.default)(API, [{\n    key: 'play',\n\n    //载入视频源，这里不可以用箭头函数\n    value: function play() {\n      if (!this.playing) {\n        this._play();\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.playing) {\n        this._pause();\n      }\n    }\n  }, {\n    key: 'setVolume',\n    value: function setVolume(volume) {\n      if (!this.muted) {\n        this.volume = volume;\n      }\n    }\n    //获取buffer的秒数\n\n  }, {\n    key: 'getBufferTime',\n    value: function getBufferTime() {\n      if (this.living) {\n        if (this.buffered.length > 0) {\n          return this.buffered.end(0);\n        } else {\n          return 0;\n        }\n      }\n      var buf = this.buffered;\n      var total = 0;\n      for (var ii = 0; ii < buf.length; ii++) {\n        total += buf.end(ii) - buf.start(ii);\n      }\n      return total;\n    }\n    //重置api一些值\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.currentTime = 0;\n      this.videoGaps = 0;\n    }\n    /**\n     * 监控事件\n     * @param { string } type 事件类型\n     * @param { function } callback 回调函数\n     */\n\n  }, {\n    key: 'on',\n    value: function on(dom, type, callback) {\n      var _this3 = this;\n\n      if ((0, _isString2.default)(dom)) {\n        callback = type;\n        type = dom;\n        dom = this;\n      }\n      //自定义事件和dom事件一起绑定了，这里不做判断有没有type类型的dom事件\n      var event = (0, _addEventListener2.default)(dom, type, callback);\n      //自定义事件\n      this.event.on(type, callback);\n      //remove适配\n      var eventListIndex = util.randomKey();\n      if (!this.eventList) {\n        this.eventList = {};\n      }\n      if (!this.eventList[type]) {\n        this.eventList[type] = {};\n      }\n      this.eventList[type][eventListIndex] = event;\n      //这个remove是给当前事件解绑使用\n      var returnRemove = function returnRemove() {\n        _this3.eventList[type][eventListIndex] && _this3.eventList[type][eventListIndex].remove();\n        //删除移除指定的this.eventList[type]\n        delete _this3.eventList[type][eventListIndex];\n        //移除当前自定义事件\n        _this3.event.off(type, callback);\n      };\n      //返回的事件对像只能移除当前监听的事件。\n      return {\n        off: returnRemove\n      };\n    }\n    /**\n     * 移除指定或者全部监控事件，包括多次绑定的事件\n     * @param { string || undefined || array } type 事件类型\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type) {\n      var _this4 = this;\n\n      if (type === undefined) {\n        //移除全部事件\n        for (var _k2 in this.eventList) {\n          for (var j in this.eventList[_k2]) {\n            this.eventList[_k2][j].remove();\n          }\n        }\n        this.eventList = {};\n        //移除全部自定义事件\n        this.event.off();\n      } else if (Object.prototype.toString.apply(type) === '[object Array]') {\n        //移除部分事件\n        type.forEach(function (v) {\n          for (var _j in _this4.eventList[v]) {\n            _this4.eventList[v][_j].remove();\n          }\n          delete _this4.eventList[v];\n        });\n      } else {\n        //移除一个事件\n        for (var _j2 in this.eventList[type]) {\n          this.eventList[type][_j2].remove();\n        }\n        delete this.eventList[type];\n        //移除自定义事件\n        this.event.off(type);\n      }\n    }\n    //触发自定义事件\n\n  }, {\n    key: 'trigger',\n    value: function trigger(name) {\n      var _event;\n\n      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      return (_event = this.event).trigger.apply(_event, [name].concat(params));\n    }\n  }]);\n  return API;\n}();\n//使用的是backbone event\n//外api的事件，内部数据流只使用redux\n\n\nexports.default = API;"]},"metadata":{},"sourceType":"script"}