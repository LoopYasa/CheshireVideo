{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Srt;\n\nvar _util = require('./util'); // Component that loads and parses an SRT file\n\n\nfunction Srt(data) {\n  // Trim whitespace and split the list by returns.\n  var _captions = [];\n  data = (0, _util.trim)(data);\n  var list = data.split('\\r\\n\\r\\n');\n\n  if (list.length === 1) {\n    list = data.split('\\n\\n');\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] === 'WEBVTT') {\n      continue;\n    } // Parse each entry\n\n\n    var entry = _entry(list[i]);\n\n    if (entry.text) {\n      _captions.push(entry);\n    }\n  }\n\n  return _captions;\n}\n/* Parse a single captions entry. */\n\n\nfunction _entry(data) {\n  var entry = {};\n  var array = data.split('\\r\\n');\n\n  if (array.length === 1) {\n    array = data.split('\\n');\n  }\n\n  var idx = 1;\n\n  if (array[0].indexOf(' --> ') > 0) {\n    idx = 0;\n  }\n\n  if (array.length > idx + 1 && array[idx + 1]) {\n    // This line contains the start and end.\n    var line = array[idx];\n    var index = line.indexOf(' --> ');\n\n    if (index > 0) {\n      entry.begin = (0, _util.seconds)(line.substr(0, index));\n      entry.end = (0, _util.seconds)(line.substr(index + 5)); // Remaining lines contain the text\n\n      entry.text = array.slice(idx + 1).join('\\r\\n');\n    }\n  }\n\n  return entry;\n}","map":{"version":3,"sources":["C:/Users/MaGent/Desktop/video/video/node_modules/html5-player/libs/utils/srt.js"],"names":["Object","defineProperty","exports","value","default","Srt","_util","require","data","_captions","trim","list","split","length","i","entry","_entry","text","push","array","idx","indexOf","line","index","begin","seconds","substr","end","slice","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,GAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB,C,CAEA;;;AAEA,SAASF,GAAT,CAAaG,IAAb,EAAmB;AACjB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAD,EAAAA,IAAI,GAAG,CAAC,GAAGF,KAAK,CAACI,IAAV,EAAgBF,IAAhB,CAAP;AACA,MAAIG,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAW,UAAX,CAAX;;AACA,MAAID,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrBF,IAAAA,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAW,MAAX,CAAP;AACD;;AAED,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIH,IAAI,CAACG,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACxB;AACD,KAHmC,CAIpC;;;AACA,QAAIC,KAAK,GAAGC,MAAM,CAACL,IAAI,CAACG,CAAD,CAAL,CAAlB;;AACA,QAAIC,KAAK,CAACE,IAAV,EAAgB;AACdR,MAAAA,SAAS,CAACS,IAAV,CAAeH,KAAf;AACD;AACF;;AAED,SAAON,SAAP;AACD;AAED;;;AACA,SAASO,MAAT,CAAgBR,IAAhB,EAAsB;AACpB,MAAIO,KAAK,GAAG,EAAZ;AACA,MAAII,KAAK,GAAGX,IAAI,CAACI,KAAL,CAAW,MAAX,CAAZ;;AACA,MAAIO,KAAK,CAACN,MAAN,KAAiB,CAArB,EAAwB;AACtBM,IAAAA,KAAK,GAAGX,IAAI,CAACI,KAAL,CAAW,IAAX,CAAR;AACD;;AACD,MAAIQ,GAAG,GAAG,CAAV;;AACA,MAAID,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,OAAjB,IAA4B,CAAhC,EAAmC;AACjCD,IAAAA,GAAG,GAAG,CAAN;AACD;;AACD,MAAID,KAAK,CAACN,MAAN,GAAeO,GAAG,GAAG,CAArB,IAA0BD,KAAK,CAACC,GAAG,GAAG,CAAP,CAAnC,EAA8C;AAC5C;AACA,QAAIE,IAAI,GAAGH,KAAK,CAACC,GAAD,CAAhB;AACA,QAAIG,KAAK,GAAGD,IAAI,CAACD,OAAL,CAAa,OAAb,CAAZ;;AACA,QAAIE,KAAK,GAAG,CAAZ,EAAe;AACbR,MAAAA,KAAK,CAACS,KAAN,GAAc,CAAC,GAAGlB,KAAK,CAACmB,OAAV,EAAmBH,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAeH,KAAf,CAAnB,CAAd;AACAR,MAAAA,KAAK,CAACY,GAAN,GAAY,CAAC,GAAGrB,KAAK,CAACmB,OAAV,EAAmBH,IAAI,CAACI,MAAL,CAAYH,KAAK,GAAG,CAApB,CAAnB,CAAZ,CAFa,CAGb;;AACAR,MAAAA,KAAK,CAACE,IAAN,GAAaE,KAAK,CAACS,KAAN,CAAYR,GAAG,GAAG,CAAlB,EAAqBS,IAArB,CAA0B,MAA1B,CAAb;AACD;AACF;;AACD,SAAOd,KAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Srt;\n\nvar _util = require('./util');\n\n// Component that loads and parses an SRT file\n\nfunction Srt(data) {\n  // Trim whitespace and split the list by returns.\n  var _captions = [];\n  data = (0, _util.trim)(data);\n  var list = data.split('\\r\\n\\r\\n');\n  if (list.length === 1) {\n    list = data.split('\\n\\n');\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] === 'WEBVTT') {\n      continue;\n    }\n    // Parse each entry\n    var entry = _entry(list[i]);\n    if (entry.text) {\n      _captions.push(entry);\n    }\n  }\n\n  return _captions;\n}\n\n/* Parse a single captions entry. */\nfunction _entry(data) {\n  var entry = {};\n  var array = data.split('\\r\\n');\n  if (array.length === 1) {\n    array = data.split('\\n');\n  }\n  var idx = 1;\n  if (array[0].indexOf(' --> ') > 0) {\n    idx = 0;\n  }\n  if (array.length > idx + 1 && array[idx + 1]) {\n    // This line contains the start and end.\n    var line = array[idx];\n    var index = line.indexOf(' --> ');\n    if (index > 0) {\n      entry.begin = (0, _util.seconds)(line.substr(0, index));\n      entry.end = (0, _util.seconds)(line.substr(index + 5));\n      // Remaining lines contain the text\n      entry.text = array.slice(idx + 1).join('\\r\\n');\n    }\n  }\n  return entry;\n}"]},"metadata":{},"sourceType":"script"}