{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nexports.default = function () {\n  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n    params[_key] = arguments[_key];\n  }\n\n  return new (Function.prototype.bind.apply(Events, [null].concat(params)))();\n};\n\nvar _ready = require('../../ready');\n\nvar _video = require('../../video');\n\nvar _history = require('../../history');\n\nvar _const = require('../../../utils/const');\n\nvar _logger = require('../../../utils/logger');\n\nvar logger = _interopRequireWildcard(_logger);\n\nvar _browser = require('../../../utils/browser');\n\nvar _errorCode = require('../../../utils/error-code');\n\nvar _contains = require('../../../utils/dom/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Events = function () {\n  /**\n   *\n   * @param {object} payload model vidoe/init的payload\n   * @param {boolean} isFirstPlay 是否是第一次播放视频\n   * @param {object} _state 存放一些状态，reload都不会改变的\n   */\n  function Events(payload, isFirstPlay, _state) {\n    (0, _classCallCheck3.default)(this, Events);\n    this.api = payload.api;\n    this._state = _state;\n    this.dispatch = payload.dispatch; //是否是第一次播放视频\n\n    this.isFirstPlay = isFirstPlay;\n    this.config = payload.config;\n\n    if (!this.api.hlsObj) {\n      this.setOriginHlsSubtitle();\n    }\n\n    this.loadeddata();\n    this.timeupdate();\n    this.pause();\n    this.error();\n    this.ended();\n    this.onSpaceAndVieoFocusEvent();\n    this.setTimeoutInterval(true);\n    logger.info('Listening:', 'listening on h5 video events.');\n  }\n  /**\n   * 定时检查超时问题，视频播放中卡住超过设定时间，属于超时\n   * @param {boolean} withoutPlayingState 无playing状态\n   */\n\n\n  (0, _createClass3.default)(Events, [{\n    key: 'setTimeoutInterval',\n    value: function setTimeoutInterval(withoutPlayingState) {\n      var _this = this;\n\n      clearInterval(this.timeoutInterval);\n      var _config$timeout = this.config.timeout,\n          timeout = _config$timeout === undefined ? _const.VIDEO_TIMEOUT : _config$timeout;\n      this.timeoutInterval = setInterval(function () {\n        //定时查看是否超时\n        //404等非200或者不是正确的视频，刚开始会报错，并不会播放，所以刚开始不能被playing拦截\n        // console.log(this.api.playing, withoutPlayingState);\n        if (_this.api.playing || withoutPlayingState) {\n          _this.timeoutAction();\n        }\n      }, timeout);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.currentTime = 0;\n      clearInterval(this.timeoutInterval);\n    } //原生浏览器hls\n\n  }, {\n    key: 'setOriginHlsSubtitle',\n    value: function setOriginHlsSubtitle() {\n      var _this2 = this;\n\n      var api = this.api;\n\n      if (this.config.isHls) {\n        var textTracks = api.textTracks;\n        var clearIntervalObj = void 0;\n        clearInterval(clearIntervalObj);\n        var tempLength = 0; //trackList长度一样后执行次数\n\n        var count = 0;\n        clearIntervalObj = setInterval(function () {\n          //由于firefox不支持change事件\n          if (textTracks.length === 0) {\n            return;\n          }\n\n          var subtitleLength = 0;\n          var subtitleList = [];\n          var subtitleId = 0;\n\n          for (var i = 0; i < textTracks.length; i++) {\n            if (textTracks[i].kind === 'subtitles') {\n              subtitleList.push((0, _extends3.default)({\n                id: subtitleId,\n                name: textTracks[i].label\n              }, textTracks[i]));\n              subtitleId++;\n              textTracks[i].mode = 'disabled';\n              subtitleLength++;\n            }\n          }\n\n          if (tempLength === subtitleLength) {\n            if (count >= 2) {\n              //如果两次以上length都没变化就判断为textTrack没变化。\n              //这里不排除网络很差的导致加载出问题，但是这种极端情况，不好处理，也没必要处理。\n              //因为如果网络都差到连2KB左右的内容都加载不了，也完全播放不了视频了。\n              api.off('cuechange'); //防止连续监听事件。\n\n              for (var _i = 0; _i < textTracks.length; _i++) {\n                api.on(textTracks[_i], 'cuechange', function (cues) {\n                  _this2.dispatch({\n                    type: _video.namespace + '/hlsSubtitleCues',\n                    payload: cues.target.activeCues\n                  });\n                });\n              }\n\n              _this2.dispatch({\n                type: _video.namespace + '/subtitleList',\n                payload: {\n                  subtitleList: subtitleList,\n                  subtitleId: -1\n                }\n              });\n\n              clearInterval(clearIntervalObj);\n            }\n\n            count++;\n          }\n\n          tempLength = subtitleLength;\n        }, 200);\n      }\n    }\n  }, {\n    key: 'loadeddata',\n    value: function loadeddata() {\n      var _this3 = this;\n\n      var api = this.api;\n      var config = this.config;\n      var dispatch = this.dispatch;\n      var _config = this.config,\n          isLiving = _config.isLiving,\n          defaultCurrentTime = _config.defaultCurrentTime;\n      api.on('loadeddata', function () {\n        _this3.isLoadeddata = true; //视频载入后重新定时处理超时。\n\n        _this3.setTimeoutInterval(); //设置重载状态false，这个视事件运行了，视频就可以播放了。\n\n\n        logger.info('Ready:', 'video is ready to played.');\n        api.trigger('ready'); // 隐藏 controlbar\n\n        _this3.dispatch({\n          type: _video.namespace + '/controlbar',\n          payload: false,\n          delayTime: config.controlbarHideTime,\n          onControlbarEnter: false\n        }); //isLiving强制设置为直播状态。safari中flv无法获取直播状态，所以需要设置这个。\n\n\n        if (!api.living && !config.isLiving && _this3._state.lastCurrentTime) {\n          //播放中途出错，重载需要载入上一个播放进度\n          api.currentTime = _this3._state.lastCurrentTime;\n          _this3._state.lastCurrentTime = 0;\n\n          if (!_this3.isFirstPlay) {\n            dispatch({\n              type: _video.namespace + '/play'\n            });\n          } else if (api.autoplay) {\n            dispatch({\n              type: _video.namespace + '/play'\n            });\n          }\n        } else if (defaultCurrentTime !== undefined) {\n          dispatch({\n            type: _video.namespace + '/seekingState',\n            payload: true\n          });\n          dispatch({\n            type: _video.namespace + '/seeking',\n            payload: {\n              percent: defaultCurrentTime / api.duration\n            }\n          });\n          dispatch({\n            type: _video.namespace + '/seekingState',\n            payload: false\n          });\n        }\n\n        dispatch({\n          type: _ready.namespace + '/state'\n        }); //兼容edge，用来比较获取loading状态\n\n        _this3.currentTime = api.currentTime; //currentTime处理\n\n        dispatch({\n          type: _video.namespace + '/time',\n          payload: {\n            currentTime: api.currentTime,\n            duration: api.duration\n          }\n        });\n        dispatch({\n          type: _video.namespace + '/living',\n          payload: {\n            duration: isLiving ? Infinity : api.duration\n          }\n        });\n        dispatch({\n          type: _video.namespace + '/loading',\n          payload: {\n            loading: false\n          }\n        });\n        api.reloading = false;\n        _this3._state.retryReloadTime = 0;\n      });\n    }\n  }, {\n    key: 'timeoutAction',\n    value: function timeoutAction() {\n      var api = this.api;\n      var locale = api.localization; // const { retryTimes = RETRY_TIMES } = this.config;\n      // console.log(this.currentTime, api.currentTime, this.api.isError);\n\n      if (this.api.isError || this.api.ended) {\n        return;\n      }\n\n      if (this.currentTime !== api.currentTime && this.currentTime !== undefined) {\n        //视频在播放（视频状态为播放中，但是没有因为网络而卡顿），不处理\n        this.currentTime = api.currentTime;\n        return;\n      }\n\n      api.trigger('error', {\n        //基本上trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。\n        //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。\n        data: {},\n        message: locale.timeout,\n        type: _errorCode.TIMEOUT_ERROR\n      });\n    }\n  }, {\n    key: 'timeupdate',\n    value: function timeupdate() {\n      var _this4 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      var _config2 = this.config,\n          _config2$livingMaxBuf = _config2.livingMaxBuffer,\n          livingMaxBuffer = _config2$livingMaxBuf === undefined ? _const.LIVING_MAXBUFFER_TIME : _config2$livingMaxBuf,\n          isHls = _config2.isHls;\n      api.on('timeupdate', function () {\n        //edge播放原生hls时，在这里会不断运行，即使网络断了\n        if (api.playing) {\n          if (!api.living) {\n            //直播不播放状态中不处理loading\n            //begin----处理loading状态\n            //isIE包括了Edge\n            if (_this4.currentTime === api.currentTime && (0, _browser.isIE)()) {\n              if (!api.loading) {\n                //需要做判断，要不会被clearTimeout了\n                dispatch({\n                  type: _video.namespace + '/loading',\n                  payload: {\n                    loading: true\n                  }\n                });\n              }\n            } else if (!api.loading && api.readyState === _const.HAVE_CURRENT_DATA && !api.ended //api.eneded解决firefox，结束后readyState=2导致的loading未关闭的问题\n            ) {\n                if (!api.loading) {\n                  dispatch({\n                    type: _video.namespace + '/loading',\n                    payload: {\n                      loading: true\n                    }\n                  });\n                }\n              } else if (api.loading && (api.readyState === _const.HAVE_FUTURE_DATA || api.readyState === _const.HAVE_ENOUGH_DATA)) {\n              dispatch({\n                type: _video.namespace + '/loading',\n                payload: {\n                  loading: false\n                }\n              });\n            } //end----处理loading状态\n\n          } else if (api.loading && _this4.currentTime !== api.currentTime) {\n            //直播状态正在播放中如果发现loading，直接隐藏。\n            dispatch({\n              type: _video.namespace + '/loading',\n              payload: {\n                loading: false\n              }\n            });\n          } //currentTime处理\n\n\n          if (!api.seekingState) {\n            var namespace = _video.namespace;\n\n            if (_this4.config.isHistory) {\n              namespace = _history.namespace;\n            }\n\n            dispatch({\n              type: namespace + '/time',\n              payload: {\n                currentTime: api.ended ? api.duration : api.currentTime,\n                duration: api.duration\n              }\n            });\n          } //直播延时变大处理\n          //safari原生的hls，在直播延时处理失效，还没有解决办法，不过hls本来的延时就大，影响不大。\n          //使用的hls.js和flv.js延时处理是正常的。\n          //edge原生的hls的也正常，不过经常会卡，然后就触发了重载，然后就正常了。\n          //正常网络下hls处理延时变大会很少的，flv才可能频繁一点，flv的实时性要求高。\n\n\n          if (api.living && api.buffered.length > 0 && api.currentTime && livingMaxBuffer > 0 && !api.isError) {\n            //livingMaxBuffer=0，相当于没设置，最好不要设置为0\n            if (isHls) {\n              //hls需要的直播需要特殊对待。\n              livingMaxBuffer += 15;\n            } //直播实时处理，让视频接近实时。\n            // console.log(api.bufferTime, api.buffered.end(0));\n\n\n            if (api.bufferTime - api.currentTime > livingMaxBuffer) {\n              var reduceBuffer = void 0;\n\n              if (isHls) {\n                reduceBuffer = 15;\n              } else {\n                reduceBuffer = 1;\n              } //浏览器原生的hls，在直播状态设置currentTime失效。\n\n\n              api.currentTime = api.bufferTime - reduceBuffer; //标记正在减少延时状态\n\n              _this4.reducingDelay = true; //同时超时重新计算\n\n              logger.log('Delay Reduce', 'Due to the high delay, there is a need to reduce the delay.');\n            }\n          }\n\n          if (api.currentTime) {\n            //只要在播放，retryReloadTime就要设置为0。\n            _this4._state.retryReloadTime = 0;\n          }\n\n          if (_this4.currentTime !== api.currentTime) {\n            //需要判断currentTime，因为edge的hls视频即使出错停止了，也会运行timeupdate\n            _this4.setTimeoutInterval();\n          }\n\n          _this4._state.retryReloadTime = 0;\n        }\n\n        if (api.isError && _this4.currentTime !== api.currentTime) {\n          //需要判断currentTime，因为edge的hls视频即使出错停止了，也会运行timeupdate\n          //隐藏错误信息\n          dispatch({\n            type: _video.namespace + '/errorMessage',\n            payload: {\n              message: null\n            }\n          });\n        } //最后赋值，可以用来判断视频视频卡顿\n\n\n        _this4.currentTime = api.currentTime;\n      });\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      var api = this.api;\n      api.on('pause', function (e) {//清理timeupdate中的定时器。\n      });\n    }\n  }, {\n    key: 'error',\n    value: function error() {\n      var _this5 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      var locale = api.localization;\n      var _config$retryTimes = this.config.retryTimes,\n          retryTimes = _config$retryTimes === undefined ? _const.RETRY_TIMES : _config$retryTimes;\n      api.on('error', function (data) {\n        if (data && data.nativeEvent || data && data.parser === 'hls.js') {\n          // h5 原生报错截止不处理，只做超时处理。\n          // hls.js 报错也不做处理\n          return;\n        }\n\n        var retryReloadTime = _this5._state.retryReloadTime;\n\n        if (retryReloadTime < retryTimes) {\n          _this5._state.retryReloadTime++;\n          logger.warn('Timeout:', 'try to reload ' + (retryReloadTime + 1) + ' times.');\n          dispatch({\n            type: _video.namespace + '/reload',\n            payload: {\n              retryReloadTime: retryReloadTime + 1\n            }\n          });\n        } else {\n          logger.error('Timeout:', 'try to reload ' + retryTimes + ' times but video can not be loaded.');\n          _this5._state.retryReloadTime = 1;\n\n          _this5.reset(); //有message和type的是hls.js等事件的错误\n\n\n          api.isError = true;\n          var message = data.message;\n\n          if (!message) {\n            logger.error('H5 Video Error:', 'original h5 video error');\n          }\n\n          if (!message) {\n            message = locale.fileCouldNotPlay;\n          }\n\n          if (_this5.config.videoNotSupport) {\n            message = locale.videoNotSupport;\n          }\n\n          dispatch({\n            type: _video.namespace + '/loading',\n            payload: {\n              message: null,\n              retryReloadTime: 1\n            }\n          });\n          dispatch({\n            type: _video.namespace + '/errorMessage',\n            payload: {\n              message: message\n            }\n          });\n          api.detachMedia && api.detachMedia();\n        }\n      });\n    }\n  }, {\n    key: 'ended',\n    value: function ended() {\n      var _this6 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      api.on('ended', function () {\n        logger.info('Ended:', 'video is ended');\n\n        if (_this6.config.isHistory) {\n          _this6.dispatch({\n            type: _history.namespace + '/playNextVideo'\n          });\n        } else {\n          if (!api.living && !_this6.config.isLiving) {\n            //直播是不会结束的\n            //即使监控到end事件也不做处理\n            dispatch({\n              type: _video.namespace + '/end',\n              payload: true\n            });\n          } else if (!(0, _browser.isSafari)()) {\n            //直播有时候会遇到结束事件，那是因为转发切换触发结束事件\n            //safari flv.js直播经常报ended事件。\n            //等待两秒重新拉流，因为转发切换可能会有延时，播放链接不是立即就可以播放。\n            //真正直播结束的场景，目前不做考虑。\n            setTimeout(function () {\n              dispatch({\n                type: _video.namespace + '/reload'\n              });\n            }, 2000);\n          }\n        }\n      });\n    } //键盘空格键和video聚焦事件\n\n  }, {\n    key: 'onSpaceAndVieoFocusEvent',\n    value: function onSpaceAndVieoFocusEvent() {\n      var _this7 = this;\n\n      if (!this.config.spaceAction) {\n        return false;\n      }\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n\n      var keydown = function keydown() {\n        _this7.playerKeydownEvent && _this7.playerKeydownEvent.off();\n        _this7.playerKeydownEvent = api.on(api.ownerDocument, 'keydown', function (e) {\n          if (api.living) {\n            return;\n          }\n\n          if (e.keyCode === 32) {\n            logger.info('Keydown:', 'space key is pressed');\n\n            if (api.playing) {\n              dispatch({\n                type: _video.namespace + '/pause'\n              });\n            } else {\n              dispatch({\n                type: _video.namespace + '/play'\n              });\n            }\n          }\n        });\n      };\n\n      api.on(api.parentNode, 'mouseenter', function (e) {\n        api.trigger('focus', true);\n\n        if (!api.focus) {\n          logger.info('Video Focus:', 'video is focused');\n        }\n\n        api.focus = true;\n        keydown();\n      });\n      api.on(api.parentNode, 'mouseleave', function (e) {\n        //为点击播放器，移出去播放器，算失去聚焦。\n        if (!_this7.mousedown) {\n          api.focus = false;\n          api.trigger('focus', false);\n          logger.info('Video Unfocused:', 'video is unfocused');\n          _this7.playerKeydownEvent && _this7.playerKeydownEvent.off();\n        }\n      });\n      api.on(api.parentNode, 'mousedown', function (e) {\n        _this7.mousedown = true;\n\n        if (!api.focus) {\n          api.trigger('focus', true);\n          logger.info('Video Focus:', 'video is focused');\n        }\n\n        _this7.documentMousedownEvent && _this7.documentMousedownEvent.off();\n        _this7.documentMousedownEvent = api.on(api.ownerDocument, 'mousedown', function (e) {\n          if (!(0, _contains2.default)(api.parentNode, e.target)) {\n            _this7.mousedown = false;\n            api.trigger('focus', false);\n            logger.info('Video Unfocused:', 'video is unfocused');\n\n            _this7.documentMousedownEvent.off();\n\n            _this7.playerKeydownEvent.off();\n          }\n        });\n        keydown();\n      });\n    }\n  }]);\n  return Events;\n}();","map":{"version":3,"sources":["C:/Users/MaGent/Desktop/video/video/node_modules/html5-player/libs/model/video/events/index.js"],"names":["Object","defineProperty","exports","value","_extends2","require","_extends3","_interopRequireDefault","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","default","_len","arguments","length","params","Array","_key","Function","prototype","bind","apply","Events","concat","_ready","_video","_history","_const","_logger","logger","_interopRequireWildcard","_browser","_errorCode","_contains","_contains2","obj","__esModule","newObj","key","hasOwnProperty","call","payload","isFirstPlay","_state","api","dispatch","config","hlsObj","setOriginHlsSubtitle","loadeddata","timeupdate","pause","error","ended","onSpaceAndVieoFocusEvent","setTimeoutInterval","info","withoutPlayingState","_this","clearInterval","timeoutInterval","_config$timeout","timeout","undefined","VIDEO_TIMEOUT","setInterval","playing","timeoutAction","reset","currentTime","_this2","isHls","textTracks","clearIntervalObj","tempLength","count","subtitleLength","subtitleList","subtitleId","i","kind","push","id","name","label","mode","off","_i","on","cues","type","namespace","target","activeCues","_this3","_config","isLiving","defaultCurrentTime","isLoadeddata","trigger","delayTime","controlbarHideTime","onControlbarEnter","living","lastCurrentTime","autoplay","percent","duration","Infinity","loading","reloading","retryReloadTime","locale","localization","isError","data","message","TIMEOUT_ERROR","_this4","_config2","_config2$livingMaxBuf","livingMaxBuffer","LIVING_MAXBUFFER_TIME","isIE","readyState","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","seekingState","isHistory","buffered","bufferTime","reduceBuffer","reducingDelay","log","e","_this5","_config$retryTimes","retryTimes","RETRY_TIMES","nativeEvent","parser","warn","fileCouldNotPlay","videoNotSupport","detachMedia","_this6","isSafari","setTimeout","_this7","spaceAction","keydown","playerKeydownEvent","ownerDocument","keyCode","parentNode","focus","mousedown","documentMousedownEvent"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nexports.default = function () {\n  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n    params[_key] = arguments[_key];\n  }\n\n  return new (Function.prototype.bind.apply(Events, [null].concat(params)))();\n};\n\nvar _ready = require('../../ready');\n\nvar _video = require('../../video');\n\nvar _history = require('../../history');\n\nvar _const = require('../../../utils/const');\n\nvar _logger = require('../../../utils/logger');\n\nvar logger = _interopRequireWildcard(_logger);\n\nvar _browser = require('../../../utils/browser');\n\nvar _errorCode = require('../../../utils/error-code');\n\nvar _contains = require('../../../utils/dom/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Events = function () {\n  /**\n   *\n   * @param {object} payload model vidoe/init的payload\n   * @param {boolean} isFirstPlay 是否是第一次播放视频\n   * @param {object} _state 存放一些状态，reload都不会改变的\n   */\n  function Events(payload, isFirstPlay, _state) {\n    (0, _classCallCheck3.default)(this, Events);\n\n    this.api = payload.api;\n    this._state = _state;\n    this.dispatch = payload.dispatch;\n    //是否是第一次播放视频\n    this.isFirstPlay = isFirstPlay;\n    this.config = payload.config;\n    if (!this.api.hlsObj) {\n      this.setOriginHlsSubtitle();\n    }\n    this.loadeddata();\n    this.timeupdate();\n    this.pause();\n    this.error();\n    this.ended();\n    this.onSpaceAndVieoFocusEvent();\n    this.setTimeoutInterval(true);\n    logger.info('Listening:', 'listening on h5 video events.');\n  }\n  /**\n   * 定时检查超时问题，视频播放中卡住超过设定时间，属于超时\n   * @param {boolean} withoutPlayingState 无playing状态\n   */\n\n\n  (0, _createClass3.default)(Events, [{\n    key: 'setTimeoutInterval',\n    value: function setTimeoutInterval(withoutPlayingState) {\n      var _this = this;\n\n      clearInterval(this.timeoutInterval);\n      var _config$timeout = this.config.timeout,\n          timeout = _config$timeout === undefined ? _const.VIDEO_TIMEOUT : _config$timeout;\n\n      this.timeoutInterval = setInterval(function () {\n        //定时查看是否超时\n        //404等非200或者不是正确的视频，刚开始会报错，并不会播放，所以刚开始不能被playing拦截\n        // console.log(this.api.playing, withoutPlayingState);\n        if (_this.api.playing || withoutPlayingState) {\n          _this.timeoutAction();\n        }\n      }, timeout);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.currentTime = 0;\n      clearInterval(this.timeoutInterval);\n    }\n    //原生浏览器hls\n\n  }, {\n    key: 'setOriginHlsSubtitle',\n    value: function setOriginHlsSubtitle() {\n      var _this2 = this;\n\n      var api = this.api;\n      if (this.config.isHls) {\n        var textTracks = api.textTracks;\n        var clearIntervalObj = void 0;\n        clearInterval(clearIntervalObj);\n        var tempLength = 0;\n        //trackList长度一样后执行次数\n        var count = 0;\n        clearIntervalObj = setInterval(function () {\n          //由于firefox不支持change事件\n          if (textTracks.length === 0) {\n            return;\n          }\n          var subtitleLength = 0;\n          var subtitleList = [];\n          var subtitleId = 0;\n          for (var i = 0; i < textTracks.length; i++) {\n            if (textTracks[i].kind === 'subtitles') {\n              subtitleList.push((0, _extends3.default)({\n                id: subtitleId,\n                name: textTracks[i].label\n              }, textTracks[i]));\n              subtitleId++;\n              textTracks[i].mode = 'disabled';\n              subtitleLength++;\n            }\n          }\n          if (tempLength === subtitleLength) {\n            if (count >= 2) {\n              //如果两次以上length都没变化就判断为textTrack没变化。\n              //这里不排除网络很差的导致加载出问题，但是这种极端情况，不好处理，也没必要处理。\n              //因为如果网络都差到连2KB左右的内容都加载不了，也完全播放不了视频了。\n              api.off('cuechange'); //防止连续监听事件。\n              for (var _i = 0; _i < textTracks.length; _i++) {\n                api.on(textTracks[_i], 'cuechange', function (cues) {\n                  _this2.dispatch({\n                    type: _video.namespace + '/hlsSubtitleCues',\n                    payload: cues.target.activeCues\n                  });\n                });\n              }\n              _this2.dispatch({\n                type: _video.namespace + '/subtitleList',\n                payload: {\n                  subtitleList: subtitleList,\n                  subtitleId: -1\n                }\n              });\n              clearInterval(clearIntervalObj);\n            }\n            count++;\n          }\n          tempLength = subtitleLength;\n        }, 200);\n      }\n    }\n  }, {\n    key: 'loadeddata',\n    value: function loadeddata() {\n      var _this3 = this;\n\n      var api = this.api;\n      var config = this.config;\n      var dispatch = this.dispatch;\n      var _config = this.config,\n          isLiving = _config.isLiving,\n          defaultCurrentTime = _config.defaultCurrentTime;\n\n      api.on('loadeddata', function () {\n        _this3.isLoadeddata = true;\n        //视频载入后重新定时处理超时。\n        _this3.setTimeoutInterval();\n        //设置重载状态false，这个视事件运行了，视频就可以播放了。\n        logger.info('Ready:', 'video is ready to played.');\n        api.trigger('ready');\n        // 隐藏 controlbar\n        _this3.dispatch({\n          type: _video.namespace + '/controlbar',\n          payload: false,\n          delayTime: config.controlbarHideTime,\n          onControlbarEnter: false\n        });\n        //isLiving强制设置为直播状态。safari中flv无法获取直播状态，所以需要设置这个。\n        if (!api.living && !config.isLiving && _this3._state.lastCurrentTime) {\n          //播放中途出错，重载需要载入上一个播放进度\n          api.currentTime = _this3._state.lastCurrentTime;\n          _this3._state.lastCurrentTime = 0;\n          if (!_this3.isFirstPlay) {\n            dispatch({\n              type: _video.namespace + '/play'\n            });\n          } else if (api.autoplay) {\n            dispatch({\n              type: _video.namespace + '/play'\n            });\n          }\n        } else if (defaultCurrentTime !== undefined) {\n          dispatch({\n            type: _video.namespace + '/seekingState',\n            payload: true\n          });\n          dispatch({\n            type: _video.namespace + '/seeking',\n            payload: {\n              percent: defaultCurrentTime / api.duration\n            }\n          });\n          dispatch({\n            type: _video.namespace + '/seekingState',\n            payload: false\n          });\n        }\n\n        dispatch({\n          type: _ready.namespace + '/state'\n        });\n        //兼容edge，用来比较获取loading状态\n        _this3.currentTime = api.currentTime;\n        //currentTime处理\n        dispatch({\n          type: _video.namespace + '/time',\n          payload: {\n            currentTime: api.currentTime,\n            duration: api.duration\n          }\n        });\n        dispatch({\n          type: _video.namespace + '/living',\n          payload: {\n            duration: isLiving ? Infinity : api.duration\n          }\n        });\n        dispatch({\n          type: _video.namespace + '/loading',\n          payload: {\n            loading: false\n          }\n        });\n        api.reloading = false;\n        _this3._state.retryReloadTime = 0;\n      });\n    }\n  }, {\n    key: 'timeoutAction',\n    value: function timeoutAction() {\n      var api = this.api;\n      var locale = api.localization;\n      // const { retryTimes = RETRY_TIMES } = this.config;\n      // console.log(this.currentTime, api.currentTime, this.api.isError);\n      if (this.api.isError || this.api.ended) {\n        return;\n      }\n      if (this.currentTime !== api.currentTime && this.currentTime !== undefined) {\n        //视频在播放（视频状态为播放中，但是没有因为网络而卡顿），不处理\n        this.currentTime = api.currentTime;\n        return;\n      }\n      api.trigger('error', {\n        //基本上trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。\n        //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。\n        data: {},\n        message: locale.timeout,\n        type: _errorCode.TIMEOUT_ERROR\n      });\n    }\n  }, {\n    key: 'timeupdate',\n    value: function timeupdate() {\n      var _this4 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      var _config2 = this.config,\n          _config2$livingMaxBuf = _config2.livingMaxBuffer,\n          livingMaxBuffer = _config2$livingMaxBuf === undefined ? _const.LIVING_MAXBUFFER_TIME : _config2$livingMaxBuf,\n          isHls = _config2.isHls;\n\n      api.on('timeupdate', function () {\n        //edge播放原生hls时，在这里会不断运行，即使网络断了\n        if (api.playing) {\n          if (!api.living) {\n            //直播不播放状态中不处理loading\n            //begin----处理loading状态\n            //isIE包括了Edge\n            if (_this4.currentTime === api.currentTime && (0, _browser.isIE)()) {\n              if (!api.loading) {\n                //需要做判断，要不会被clearTimeout了\n                dispatch({\n                  type: _video.namespace + '/loading',\n                  payload: {\n                    loading: true\n                  }\n                });\n              }\n            } else if (!api.loading && api.readyState === _const.HAVE_CURRENT_DATA && !api.ended\n            //api.eneded解决firefox，结束后readyState=2导致的loading未关闭的问题\n            ) {\n                if (!api.loading) {\n                  dispatch({\n                    type: _video.namespace + '/loading',\n                    payload: {\n                      loading: true\n                    }\n                  });\n                }\n              } else if (api.loading && (api.readyState === _const.HAVE_FUTURE_DATA || api.readyState === _const.HAVE_ENOUGH_DATA)) {\n              dispatch({\n                type: _video.namespace + '/loading',\n                payload: {\n                  loading: false\n                }\n              });\n            }\n            //end----处理loading状态\n          } else if (api.loading && _this4.currentTime !== api.currentTime) {\n            //直播状态正在播放中如果发现loading，直接隐藏。\n            dispatch({\n              type: _video.namespace + '/loading',\n              payload: {\n                loading: false\n              }\n            });\n          }\n          //currentTime处理\n          if (!api.seekingState) {\n            var namespace = _video.namespace;\n            if (_this4.config.isHistory) {\n              namespace = _history.namespace;\n            }\n            dispatch({\n              type: namespace + '/time',\n              payload: {\n                currentTime: api.ended ? api.duration : api.currentTime,\n                duration: api.duration\n              }\n            });\n          }\n          //直播延时变大处理\n          //safari原生的hls，在直播延时处理失效，还没有解决办法，不过hls本来的延时就大，影响不大。\n          //使用的hls.js和flv.js延时处理是正常的。\n          //edge原生的hls的也正常，不过经常会卡，然后就触发了重载，然后就正常了。\n          //正常网络下hls处理延时变大会很少的，flv才可能频繁一点，flv的实时性要求高。\n          if (api.living && api.buffered.length > 0 && api.currentTime && livingMaxBuffer > 0 && !api.isError) {\n            //livingMaxBuffer=0，相当于没设置，最好不要设置为0\n            if (isHls) {\n              //hls需要的直播需要特殊对待。\n              livingMaxBuffer += 15;\n            }\n            //直播实时处理，让视频接近实时。\n            // console.log(api.bufferTime, api.buffered.end(0));\n            if (api.bufferTime - api.currentTime > livingMaxBuffer) {\n              var reduceBuffer = void 0;\n              if (isHls) {\n                reduceBuffer = 15;\n              } else {\n                reduceBuffer = 1;\n              }\n              //浏览器原生的hls，在直播状态设置currentTime失效。\n              api.currentTime = api.bufferTime - reduceBuffer;\n              //标记正在减少延时状态\n              _this4.reducingDelay = true;\n              //同时超时重新计算\n              logger.log('Delay Reduce', 'Due to the high delay, there is a need to reduce the delay.');\n            }\n          }\n          if (api.currentTime) {\n            //只要在播放，retryReloadTime就要设置为0。\n            _this4._state.retryReloadTime = 0;\n          }\n          if (_this4.currentTime !== api.currentTime) {\n            //需要判断currentTime，因为edge的hls视频即使出错停止了，也会运行timeupdate\n            _this4.setTimeoutInterval();\n          }\n          _this4._state.retryReloadTime = 0;\n        }\n        if (api.isError && _this4.currentTime !== api.currentTime) {\n          //需要判断currentTime，因为edge的hls视频即使出错停止了，也会运行timeupdate\n          //隐藏错误信息\n          dispatch({\n            type: _video.namespace + '/errorMessage',\n            payload: {\n              message: null\n            }\n          });\n        }\n        //最后赋值，可以用来判断视频视频卡顿\n        _this4.currentTime = api.currentTime;\n      });\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      var api = this.api;\n      api.on('pause', function (e) {\n        //清理timeupdate中的定时器。\n      });\n    }\n  }, {\n    key: 'error',\n    value: function error() {\n      var _this5 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      var locale = api.localization;\n      var _config$retryTimes = this.config.retryTimes,\n          retryTimes = _config$retryTimes === undefined ? _const.RETRY_TIMES : _config$retryTimes;\n\n      api.on('error', function (data) {\n        if (data && data.nativeEvent || data && data.parser === 'hls.js') {\n          // h5 原生报错截止不处理，只做超时处理。\n          // hls.js 报错也不做处理\n          return;\n        }\n        var retryReloadTime = _this5._state.retryReloadTime;\n        if (retryReloadTime < retryTimes) {\n          _this5._state.retryReloadTime++;\n          logger.warn('Timeout:', 'try to reload ' + (retryReloadTime + 1) + ' times.');\n          dispatch({\n            type: _video.namespace + '/reload',\n            payload: {\n              retryReloadTime: retryReloadTime + 1\n            }\n          });\n        } else {\n          logger.error('Timeout:', 'try to reload ' + retryTimes + ' times but video can not be loaded.');\n          _this5._state.retryReloadTime = 1;\n          _this5.reset();\n          //有message和type的是hls.js等事件的错误\n          api.isError = true;\n          var message = data.message;\n          if (!message) {\n            logger.error('H5 Video Error:', 'original h5 video error');\n          }\n          if (!message) {\n            message = locale.fileCouldNotPlay;\n          }\n          if (_this5.config.videoNotSupport) {\n            message = locale.videoNotSupport;\n          }\n          dispatch({\n            type: _video.namespace + '/loading',\n            payload: {\n              message: null,\n              retryReloadTime: 1\n            }\n          });\n          dispatch({\n            type: _video.namespace + '/errorMessage',\n            payload: {\n              message: message\n            }\n          });\n          api.detachMedia && api.detachMedia();\n        }\n      });\n    }\n  }, {\n    key: 'ended',\n    value: function ended() {\n      var _this6 = this;\n\n      var api = this.api;\n      var dispatch = this.dispatch;\n      api.on('ended', function () {\n        logger.info('Ended:', 'video is ended');\n        if (_this6.config.isHistory) {\n          _this6.dispatch({\n            type: _history.namespace + '/playNextVideo'\n          });\n        } else {\n          if (!api.living && !_this6.config.isLiving) {\n            //直播是不会结束的\n            //即使监控到end事件也不做处理\n            dispatch({\n              type: _video.namespace + '/end',\n              payload: true\n            });\n          } else if (!(0, _browser.isSafari)()) {\n            //直播有时候会遇到结束事件，那是因为转发切换触发结束事件\n            //safari flv.js直播经常报ended事件。\n            //等待两秒重新拉流，因为转发切换可能会有延时，播放链接不是立即就可以播放。\n            //真正直播结束的场景，目前不做考虑。\n            setTimeout(function () {\n              dispatch({\n                type: _video.namespace + '/reload'\n              });\n            }, 2000);\n          }\n        }\n      });\n    }\n    //键盘空格键和video聚焦事件\n\n  }, {\n    key: 'onSpaceAndVieoFocusEvent',\n    value: function onSpaceAndVieoFocusEvent() {\n      var _this7 = this;\n\n      if (!this.config.spaceAction) {\n        return false;\n      }\n      var api = this.api;\n      var dispatch = this.dispatch;\n      var keydown = function keydown() {\n        _this7.playerKeydownEvent && _this7.playerKeydownEvent.off();\n        _this7.playerKeydownEvent = api.on(api.ownerDocument, 'keydown', function (e) {\n          if (api.living) {\n            return;\n          }\n          if (e.keyCode === 32) {\n            logger.info('Keydown:', 'space key is pressed');\n            if (api.playing) {\n              dispatch({\n                type: _video.namespace + '/pause'\n              });\n            } else {\n              dispatch({\n                type: _video.namespace + '/play'\n              });\n            }\n          }\n        });\n      };\n      api.on(api.parentNode, 'mouseenter', function (e) {\n        api.trigger('focus', true);\n        if (!api.focus) {\n          logger.info('Video Focus:', 'video is focused');\n        }\n        api.focus = true;\n        keydown();\n      });\n      api.on(api.parentNode, 'mouseleave', function (e) {\n        //为点击播放器，移出去播放器，算失去聚焦。\n        if (!_this7.mousedown) {\n          api.focus = false;\n          api.trigger('focus', false);\n          logger.info('Video Unfocused:', 'video is unfocused');\n          _this7.playerKeydownEvent && _this7.playerKeydownEvent.off();\n        }\n      });\n      api.on(api.parentNode, 'mousedown', function (e) {\n        _this7.mousedown = true;\n        if (!api.focus) {\n          api.trigger('focus', true);\n          logger.info('Video Focus:', 'video is focused');\n        }\n        _this7.documentMousedownEvent && _this7.documentMousedownEvent.off();\n        _this7.documentMousedownEvent = api.on(api.ownerDocument, 'mousedown', function (e) {\n          if (!(0, _contains2.default)(api.parentNode, e.target)) {\n            _this7.mousedown = false;\n            api.trigger('focus', false);\n            logger.info('Video Unfocused:', 'video is unfocused');\n            _this7.documentMousedownEvent.off();\n            _this7.playerKeydownEvent.off();\n          }\n        });\n        keydown();\n      });\n    }\n  }]);\n  return Events;\n}();"]},"metadata":{},"sourceType":"script"}