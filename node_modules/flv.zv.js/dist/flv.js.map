{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/aes-js/index.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/events/events.js","node_modules/process/browser.js","node_modules/webworkify/index.js","src/config.js","src/core/features.js","src/core/media-info.js","src/core/media-segment-info.js","src/core/mse-controller.js","src/core/mse-events.js","src/core/transmuxer.js","src/core/transmuxing-controller.js","src/core/transmuxing-events.js","src/core/transmuxing-worker.js","src/demux/amf-parser.js","src/demux/demux-errors.js","src/demux/exp-golomb.js","src/demux/flv-demuxer.js","src/demux/sps-parser.js","src/flv.js","src/index.js","src/io/fetch-stream-loader.js","src/io/io-controller.js","src/io/loader.js","src/io/param-seek-handler.js","src/io/range-seek-handler.js","src/io/speed-sampler.js","src/io/websocket-loader.js","src/io/xhr-moz-chunked-loader.js","src/io/xhr-msstream-loader.js","src/io/xhr-range-loader.js","src/player/flv-player.js","src/player/native-player.js","src/player/player-errors.js","src/player/player-events.js","src/remux/aac-silent.js","src/remux/mp4-generator.js","src/remux/mp4-remuxer.js","src/utils/browser.js","src/utils/exception.js","src/utils/logger.js","src/utils/logging-control.js","src/utils/polyfill.js","src/utils/utf8-conv.js"],"names":[],"mappingsnypCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"flv.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n(function(root) {\n    \"use strict\";\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define([], function() { return aesjs; });\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport const defaultConfig = {\r\n    enableWorker: false,\r\n    enableStashBuffer: true,\r\n    stashInitialSize: undefined,\r\n\r\n    isLive: false,\r\n\r\n    lazyLoad: true,\r\n    lazyLoadMaxDuration: 3 * 60,\r\n    lazyLoadRecoverDuration: 30,\r\n    deferLoadAfterSourceOpen: true,\r\n\r\n    // autoCleanupSourceBuffer: default as false, leave unspecified\r\n    autoCleanupMaxBackwardDuration: 3 * 60,\r\n    autoCleanupMinBackwardDuration: 2 * 60,\r\n\r\n    statisticsInfoReportInterval: 600,\r\n\r\n    fixAudioTimestampGap: true,\r\n\r\n    accurateSeek: false,\r\n    seekType: 'range',  // [range, param, custom]\r\n    seekParamStart: 'bstart',\r\n    seekParamEnd: 'bend',\r\n    rangeLoadZeroStart: false,\r\n    customSeekHandler: undefined,\r\n    reuseRedirectedURL: false,\r\n    // referrerPolicy: leave as unspecified\r\n\r\n    headers: undefined,\r\n    customLoader: undefined,\r\n\r\n    videoStateMonitorInterval: 1000,\r\n    enableDurationMonitor: false,\r\n    maxDurationGap: 1.5,        // second\r\n    decreaseDurationStep: 0.4,  // second\r\n    enableVideoFrozenMonitor: false,\r\n    frozenTimesThreshold: 5,\r\n\r\n    enableConstVideoViewSize: false,\r\n    constVideoViewWidth: 1920,\r\n    constVideoViewHeight: 1080,\r\n\r\n    latencyDetectInterval: 15000,   // ���룬�೤ʱ��ͳ��һ���ӳ�׷�ϴ���\r\n    latencyDetectThreshold: 3,      // ������ÿ��ͳ��ʱ���������������Ϊ�ӳ�׷��̫Ƶ����\r\n    latencyDetectIncreaseStep: 1,   // �������ӳ�׷��Ƶ���������ϵ�����ֵ���룩\r\n    latencyDetectAdjustStep: 0.1,   // ÿ�η���׷�ϣ����ϵ�����ֵ���룩�����ﵽ������׷�ϵ�����ʱ���µ�����ֵ��\r\n    latencyDetectAdjustFactor: 4,   // �µ��ӳ�׷����ֵ��ʱ��ͳ�����ӡ��� latencyDetectInterval x latencyDetectAdjustFactor\r\n                                    // �����һֱû�з����ӳ�׷�ϣ��Ž����µ���Ŀ����ͨ����������������µ��ٶȡ�\r\n    // ʵ��Ӧ���У�����׷��Ӧ�������ϵ�latencyDetectAdjustStep����ʱ����׷��Ӧ�����̲���һ���ϴ����ֵlatencyDetectIncreaseStep\r\n    // �ϵ��Ժ��µ�����ҪСһ�㣬�𲽽ӽ��ʺ��û���ǰ����������Լ�Դflv���������ֵ��\r\n};\r\n\r\nexport function createDefaultConfig() {\r\n    return Object.assign({}, defaultConfig);\r\n}","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport IOController from '../io/io-controller.js';\r\nimport {createDefaultConfig} from '../config.js';\r\n\r\nclass Features {\r\n\r\n    static supportMSEH264Playback() {\r\n        return window.MediaSource &&\r\n               window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\r\n    }\r\n\r\n    static supportNetworkStreamIO() {\r\n        let ioctl = new IOController({}, createDefaultConfig());\r\n        let loaderType = ioctl.loaderType;\r\n        ioctl.destroy();\r\n        return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\r\n    }\r\n\r\n    static getNetworkLoaderTypeName() {\r\n        let ioctl = new IOController({}, createDefaultConfig());\r\n        let loaderType = ioctl.loaderType;\r\n        ioctl.destroy();\r\n        return loaderType;\r\n    }\r\n\r\n    static supportNativeMediaPlayback(mimeType) {\r\n        if (Features.videoElement == undefined) {\r\n            Features.videoElement = window.document.createElement('video');\r\n        }\r\n        let canPlay = Features.videoElement.canPlayType(mimeType);\r\n        return canPlay === 'probably' || canPlay == 'maybe';\r\n    }\r\n\r\n    static getFeatureList() {\r\n        let features = {\r\n            mseFlvPlayback: false,\r\n            mseLiveFlvPlayback: false,\r\n            networkStreamIO: false,\r\n            networkLoaderName: '',\r\n            nativeMP4H264Playback: false,\r\n            nativeWebmVP8Playback: false,\r\n            nativeWebmVP9Playback: false\r\n        };\r\n\r\n        features.mseFlvPlayback = Features.supportMSEH264Playback();\r\n        features.networkStreamIO = Features.supportNetworkStreamIO();\r\n        features.networkLoaderName = Features.getNetworkLoaderTypeName();\r\n        features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\r\n        features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\r\n        features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\r\n        features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\r\n\r\n        return features;\r\n    }\r\n\r\n}\r\n\r\nexport default Features;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass MediaInfo {\r\n\r\n    constructor() {\r\n        this.mimeType = null;\r\n        this.duration = null;\r\n\r\n        this.hasAudio = null;\r\n        this.hasVideo = null;\r\n        this.audioCodec = null;\r\n        this.videoCodec = null;\r\n        this.audioDataRate = null;\r\n        this.videoDataRate = null;\r\n\r\n        this.audioSampleRate = null;\r\n        this.audioChannelCount = null;\r\n\r\n        this.width = null;\r\n        this.height = null;\r\n        this.fps = null;\r\n        this.profile = null;\r\n        this.level = null;\r\n        this.refFrames = null;\r\n        this.chromaFormat = null;\r\n        this.sarNum = null;\r\n        this.sarDen = null;\r\n\r\n        this.metadata = null;\r\n        this.segments = null;  // MediaInfo[]\r\n        this.segmentCount = null;\r\n        this.hasKeyframesIndex = null;\r\n        this.keyframesIndex = null;\r\n    }\r\n\r\n    isComplete() {\r\n        let audioInfoComplete = (this.hasAudio === false) ||\r\n                                (this.hasAudio === true &&\r\n                                 this.audioCodec != null &&\r\n                                 this.audioSampleRate != null &&\r\n                                 this.audioChannelCount != null);\r\n\r\n        let videoInfoComplete = (this.hasVideo === false) ||\r\n                                (this.hasVideo === true &&\r\n                                 this.videoCodec != null &&\r\n                                 this.width != null &&\r\n                                 this.height != null &&\r\n                                 this.fps != null &&\r\n                                 this.profile != null &&\r\n                                 this.level != null &&\r\n                                 this.refFrames != null &&\r\n                                 this.chromaFormat != null &&\r\n                                 this.sarNum != null &&\r\n                                 this.sarDen != null);\r\n\r\n        // keyframesIndex may not be present\r\n        return this.mimeType != null &&\r\n               this.duration != null &&\r\n               this.metadata != null &&\r\n               this.hasKeyframesIndex != null &&\r\n               audioInfoComplete &&\r\n               videoInfoComplete;\r\n    }\r\n\r\n    isSeekable() {\r\n        return this.hasKeyframesIndex === true;\r\n    }\r\n\r\n    getNearestKeyframe(milliseconds) {\r\n        if (this.keyframesIndex == null) {\r\n            return null;\r\n        }\r\n\r\n        let table = this.keyframesIndex;\r\n        let keyframeIdx = this._search(table.times, milliseconds);\r\n\r\n        return {\r\n            index: keyframeIdx,\r\n            milliseconds: table.times[keyframeIdx],\r\n            fileposition: table.filepositions[keyframeIdx]\r\n        };\r\n    }\r\n\r\n    _search(list, value) {\r\n        let idx = 0;\r\n\r\n        let last = list.length - 1;\r\n        let mid = 0;\r\n        let lbound = 0;\r\n        let ubound = last;\r\n\r\n        if (value < list[0]) {\r\n            idx = 0;\r\n            lbound = ubound + 1;  // skip search\r\n        }\r\n\r\n        while (lbound <= ubound) {\r\n            mid = lbound + Math.floor((ubound - lbound) / 2);\r\n            if (mid === last || (value >= list[mid] && value < list[mid + 1])) {\r\n                idx = mid;\r\n                break;\r\n            } else if (list[mid] < value) {\r\n                lbound = mid + 1;\r\n            } else {\r\n                ubound = mid - 1;\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n}\r\n\r\nexport default MediaInfo;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Represents an media sample (audio / video)\r\nexport class SampleInfo {\r\n\r\n    constructor(dts, pts, duration, originalDts, isSync) {\r\n        this.dts = dts;\r\n        this.pts = pts;\r\n        this.duration = duration;\r\n        this.originalDts = originalDts;\r\n        this.isSyncPoint = isSync;\r\n        this.fileposition = null;\r\n    }\r\n\r\n}\r\n\r\n// Media Segment concept is defined in Media Source Extensions spec.\r\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\r\nexport class MediaSegmentInfo {\r\n\r\n    constructor() {\r\n        this.beginDts = 0;\r\n        this.endDts = 0;\r\n        this.beginPts = 0;\r\n        this.endPts = 0;\r\n        this.originalBeginDts = 0;\r\n        this.originalEndDts = 0;\r\n        this.syncPoints = [];     // SampleInfo[n], for video IDR frames only\r\n        this.firstSample = null;  // SampleInfo\r\n        this.lastSample = null;   // SampleInfo\r\n    }\r\n\r\n    appendSyncPoint(sampleInfo) {  // also called Random Access Point\r\n        sampleInfo.isSyncPoint = true;\r\n        this.syncPoints.push(sampleInfo);\r\n    }\r\n\r\n}\r\n\r\n// Ordered list for recording video IDR frames, sorted by originalDts\r\nexport class IDRSampleList {\r\n\r\n    constructor() {\r\n        this._list = [];\r\n    }\r\n\r\n    clear() {\r\n        this._list = [];\r\n    }\r\n\r\n    appendArray(syncPoints) {\r\n        let list = this._list;\r\n\r\n        if (syncPoints.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\r\n            this.clear();\r\n        }\r\n\r\n        Array.prototype.push.apply(list, syncPoints);\r\n    }\r\n\r\n    getLastSyncPointBeforeDts(dts) {\r\n        if (this._list.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        let list = this._list;\r\n        let idx = 0;\r\n        let last = list.length - 1;\r\n        let mid = 0;\r\n        let lbound = 0;\r\n        let ubound = last;\r\n\r\n        if (dts < list[0].dts) {\r\n            idx = 0;\r\n            lbound = ubound + 1;\r\n        }\r\n\r\n        while (lbound <= ubound) {\r\n            mid = lbound + Math.floor((ubound - lbound) / 2);\r\n            if (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\r\n                idx = mid;\r\n                break;\r\n            } else if (list[mid].dts < dts) {\r\n                lbound = mid + 1;\r\n            } else {\r\n                ubound = mid - 1;\r\n            }\r\n        }\r\n        return this._list[idx];\r\n    }\r\n\r\n}\r\n\r\n// Data structure for recording information of media segments in single track.\r\nexport class MediaSegmentInfoList {\r\n\r\n    constructor(type) {\r\n        this._type = type;\r\n        this._list = [];\r\n        this._lastAppendLocation = -1;  // cached last insert location\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get length() {\r\n        return this._list.length;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this._list.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this._list = [];\r\n        this._lastAppendLocation = -1;\r\n    }\r\n\r\n    _searchNearestSegmentBefore(originalBeginDts) {\r\n        let list = this._list;\r\n        if (list.length === 0) {\r\n            return -2;\r\n        }\r\n        let last = list.length - 1;\r\n        let mid = 0;\r\n        let lbound = 0;\r\n        let ubound = last;\r\n\r\n        let idx = 0;\r\n\r\n        if (originalBeginDts < list[0].originalBeginDts) {\r\n            idx = -1;\r\n            return idx;\r\n        }\r\n\r\n        while (lbound <= ubound) {\r\n            mid = lbound + Math.floor((ubound - lbound) / 2);\r\n            if (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&\r\n                                (originalBeginDts < list[mid + 1].originalBeginDts))) {\r\n                idx = mid;\r\n                break;\r\n            } else if (list[mid].originalBeginDts < originalBeginDts) {\r\n                lbound = mid + 1;\r\n            } else {\r\n                ubound = mid - 1;\r\n            }\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    _searchNearestSegmentAfter(originalBeginDts) {\r\n        return this._searchNearestSegmentBefore(originalBeginDts) + 1;\r\n    }\r\n\r\n    append(mediaSegmentInfo) {\r\n        let list = this._list;\r\n        let msi = mediaSegmentInfo;\r\n        let lastAppendIdx = this._lastAppendLocation;\r\n        let insertIdx = 0;\r\n\r\n        if (lastAppendIdx !== -1 && lastAppendIdx < list.length &&\r\n                                    msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&\r\n                                    ((lastAppendIdx === list.length - 1) ||\r\n                                    (lastAppendIdx < list.length - 1 &&\r\n                                    msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {\r\n            insertIdx = lastAppendIdx + 1;  // use cached location idx\r\n        } else {\r\n            if (list.length > 0) {\r\n                insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\r\n            }\r\n        }\r\n\r\n        this._lastAppendLocation = insertIdx;\r\n        this._list.splice(insertIdx, 0, msi);\r\n    }\r\n\r\n    getLastSegmentBefore(originalBeginDts) {\r\n        let idx = this._searchNearestSegmentBefore(originalBeginDts);\r\n        if (idx >= 0) {\r\n            return this._list[idx];\r\n        } else {  // -1\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLastSampleBefore(originalBeginDts) {\r\n        let segment = this.getLastSegmentBefore(originalBeginDts);\r\n        if (segment != null) {\r\n            return segment.lastSample;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLastSyncPointBefore(originalBeginDts) {\r\n        let segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\r\n        let syncPoints = this._list[segmentIdx].syncPoints;\r\n        while (syncPoints.length === 0 && segmentIdx > 0) {\r\n            segmentIdx--;\r\n            syncPoints = this._list[segmentIdx].syncPoints;\r\n        }\r\n        if (syncPoints.length > 0) {\r\n            return syncPoints[syncPoints.length - 1];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Log from '../utils/logger.js';\r\nimport Browser from '../utils/browser.js';\r\nimport MSEEvents from './mse-events.js';\r\nimport {SampleInfo, IDRSampleList} from './media-segment-info.js';\r\nimport {IllegalStateException} from '../utils/exception.js';\r\n\r\n// Media Source Extensions controller\r\nclass MSEController {\r\n\r\n    constructor(config) {\r\n        this.TAG = 'MSEController';\r\n\r\n        this._config = config;\r\n        this._emitter = new EventEmitter();\r\n\r\n        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {\r\n            // For live stream, do auto cleanup by default\r\n            this._config.autoCleanupSourceBuffer = true;\r\n        }\r\n\r\n        this.e = {\r\n            onSourceOpen: this._onSourceOpen.bind(this),\r\n            onSourceEnded: this._onSourceEnded.bind(this),\r\n            onSourceClose: this._onSourceClose.bind(this),\r\n            onSourceBufferError: this._onSourceBufferError.bind(this),\r\n            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\r\n        };\r\n\r\n        this._mediaSource = null;\r\n        this._mediaSourceObjectURL = null;\r\n        this._mediaElement = null;\r\n\r\n        this._isBufferFull = false;\r\n        this._hasPendingEos = false;\r\n\r\n        this._requireSetMediaDuration = false;\r\n        this._pendingMediaDuration = 0;\r\n\r\n        this._pendingSourceBufferInit = [];\r\n        this._mimeTypes = {\r\n            video: null,\r\n            audio: null\r\n        };\r\n        this._sourceBuffers = {\r\n            video: null,\r\n            audio: null\r\n        };\r\n        this._lastInitSegments = {\r\n            video: null,\r\n            audio: null\r\n        };\r\n        this._pendingSegments = {\r\n            video: [],\r\n            audio: []\r\n        };\r\n        this._pendingRemoveRanges = {\r\n            video: [],\r\n            audio: []\r\n        };\r\n        this._idrList = new IDRSampleList();\r\n    }\r\n\r\n    destroy() {\r\n        if (this._mediaElement || this._mediaSource) {\r\n            this.detachMediaElement();\r\n        }\r\n        this.e = null;\r\n        this._emitter.removeAllListeners();\r\n        this._emitter = null;\r\n    }\r\n\r\n    on(event, listener) {\r\n        this._emitter.addListener(event, listener);\r\n    }\r\n\r\n    off(event, listener) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    attachMediaElement(mediaElement) {\r\n        if (this._mediaSource) {\r\n            throw new IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\r\n        }\r\n        let ms = this._mediaSource = new window.MediaSource();\r\n        ms.addEventListener('sourceopen', this.e.onSourceOpen);\r\n        ms.addEventListener('sourceended', this.e.onSourceEnded);\r\n        ms.addEventListener('sourceclose', this.e.onSourceClose);\r\n\r\n        this._mediaElement = mediaElement;\r\n        this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\r\n        mediaElement.src = this._mediaSourceObjectURL;\r\n    }\r\n\r\n    detachMediaElement() {\r\n        if (this._mediaSource) {\r\n            let ms = this._mediaSource;\r\n            for (let type in this._sourceBuffers) {\r\n                // pending segments should be discard\r\n                let ps = this._pendingSegments[type];\r\n                ps.splice(0, ps.length);\r\n                this._pendingSegments[type] = null;\r\n                this._pendingRemoveRanges[type] = null;\r\n                this._lastInitSegments[type] = null;\r\n\r\n                // remove all sourcebuffers\r\n                let sb = this._sourceBuffers[type];\r\n                if (sb) {\r\n                    if (ms.readyState !== 'closed') {\r\n                        // ms edge can throw an error: Unexpected call to method or property access\r\n                        try {\r\n                            ms.removeSourceBuffer(sb);\r\n                        } catch (error) {\r\n                            Log.e(this.TAG, error.message);\r\n                        }\r\n                        sb.removeEventListener('error', this.e.onSourceBufferError);\r\n                        sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\r\n                    }\r\n                    this._mimeTypes[type] = null;\r\n                    this._sourceBuffers[type] = null;\r\n                }\r\n            }\r\n            if (ms.readyState === 'open') {\r\n                try {\r\n                    ms.endOfStream();\r\n                } catch (error) {\r\n                    Log.e(this.TAG, error.message);\r\n                }\r\n            }\r\n            ms.removeEventListener('sourceopen', this.e.onSourceOpen);\r\n            ms.removeEventListener('sourceended', this.e.onSourceEnded);\r\n            ms.removeEventListener('sourceclose', this.e.onSourceClose);\r\n            this._pendingSourceBufferInit = [];\r\n            this._isBufferFull = false;\r\n            this._idrList.clear();\r\n            this._mediaSource = null;\r\n        }\r\n\r\n        if (this._mediaElement) {\r\n            this._mediaElement.src = '';\r\n            this._mediaElement.removeAttribute('src');\r\n            this._mediaElement = null;\r\n        }\r\n        if (this._mediaSourceObjectURL) {\r\n            window.URL.revokeObjectURL(this._mediaSourceObjectURL);\r\n            this._mediaSourceObjectURL = null;\r\n        }\r\n    }\r\n\r\n    checkMediaSource(action) {\r\n        if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\r\n            // Log.w(this.TAG, 'try to do [' + action + '] but mediaSource is not prepared.');\r\n            // if (this._mediaSource) {\r\n            //     Log.w(this.TAG, 'current mediaSource readyState = ' + this._mediaSource.readyState);\r\n            // }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    appendInitSegment(initSegment, deferred) {\r\n        if (!this.checkMediaSource('appendInitSegment')) {\r\n            // sourcebuffer creation requires mediaSource.readyState === 'open'\r\n            // so we defer the sourcebuffer creation, until sourceopen event triggered\r\n            this._pendingSourceBufferInit.push(initSegment);\r\n            // make sure that this InitSegment is in the front of pending segments queue\r\n            this._pendingSegments[initSegment.type].push(initSegment);\r\n            return;\r\n        }\r\n\r\n        let is = initSegment;\r\n        let mimeType = `${is.container}`;\r\n        if (is.codec && is.codec.length > 0) {\r\n            mimeType += `;codecs=${is.codec}`;\r\n        }\r\n\r\n        let firstInitSegment = false;\r\n\r\n        Log.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);\r\n        this._lastInitSegments[is.type] = is;\r\n\r\n        if (mimeType !== this._mimeTypes[is.type]) {\r\n            if (!this._mimeTypes[is.type]) {  // empty, first chance create sourcebuffer\r\n                firstInitSegment = true;\r\n                try {\r\n                    let sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);\r\n                    sb.addEventListener('error', this.e.onSourceBufferError);\r\n                    sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\r\n                } catch (error) {\r\n                    Log.e(this.TAG, error.message);\r\n                    this._emitter.emit(MSEEvents.ERROR, {code: error.code, msg: error.message});\r\n                    return;\r\n                }\r\n            } else {\r\n                Log.v(this.TAG, `Notice: ${is.type} mimeType changed, origin: ${this._mimeTypes[is.type]}, target: ${mimeType}`);\r\n            }\r\n            this._mimeTypes[is.type] = mimeType;\r\n        }\r\n\r\n        if (!deferred) {\r\n            // deferred means this InitSegment has been pushed to pendingSegments queue\r\n            this._pendingSegments[is.type].push(is);\r\n        }\r\n        if (!firstInitSegment) {  // append immediately only if init segment in subsequence\r\n            if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {\r\n                this._doAppendSegments();\r\n            }\r\n        }\r\n        if (Browser.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\r\n            // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\r\n            // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\r\n            this._requireSetMediaDuration = true;\r\n            this._pendingMediaDuration = is.mediaDuration / 1000;  // in seconds\r\n            this._updateMediaSourceDuration();\r\n        }\r\n    }\r\n\r\n    appendMediaSegment(mediaSegment) {\r\n        if (!this.checkMediaSource('appendMediaSegment')) {\r\n            return;\r\n        }\r\n\r\n        let ms = mediaSegment;\r\n        this._pendingSegments[ms.type].push(ms);\r\n\r\n        if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {\r\n            this._doCleanupSourceBuffer();\r\n        }\r\n\r\n        let sb = this._sourceBuffers[ms.type];\r\n        if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\r\n            this._doAppendSegments();\r\n        }\r\n    }\r\n\r\n    seek(seconds) {\r\n\r\n        if (!this.checkMediaSource('seek')) {\r\n            return;\r\n        }\r\n\r\n        // remove all appended buffers\r\n        for (let type in this._sourceBuffers) {\r\n            if (!this._sourceBuffers[type]) {\r\n                continue;\r\n            }\r\n\r\n            // abort current buffer append algorithm\r\n            let sb = this._sourceBuffers[type];\r\n            if (this._mediaSource.readyState === 'open') {\r\n                try {\r\n                    // If range removal algorithm is running, InvalidStateError will be throwed\r\n                    // Ignore it.\r\n                    sb.abort();\r\n                } catch (error) {\r\n                    Log.e(this.TAG, error.message);\r\n                }\r\n            }\r\n\r\n            // IDRList should be clear\r\n            this._idrList.clear();\r\n\r\n            // pending segments should be discard\r\n            let ps = this._pendingSegments[type];\r\n            ps.splice(0, ps.length);\r\n\r\n            if (this._mediaSource.readyState === 'closed') {\r\n                // Parent MediaSource object has been detached from HTMLMediaElement\r\n                continue;\r\n            }\r\n\r\n            // record ranges to be remove from SourceBuffer\r\n            for (let i = 0; i < sb.buffered.length; i++) {\r\n                let start = sb.buffered.start(i);\r\n                let end = sb.buffered.end(i);\r\n                this._pendingRemoveRanges[type].push({start, end});\r\n            }\r\n\r\n            // if sb is not updating, let's remove ranges now!\r\n            if (!sb.updating) {\r\n                this._doRemoveRanges('seek');\r\n            }\r\n\r\n            // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\r\n            // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\r\n            // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\r\n            if (Browser.safari) {\r\n                let lastInitSegment = this._lastInitSegments[type];\r\n                if (lastInitSegment) {\r\n                    this._pendingSegments[type].push(lastInitSegment);\r\n                    if (!sb.updating) {\r\n                        this._doAppendSegments();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    endOfStream() {\r\n        let ms = this._mediaSource;\r\n        let sb = this._sourceBuffers;\r\n        if (!ms || ms.readyState !== 'open') {\r\n            if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\r\n                // If MediaSource hasn't turned into open state, and there're pending segments\r\n                // Mark pending endOfStream, defer call until all pending segments appended complete\r\n                this._hasPendingEos = true;\r\n            }\r\n            return;\r\n        }\r\n        if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\r\n            // If any sourcebuffer is updating, defer endOfStream operation\r\n            // See _onSourceBufferUpdateEnd()\r\n            this._hasPendingEos = true;\r\n        } else {\r\n            this._hasPendingEos = false;\r\n            // Notify media data loading complete\r\n            // This is helpful for correcting total duration to match last media segment\r\n            // Otherwise MediaElement's ended event may not be triggered\r\n            ms.endOfStream();\r\n        }\r\n    }\r\n\r\n    getNearestKeyframe(dts) {\r\n        return this._idrList.getLastSyncPointBeforeDts(dts);\r\n    }\r\n\r\n    checkSourceBufferNull() {\r\n        let isNull = true;\r\n        for (let type in this._sourceBuffers) {\r\n            if (this._sourceBuffers[type] != null) {\r\n                isNull = false;\r\n                break;\r\n            }\r\n        }\r\n        return isNull;\r\n    }\r\n\r\n    _needCleanupSourceBuffer() {\r\n        if (!this._config.autoCleanupSourceBuffer) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.checkMediaSource('_needCleanupSourceBuffer')) {\r\n            return false;\r\n        }\r\n\r\n        let currentTime = this._mediaElement.currentTime;\r\n\r\n        for (let type in this._sourceBuffers) {\r\n            let sb = this._sourceBuffers[type];\r\n            if (sb) {\r\n                let buffered = sb.buffered;\r\n                if (buffered.length >= 1) {\r\n\r\n                    // Log.d(this.TAG, 'SourceBuffer end-to-start delta: ' + (buffered.end(0) - buffered.start(0)) \r\n                    //     + ', end-to-current delta: ' + (buffered.end(0) - currentTime));\r\n\r\n                    if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _doCleanupSourceBuffer() {\r\n        let currentTime = this._mediaElement.currentTime;\r\n\r\n        if (!this.checkMediaSource('_doCleanupSourceBuffer')) {\r\n            return;\r\n        }\r\n\r\n        for (let type in this._sourceBuffers) {\r\n            let sb = this._sourceBuffers[type];\r\n            if (sb) {\r\n                let buffered = sb.buffered;\r\n                let doRemove = false;\r\n\r\n                for (let i = 0; i < buffered.length; i++) {\r\n                    let start = buffered.start(i);\r\n                    let end = buffered.end(i);\r\n\r\n                    if (start <= currentTime && currentTime < end + 3) {  // padding 3 seconds\r\n                        if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {\r\n                            doRemove = true;\r\n                            let removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;\r\n                            this._pendingRemoveRanges[type].push({start: start, end: removeEnd});\r\n                        }\r\n                    } else if (end < currentTime) {\r\n                        doRemove = true;\r\n                        this._pendingRemoveRanges[type].push({start: start, end: end});\r\n                    }\r\n                }\r\n\r\n                if (doRemove && !sb.updating) {\r\n                    this._doRemoveRanges('_doCleanupSourceBuffer');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _updateMediaSourceDuration() {\r\n\r\n        if (!this.checkMediaSource('_updateMediaSourceDuration')) {\r\n            return;\r\n        }\r\n\r\n        let sb = this._sourceBuffers;\r\n        if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {\r\n            return;\r\n        }\r\n        if ((sb.video && sb.video.updating) || (sb.audio && sb.audio.updating)) {\r\n            return;\r\n        }\r\n\r\n        let current = this._mediaSource.duration;\r\n        let target = this._pendingMediaDuration;\r\n\r\n        if (target > 0 && (isNaN(current) || target > current)) {\r\n            Log.v(this.TAG, `Update MediaSource duration from ${current} to ${target}`);\r\n            this._mediaSource.duration = target;\r\n        }\r\n\r\n        this._requireSetMediaDuration = false;\r\n        this._pendingMediaDuration = 0;\r\n    }\r\n\r\n    _doRemoveRanges(caller) {\r\n\r\n        if (!this.checkMediaSource('_doRemoveRanges')) {\r\n            return;\r\n        }\r\n\r\n        // Log.d(this.TAG, 'remove ranges from ' + caller);\r\n        for (let type in this._pendingRemoveRanges) {\r\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\r\n                continue;\r\n            }\r\n            let sb = this._sourceBuffers[type];\r\n            let ranges = this._pendingRemoveRanges[type];\r\n            while (ranges.length && !sb.updating) {\r\n                let range = ranges.shift();\r\n                sb.remove(range.start, range.end);\r\n            }\r\n        }\r\n    }\r\n\r\n    _doAppendSegments() {\r\n\r\n        if (!this.checkMediaSource('_doAppendSegments')) {\r\n            return;\r\n        }\r\n\r\n        let pendingSegments = this._pendingSegments;\r\n\r\n        for (let type in pendingSegments) {\r\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\r\n                continue;\r\n            }\r\n\r\n            if (pendingSegments[type].length > 0) {\r\n                let segment = pendingSegments[type].shift();\r\n\r\n                if (segment.timestampOffset) {\r\n                    // For MPEG audio stream in MSE, if unbuffered-seeking occurred\r\n                    // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\r\n                    let currentOffset = this._sourceBuffers[type].timestampOffset;\r\n                    let targetOffset = segment.timestampOffset / 1000;  // in seconds\r\n\r\n                    let delta = Math.abs(currentOffset - targetOffset);\r\n                    if (delta > 0.1) {  // If time delta > 100ms\r\n                        Log.v(this.TAG, `Update MPEG audio timestampOffset from ${currentOffset} to ${targetOffset}`);\r\n                        this._sourceBuffers[type].timestampOffset = targetOffset;\r\n                    }\r\n                    delete segment.timestampOffset;\r\n                }\r\n\r\n                if (!segment.data || segment.data.byteLength === 0) {\r\n                    // Ignore empty buffer\r\n                    continue;\r\n                }\r\n\r\n                try {\r\n                    this._sourceBuffers[type].appendBuffer(segment.data);\r\n                    this._isBufferFull = false;\r\n                    if (type === 'video' && segment.hasOwnProperty('info')) {\r\n                        this._idrList.appendArray(segment.info.syncPoints);\r\n                    }\r\n                } catch (error) {\r\n                    this._pendingSegments[type].unshift(segment);\r\n                    if (error.code === 22) {  // QuotaExceededError\r\n                        /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\r\n                         * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\r\n                         * SourceBuffer eviction policy may be changed in future version of FireFox.\r\n                         *\r\n                         * Related issues:\r\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\r\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\r\n                         */\r\n\r\n                        // report buffer full, abort network IO\r\n                        if (!this._isBufferFull) {\r\n                            this._emitter.emit(MSEEvents.BUFFER_FULL);\r\n                        }\r\n                        this._isBufferFull = true;\r\n                    } else {\r\n                        Log.e(this.TAG, error.message);\r\n                        this._emitter.emit(MSEEvents.ERROR, {code: error.code, msg: error.message});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _onSourceOpen() {\r\n        Log.v(this.TAG, 'MediaSource onSourceOpen');\r\n        this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\r\n        // deferred sourcebuffer creation / initialization\r\n        if (this._pendingSourceBufferInit.length > 0) {\r\n            let pendings = this._pendingSourceBufferInit;\r\n            while (pendings.length) {\r\n                let segment = pendings.shift();\r\n                this.appendInitSegment(segment, true);\r\n            }\r\n        }\r\n        // there may be some pending media segments, append them\r\n        if (this._hasPendingSegments()) {\r\n            this._doAppendSegments();\r\n        }\r\n        this._emitter.emit(MSEEvents.SOURCE_OPEN);\r\n    }\r\n\r\n    _onSourceEnded() {\r\n        // fired on endOfStream\r\n        Log.v(this.TAG, 'MediaSource onSourceEnded');\r\n        this._emitter.emit(MSEEvents.SOURCE_END);\r\n    }\r\n\r\n    _onSourceClose() {\r\n        // fired on detaching from media element\r\n        Log.v(this.TAG, 'MediaSource onSourceClose');\r\n        if (this._mediaSource && this.e != null) {\r\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\r\n            this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\r\n            this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\r\n        }\r\n        this._emitter.emit(MSEEvents.SOURCE_CLOSE);\r\n    }\r\n\r\n    _hasPendingSegments() {\r\n        let ps = this._pendingSegments;\r\n        return ps.video.length > 0 || ps.audio.length > 0;\r\n    }\r\n\r\n    _hasPendingRemoveRanges() {\r\n        let prr = this._pendingRemoveRanges;\r\n        return prr.video.length > 0 || prr.audio.length > 0;\r\n    }\r\n\r\n    _onSourceBufferUpdateEnd() {\r\n        if (this._requireSetMediaDuration) {\r\n            this._updateMediaSourceDuration();\r\n        } else if (this._hasPendingRemoveRanges()) {\r\n            this._doRemoveRanges('_onSourceBufferUpdateEnd');\r\n        } else if (this._hasPendingSegments()) {\r\n            this._doAppendSegments();\r\n        } else if (this._hasPendingEos) {\r\n            this.endOfStream();\r\n        }\r\n        this._emitter.emit(MSEEvents.UPDATE_END);\r\n    }\r\n\r\n    _onSourceBufferError(e) {\r\n        Log.e(this.TAG, `SourceBuffer Error: ${e}`);\r\n        // this error might not always be fatal, just ignore it\r\n    }\r\n\r\n}\r\n\r\nexport default MSEController;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst MSEEvents = {\r\n    ERROR: 'error',\r\n    SOURCE_OPEN: 'source_open',\r\n    UPDATE_END: 'update_end',\r\n    BUFFER_FULL: 'buffer_full',\r\n    SOURCE_END: 'source_end',\r\n    SOURCE_CLOSE: 'source_close',\r\n};\r\n\r\nexport default MSEEvents;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Log from '../utils/logger.js';\r\nimport LoggingControl from '../utils/logging-control.js';\r\nimport TransmuxingController from './transmuxing-controller.js';\r\nimport TransmuxingEvents from './transmuxing-events.js';\r\nimport TransmuxingWorker from './transmuxing-worker.js';\r\nimport MediaInfo from './media-info.js';\r\n\r\nclass Transmuxer {\r\n\r\n    constructor(mediaDataSource, config) {\r\n        this.TAG = 'Transmuxer';\r\n        this._emitter = new EventEmitter();\r\n\r\n        if (config.enableWorker && typeof (Worker) !== 'undefined') {\r\n            try {\r\n                let work = require('webworkify');\r\n                this._worker = work(TransmuxingWorker);\r\n                this._workerDestroying = false;\r\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\r\n                this._worker.postMessage({cmd: 'init', param: [mediaDataSource, config]});\r\n                this.e = {\r\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\r\n                };\r\n                LoggingControl.registerListener(this.e.onLoggingConfigChanged);\r\n                this._worker.postMessage({cmd: 'logging_config', param: LoggingControl.getConfig()});\r\n            } catch (error) {\r\n                Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\r\n                this._worker = null;\r\n                this._controller = new TransmuxingController(mediaDataSource, config);\r\n            }\r\n        } else {\r\n            this._controller = new TransmuxingController(mediaDataSource, config);\r\n        }\r\n\r\n        if (this._controller) {\r\n            let ctl = this._controller;\r\n            ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\r\n            ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\r\n            ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\r\n            ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\r\n            ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\r\n            ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\r\n            ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\r\n            ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\r\n            ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\r\n            ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\r\n            ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\r\n            ctl.on(TransmuxingEvents.VIDEO_RESOLUTION_CHANGED, this._onVideoResolutionChanged.bind(this));\r\n            ctl.on(TransmuxingEvents.DEMUX_MSG, this._onDemuxState.bind(this));\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this._worker) {\r\n            if (!this._workerDestroying) {\r\n                this._workerDestroying = true;\r\n                this._worker.postMessage({cmd: 'destroy'});\r\n                LoggingControl.removeListener(this.e.onLoggingConfigChanged);\r\n                this.e = null;\r\n            }\r\n        } else {\r\n            this._controller.destroy();\r\n            this._controller = null;\r\n        }\r\n        this._emitter.removeAllListeners();\r\n        this._emitter = null;\r\n    }\r\n\r\n    on(event, listener) {\r\n        this._emitter.addListener(event, listener);\r\n    }\r\n\r\n    off(event, listener) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    hasWorker() {\r\n        return this._worker != null;\r\n    }\r\n\r\n    open() {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'start'});\r\n        } else {\r\n            this._controller.start();\r\n        }\r\n    }\r\n\r\n    close() {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'stop'});\r\n        } else {\r\n            this._controller.stop();\r\n        }\r\n    }\r\n\r\n    seek(milliseconds) {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'seek', param: milliseconds});\r\n        } else {\r\n            this._controller.seek(milliseconds);\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'pause'});\r\n        } else {\r\n            this._controller.pause();\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'resume'});\r\n        } else {\r\n            this._controller.resume();\r\n        }\r\n    }\r\n\r\n    _onInitSegment(type, initSegment) {\r\n        // do async invoke\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaSegment(type, mediaSegment) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onLoadingComplete() {\r\n        Promise.resolve().then(() => {\r\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\r\n        });\r\n    }\r\n\r\n    _onRecoveredEarlyEof() {\r\n        Promise.resolve().then(() => {\r\n            this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\r\n        });\r\n    }\r\n\r\n    _onMediaInfo(mediaInfo) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMetaDataArrived(metadata) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onScriptDataArrived(data) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onStatisticsInfo(statisticsInfo) {\r\n        Promise.resolve().then(() => {\r\n            this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\r\n        });\r\n    }\r\n\r\n    _onIOError(type, info) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onDemuxError(type, info) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onRecommendSeekpoint(milliseconds) {\r\n        Promise.resolve().then(() => {\r\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\r\n        });\r\n    }\r\n\r\n    _onDemuxState(metadata) {\r\n        Promise.resolve().then(() => {\r\n            this._emitter.emit(TransmuxingEvents.DEMUX_MSG, metadata);\r\n        });\r\n    }\r\n\r\n    _onLoggingConfigChanged(config) {\r\n        if (this._worker) {\r\n            this._worker.postMessage({cmd: 'logging_config', param: config});\r\n        }\r\n    }\r\n\r\n    _onVideoResolutionChanged(video_info) {\r\n        Promise.resolve().then(() => {\r\n            if (this._emitter != null) {\r\n                this._emitter.emit(TransmuxingEvents.VIDEO_RESOLUTION_CHANGED, video_info);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onWorkerMessage(e) {\r\n        let message = e.data;\r\n        let data = message.data;\r\n\r\n        if (message.msg === 'destroyed' || this._workerDestroying) {\r\n            this._workerDestroying = false;\r\n            this._worker.terminate();\r\n            this._worker = null;\r\n            return;\r\n        }\r\n\r\n        switch (message.msg) {\r\n            case TransmuxingEvents.INIT_SEGMENT:\r\n            case TransmuxingEvents.MEDIA_SEGMENT:\r\n                this._emitter.emit(message.msg, data.type, data.data);\r\n                break;\r\n            case TransmuxingEvents.LOADING_COMPLETE:\r\n            case TransmuxingEvents.RECOVERED_EARLY_EOF:\r\n                this._emitter.emit(message.msg);\r\n                break;\r\n            case TransmuxingEvents.MEDIA_INFO:\r\n                Object.setPrototypeOf(data, MediaInfo.prototype);\r\n                this._emitter.emit(message.msg, data);\r\n                break;\r\n            case TransmuxingEvents.METADATA_ARRIVED:\r\n            case TransmuxingEvents.SCRIPTDATA_ARRIVED:\r\n            case TransmuxingEvents.STATISTICS_INFO:\r\n                this._emitter.emit(message.msg, data);\r\n                break;\r\n            case TransmuxingEvents.IO_ERROR:\r\n            case TransmuxingEvents.DEMUX_ERROR:\r\n                this._emitter.emit(message.msg, data.type, data.info);\r\n                break;\r\n            case TransmuxingEvents.RECOMMEND_SEEKPOINT:\r\n                this._emitter.emit(message.msg, data);\r\n                break;\r\n            case TransmuxingEvents.DEMUX_MSG:\r\n                this._emitter.emit(message.msg, data);\r\n                break;\r\n            case 'logcat_callback':\r\n                Log.emitter.emit('log', data.type, data.logcat);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Transmuxer;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Log from '../utils/logger.js';\r\nimport Browser from '../utils/browser.js';\r\nimport MediaInfo from './media-info.js';\r\nimport FLVDemuxer from '../demux/flv-demuxer.js';\r\nimport MP4Remuxer from '../remux/mp4-remuxer.js';\r\nimport DemuxErrors from '../demux/demux-errors.js';\r\nimport IOController from '../io/io-controller.js';\r\nimport TransmuxingEvents from './transmuxing-events.js';\r\nimport {LoaderStatus, LoaderErrors} from '../io/loader.js';\r\n\r\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\r\nclass TransmuxingController {\r\n\r\n    constructor(mediaDataSource, config) {\r\n        this.TAG = 'TransmuxingController';\r\n        this._emitter = new EventEmitter();\r\n\r\n        this._config = config;\r\n\r\n        // treat single part media as multipart media, which has only one segment\r\n        if (!mediaDataSource.segments) {\r\n            mediaDataSource.segments = [{\r\n                duration: mediaDataSource.duration,\r\n                filesize: mediaDataSource.filesize,\r\n                url: mediaDataSource.url\r\n            }];\r\n        }\r\n\r\n        // fill in default IO params if not exists\r\n        if (typeof mediaDataSource.cors !== 'boolean') {\r\n            mediaDataSource.cors = true;\r\n        }\r\n        if (typeof mediaDataSource.withCredentials !== 'boolean') {\r\n            mediaDataSource.withCredentials = false;\r\n        }\r\n\r\n        this._mediaDataSource = mediaDataSource;\r\n        this._currentSegmentIndex = 0;\r\n        let totalDuration = 0;\r\n\r\n        this._mediaDataSource.segments.forEach((segment) => {\r\n            // timestampBase for each segment, and calculate total duration\r\n            segment.timestampBase = totalDuration;\r\n            totalDuration += segment.duration;\r\n            // params needed by IOController\r\n            segment.cors = mediaDataSource.cors;\r\n            segment.withCredentials = mediaDataSource.withCredentials;\r\n            // referrer policy control, if exist\r\n            if (config.referrerPolicy) {\r\n                segment.referrerPolicy = config.referrerPolicy;\r\n            }\r\n        });\r\n\r\n        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\r\n            this._mediaDataSource.duration = totalDuration;\r\n        }\r\n\r\n        this._mediaInfo = null;\r\n        this._demuxer = null;\r\n        this._remuxer = null;\r\n        this._ioctl = null;\r\n\r\n        this._pendingSeekTime = null;\r\n        this._pendingResolveSeekPoint = null;\r\n\r\n        this._statisticsReporter = null;\r\n    }\r\n\r\n    destroy() {\r\n        this._mediaInfo = null;\r\n        this._mediaDataSource = null;\r\n\r\n        if (this._statisticsReporter) {\r\n            this._disableStatisticsReporter();\r\n        }\r\n        if (this._ioctl) {\r\n            this._ioctl.destroy();\r\n            this._ioctl = null;\r\n        }\r\n        if (this._demuxer) {\r\n            this._demuxer.destroy();\r\n            this._demuxer = null;\r\n        }\r\n        if (this._remuxer) {\r\n            this._remuxer.destroy();\r\n            this._remuxer = null;\r\n        }\r\n\r\n        this._emitter.removeAllListeners();\r\n        this._emitter = null;\r\n    }\r\n\r\n    on(event, listener) {\r\n        this._emitter.addListener(event, listener);\r\n    }\r\n\r\n    off(event, listener) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    start() {\r\n        this._loadSegment(0);\r\n        this._enableStatisticsReporter();\r\n    }\r\n\r\n    _loadSegment(segmentIndex, optionalFrom) {\r\n        this._currentSegmentIndex = segmentIndex;\r\n        let dataSource = this._mediaDataSource.segments[segmentIndex];\r\n\r\n        let ioctl = this._ioctl = new IOController(dataSource, this._config, segmentIndex);\r\n        ioctl.onError = this._onIOException.bind(this);\r\n        ioctl.onSeeked = this._onIOSeeked.bind(this);\r\n        ioctl.onComplete = this._onIOComplete.bind(this);\r\n        ioctl.onRedirect = this._onIORedirect.bind(this);\r\n        ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\r\n\r\n        if (optionalFrom) {\r\n            this._demuxer.bindDataSource(this._ioctl);\r\n        } else {\r\n            ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\r\n        }\r\n\r\n        ioctl.open(optionalFrom);\r\n    }\r\n\r\n    stop() {\r\n        this._internalAbort();\r\n        this._disableStatisticsReporter();\r\n    }\r\n\r\n    _internalAbort() {\r\n        if (this._ioctl) {\r\n            this._ioctl.destroy();\r\n            this._ioctl = null;\r\n        }\r\n    }\r\n\r\n    pause() {  // take a rest\r\n        if (this._ioctl && this._ioctl.isWorking()) {\r\n            this._ioctl.pause();\r\n            this._disableStatisticsReporter();\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if (this._ioctl && this._ioctl.isPaused()) {\r\n            this._ioctl.resume();\r\n            this._enableStatisticsReporter();\r\n        }\r\n    }\r\n\r\n    seek(milliseconds) {\r\n        if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\r\n            return;\r\n        }\r\n\r\n        let targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\r\n\r\n        if (targetSegmentIndex === this._currentSegmentIndex) {\r\n            // intra-segment seeking\r\n            let segmentInfo = this._mediaInfo.segments[targetSegmentIndex];\r\n\r\n            if (segmentInfo == undefined) {\r\n                // current segment loading started, but mediainfo hasn't received yet\r\n                // wait for the metadata loaded, then seek to expected position\r\n                this._pendingSeekTime = milliseconds;\r\n            } else {\r\n                let keyframe = segmentInfo.getNearestKeyframe(milliseconds);\r\n                this._remuxer.seek(keyframe.milliseconds);\r\n                this._ioctl.seek(keyframe.fileposition);\r\n                // Will be resolved in _onRemuxerMediaSegmentArrival()\r\n                this._pendingResolveSeekPoint = keyframe.milliseconds;\r\n            }\r\n        } else {\r\n            // cross-segment seeking\r\n            let targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];\r\n\r\n            if (targetSegmentInfo == undefined) {\r\n                // target segment hasn't been loaded. We need metadata then seek to expected time\r\n                this._pendingSeekTime = milliseconds;\r\n                this._internalAbort();\r\n                this._remuxer.seek();\r\n                this._remuxer.insertDiscontinuity();\r\n                this._loadSegment(targetSegmentIndex);\r\n                // Here we wait for the metadata loaded, then seek to expected position\r\n            } else {\r\n                // We have target segment's metadata, direct seek to target position\r\n                let keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\r\n                this._internalAbort();\r\n                this._remuxer.seek(milliseconds);\r\n                this._remuxer.insertDiscontinuity();\r\n                this._demuxer.resetMediaInfo();\r\n                this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;\r\n                this._loadSegment(targetSegmentIndex, keyframe.fileposition);\r\n                this._pendingResolveSeekPoint = keyframe.milliseconds;\r\n                this._reportSegmentMediaInfo(targetSegmentIndex);\r\n            }\r\n        }\r\n\r\n        this._enableStatisticsReporter();\r\n    }\r\n\r\n    _searchSegmentIndexContains(milliseconds) {\r\n        let segments = this._mediaDataSource.segments;\r\n        let idx = segments.length - 1;\r\n\r\n        for (let i = 0; i < segments.length; i++) {\r\n            if (milliseconds < segments[i].timestampBase) {\r\n                idx = i - 1;\r\n                break;\r\n            }\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    _onInitChunkArrival(data, byteStart) {\r\n        let probeData = null;\r\n        let consumed = 0;\r\n\r\n        if (byteStart > 0) {\r\n            // IOController seeked immediately after opened, byteStart > 0 callback may received\r\n            this._demuxer.bindDataSource(this._ioctl);\r\n            this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;\r\n\r\n            consumed = this._demuxer.parseChunks(data, byteStart);\r\n        } else if ((probeData = FLVDemuxer.probe(data)).match) {\r\n            // Always create new FLVDemuxer\r\n            this._demuxer = new FLVDemuxer(probeData, this._config);\r\n\r\n            if (!this._remuxer) {\r\n                this._remuxer = new MP4Remuxer(this._config);\r\n            }\r\n\r\n            let mds = this._mediaDataSource;\r\n            if (mds.duration != undefined && !isNaN(mds.duration)) {\r\n                this._demuxer.overridedDuration = mds.duration;\r\n            }\r\n            if (typeof mds.hasAudio === 'boolean') {\r\n                this._demuxer.overridedHasAudio = mds.hasAudio;\r\n            }\r\n            if (typeof mds.hasVideo === 'boolean') {\r\n                this._demuxer.overridedHasVideo = mds.hasVideo;\r\n            }\r\n\r\n            this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;\r\n\r\n            this._demuxer.onError = this._onDemuxException.bind(this);\r\n            this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);\r\n            this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this);\r\n            this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this);\r\n            this._demuxer.onVideoResolutionChanged = this._onVideoResolutionChanged.bind(this);\r\n\r\n            // TO zhengfeifei\r\n            this._demuxer._onMessageDx = this._onMessageDx.bind(this);\r\n\r\n            this._remuxer.bindDataSource(this._demuxer\r\n                         .bindDataSource(this._ioctl\r\n            ));\r\n\r\n            this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\r\n            this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\r\n\r\n            consumed = this._demuxer.parseChunks(data, byteStart);\r\n        } else {\r\n            probeData = null;\r\n            Log.e(this.TAG, 'Non-FLV, Unsupported media type!');\r\n            Promise.resolve().then(() => {\r\n                this._internalAbort();\r\n            });\r\n            this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, DemuxErrors.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');\r\n\r\n            consumed = 0;\r\n        }\r\n\r\n        return consumed;\r\n    }\r\n\r\n    _onMessageDx(codecId) {\r\n        this._emitter.emit(TransmuxingEvents.DEMUX_MSG, codecId);\r\n    }\r\n\r\n    _onMediaInfo(mediaInfo) {\r\n        if (this._mediaInfo == null) {\r\n            // Store first segment's mediainfo as global mediaInfo\r\n            this._mediaInfo = Object.assign({}, mediaInfo);\r\n            this._mediaInfo.keyframesIndex = null;\r\n            this._mediaInfo.segments = [];\r\n            this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\r\n            Object.setPrototypeOf(this._mediaInfo, MediaInfo.prototype);\r\n        }\r\n\r\n        let segmentInfo = Object.assign({}, mediaInfo);\r\n        Object.setPrototypeOf(segmentInfo, MediaInfo.prototype);\r\n        this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\r\n\r\n        // notify mediaInfo update\r\n        this._reportSegmentMediaInfo(this._currentSegmentIndex);\r\n\r\n        if (this._pendingSeekTime != null) {\r\n            Promise.resolve().then(() => {\r\n                let target = this._pendingSeekTime;\r\n                this._pendingSeekTime = null;\r\n                this.seek(target);\r\n            });\r\n        }\r\n    }\r\n\r\n    _onMetaDataArrived(metadata) {\r\n        this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\r\n    }\r\n\r\n    _onScriptDataArrived(data) {\r\n        this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\r\n    }\r\n\r\n    _onIOSeeked() {\r\n        this._remuxer.insertDiscontinuity();\r\n    }\r\n\r\n    _onIOComplete(extraData) {\r\n        let segmentIndex = extraData;\r\n        let nextSegmentIndex = segmentIndex + 1;\r\n\r\n        if (nextSegmentIndex < this._mediaDataSource.segments.length) {\r\n            this._internalAbort();\r\n            this._remuxer.flushStashedSamples();\r\n            this._loadSegment(nextSegmentIndex);\r\n        } else {\r\n            this._remuxer.flushStashedSamples();\r\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\r\n            this._disableStatisticsReporter();\r\n        }\r\n    }\r\n\r\n    _onIORedirect(redirectedURL) {\r\n        let segmentIndex = this._ioctl.extraData;\r\n        this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;\r\n    }\r\n\r\n    _onIORecoveredEarlyEof() {\r\n        this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\r\n    }\r\n\r\n    _onIOException(type, info) {\r\n        Log.e(this.TAG, `IOException: type = ${type}, code = ${info.code}, msg = ${info.msg}`);\r\n        this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\r\n        this._disableStatisticsReporter();\r\n    }\r\n\r\n    _onDemuxException(type, info) {\r\n        Log.e(this.TAG, `DemuxException: type = ${type}, info = ${info}`);\r\n        this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\r\n    }\r\n\r\n    _onRemuxerInitSegmentArrival(type, initSegment) {\r\n        this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\r\n    }\r\n\r\n    _onRemuxerMediaSegmentArrival(type, mediaSegment) {\r\n        if (this._pendingSeekTime != null) {\r\n            // Media segments after new-segment cross-seeking should be dropped.\r\n            return;\r\n        }\r\n        this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\r\n\r\n        // Resolve pending seekPoint\r\n        if (this._pendingResolveSeekPoint != null && type === 'video') {\r\n            let syncPoints = mediaSegment.info.syncPoints;\r\n            let seekpoint = this._pendingResolveSeekPoint;\r\n            this._pendingResolveSeekPoint = null;\r\n\r\n            // Safari: Pass PTS for recommend_seekpoint\r\n            if (Browser.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\r\n                seekpoint = syncPoints[0].pts;\r\n            }\r\n            // else: use original DTS (keyframe.milliseconds)\r\n\r\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, seekpoint);\r\n        }\r\n    }\r\n\r\n    _enableStatisticsReporter() {\r\n        if (this._statisticsReporter == null) {\r\n            this._statisticsReporter = self.setInterval(\r\n                this._reportStatisticsInfo.bind(this),\r\n            this._config.statisticsInfoReportInterval);\r\n        }\r\n    }\r\n\r\n    _disableStatisticsReporter() {\r\n        if (this._statisticsReporter) {\r\n            self.clearInterval(this._statisticsReporter);\r\n            this._statisticsReporter = null;\r\n        }\r\n    }\r\n\r\n    _reportSegmentMediaInfo(segmentIndex) {\r\n        let segmentInfo = this._mediaInfo.segments[segmentIndex];\r\n        let exportInfo = Object.assign({}, segmentInfo);\r\n\r\n        exportInfo.duration = this._mediaInfo.duration;\r\n        exportInfo.segmentCount = this._mediaInfo.segmentCount;\r\n        delete exportInfo.segments;\r\n        delete exportInfo.keyframesIndex;\r\n\r\n        this._emitter.emit(TransmuxingEvents.MEDIA_INFO, exportInfo);\r\n    }\r\n\r\n    _reportStatisticsInfo() {\r\n        let info = {};\r\n\r\n        info.url = this._ioctl.currentURL;\r\n        info.hasRedirect = this._ioctl.hasRedirect;\r\n        if (info.hasRedirect) {\r\n            info.redirectedURL = this._ioctl.currentRedirectedURL;\r\n        }\r\n\r\n        info.speed = this._ioctl.currentSpeed;\r\n        info.loaderType = this._ioctl.loaderType;\r\n        info.currentSegmentIndex = this._currentSegmentIndex;\r\n        info.totalSegmentCount = this._mediaDataSource.segments.length;\r\n        info.bps_audio = info.bps_video = 0;\r\n\r\n        if (this._demuxer && this._demuxer._bpsInfo) {\r\n            info.bps_video = this._demuxer._bpsInfo.bps_video;\r\n            info.bps_audio = this._demuxer._bpsInfo.bps_audio;\r\n        }\r\n        \r\n        this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, info);\r\n    }\r\n\r\n    _onVideoResolutionChanged(video_info) {\r\n        this._emitter.emit(TransmuxingEvents.VIDEO_RESOLUTION_CHANGED, video_info);\r\n    }\r\n\r\n}\r\n\r\nexport default TransmuxingController;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst TransmuxingEvents = {\r\n    IO_ERROR: 'io_error',\r\n    DEMUX_ERROR: 'demux_error',\r\n    INIT_SEGMENT: 'init_segment',\r\n    MEDIA_SEGMENT: 'media_segment',\r\n    LOADING_COMPLETE: 'loading_complete',\r\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\r\n    MEDIA_INFO: 'media_info',\r\n    METADATA_ARRIVED: 'metadata_arrived',\r\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\r\n    STATISTICS_INFO: 'statistics_info',\r\n    RECOMMEND_SEEKPOINT: 'recommend_seekpoint',\r\n    VIDEO_RESOLUTION_CHANGED: 'video_resolution_changed',\r\n    DEMUX_MSG: 'demux_msg'\r\n};\r\n\r\nexport default TransmuxingEvents;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport LoggingControl from '../utils/logging-control.js';\r\nimport Polyfill from '../utils/polyfill.js';\r\nimport TransmuxingController from './transmuxing-controller.js';\r\nimport TransmuxingEvents from './transmuxing-events.js';\r\n\r\n/* post message to worker:\r\n   data: {\r\n       cmd: string\r\n       param: any\r\n   }\r\n\r\n   receive message from worker:\r\n   data: {\r\n       msg: string,\r\n       data: any\r\n   }\r\n */\r\n\r\nlet TransmuxingWorker = function (self) {\r\n\r\n    let TAG = 'TransmuxingWorker';\r\n    let controller = null;\r\n    let logcatListener = onLogcatCallback.bind(this);\r\n\r\n    Polyfill.install();\r\n\r\n    self.addEventListener('message', function (e) {\r\n        switch (e.data.cmd) {\r\n            case 'init':\r\n                controller = new TransmuxingController(e.data.param[0], e.data.param[1]);\r\n                controller.on(TransmuxingEvents.IO_ERROR, onIOError.bind(this));\r\n                controller.on(TransmuxingEvents.DEMUX_ERROR, onDemuxError.bind(this));\r\n                controller.on(TransmuxingEvents.INIT_SEGMENT, onInitSegment.bind(this));\r\n                controller.on(TransmuxingEvents.MEDIA_SEGMENT, onMediaSegment.bind(this));\r\n                controller.on(TransmuxingEvents.LOADING_COMPLETE, onLoadingComplete.bind(this));\r\n                controller.on(TransmuxingEvents.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\r\n                controller.on(TransmuxingEvents.MEDIA_INFO, onMediaInfo.bind(this));\r\n                controller.on(TransmuxingEvents.METADATA_ARRIVED, onMetaDataArrived.bind(this));\r\n                controller.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\r\n                controller.on(TransmuxingEvents.STATISTICS_INFO, onStatisticsInfo.bind(this));\r\n                controller.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\r\n                controller.on(TransmuxingEvents.VIDEO_RESOLUTION_CHANGED, onVideoResolutionChanged.bind(this));\r\n                // plus\r\n                controller.on(TransmuxingEvents.DEMUX_MSG, onDemuxMsg.bind(this));\r\n                \r\n                break;\r\n            case 'destroy':\r\n                if (controller) {\r\n                    controller.destroy();\r\n                    controller = null;\r\n                }\r\n                self.postMessage({msg: 'destroyed'});\r\n                break;\r\n            case 'start':\r\n                controller.start();\r\n                break;\r\n            case 'stop':\r\n                controller.stop();\r\n                break;\r\n            case 'seek':\r\n                controller.seek(e.data.param);\r\n                break;\r\n            case 'pause':\r\n                controller.pause();\r\n                break;\r\n            case 'resume':\r\n                controller.resume();\r\n                break;\r\n            case 'logging_config': {\r\n                let config = e.data.param;\r\n                LoggingControl.applyConfig(config);\r\n\r\n                if (config.enableCallback === true) {\r\n                    LoggingControl.addLogListener(logcatListener);\r\n                } else {\r\n                    LoggingControl.removeLogListener(logcatListener);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    function onDemuxMsg(metadata) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.DEMUX_MSG,\r\n            data: metadata\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onInitSegment(type, initSegment) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.INIT_SEGMENT,\r\n            data: {\r\n                type: type,\r\n                data: initSegment\r\n            }\r\n        };\r\n        self.postMessage(obj, [initSegment.data]);  // data: ArrayBuffer\r\n    }\r\n\r\n    function onMediaSegment(type, mediaSegment) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.MEDIA_SEGMENT,\r\n            data: {\r\n                type: type,\r\n                data: mediaSegment\r\n            }\r\n        };\r\n        self.postMessage(obj, [mediaSegment.data]);  // data: ArrayBuffer\r\n    }\r\n\r\n    function onLoadingComplete() {\r\n        let obj = {\r\n            msg: TransmuxingEvents.LOADING_COMPLETE\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onRecoveredEarlyEof() {\r\n        let obj = {\r\n            msg: TransmuxingEvents.RECOVERED_EARLY_EOF\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onMediaInfo(mediaInfo) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.MEDIA_INFO,\r\n            data: mediaInfo\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onMetaDataArrived(metadata) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.METADATA_ARRIVED,\r\n            data: metadata\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onScriptDataArrived(data) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.SCRIPTDATA_ARRIVED,\r\n            data: data\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onStatisticsInfo(statInfo) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.STATISTICS_INFO,\r\n            data: statInfo\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n    function onIOError(type, info) {\r\n        self.postMessage({\r\n            msg: TransmuxingEvents.IO_ERROR,\r\n            data: {\r\n                type: type,\r\n                info: info\r\n            }\r\n        });\r\n    }\r\n\r\n    function onDemuxError(type, info) {\r\n        self.postMessage({\r\n            msg: TransmuxingEvents.DEMUX_ERROR,\r\n            data: {\r\n                type: type,\r\n                info: info\r\n            }\r\n        });\r\n    }\r\n\r\n    function onRecommendSeekpoint(milliseconds) {\r\n        self.postMessage({\r\n            msg: TransmuxingEvents.RECOMMEND_SEEKPOINT,\r\n            data: milliseconds\r\n        });\r\n    }\r\n\r\n    function onLogcatCallback(type, str) {\r\n        self.postMessage({\r\n            msg: 'logcat_callback',\r\n            data: {\r\n                type: type,\r\n                logcat: str\r\n            }\r\n        });\r\n    }\r\n\r\n    function onVideoResolutionChanged(video_info) {\r\n        let obj = {\r\n            msg: TransmuxingEvents.VIDEO_RESOLUTION_CHANGED,\r\n            data: video_info\r\n        };\r\n        self.postMessage(obj);\r\n    }\r\n\r\n};\r\n\r\nexport default TransmuxingWorker;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport decodeUTF8 from '../utils/utf8-conv.js';\r\nimport {IllegalStateException} from '../utils/exception.js';\r\n\r\nlet le = (function () {\r\n    let buf = new ArrayBuffer(2);\r\n    (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\r\n    return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\r\n})();\r\n\r\nclass AMF {\r\n\r\n    static parseScriptData(arrayBuffer, dataOffset, dataSize) {\r\n        let data = {};\r\n\r\n        try {\r\n            let name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\r\n            let value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\r\n\r\n            data[name.data] = value.data;\r\n        } catch (e) {\r\n            Log.e('AMF', e.toString());\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 3) {\r\n            throw new IllegalStateException('Data not enough when parse ScriptDataObject');\r\n        }\r\n        let name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\r\n        let value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\r\n        let isObjectEnd = value.objectEnd;\r\n\r\n        return {\r\n            data: {\r\n                name: name.data,\r\n                value: value.data\r\n            },\r\n            size: name.size + value.size,\r\n            objectEnd: isObjectEnd\r\n        };\r\n    }\r\n\r\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\r\n        return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\r\n    }\r\n\r\n    static parseString(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 2) {\r\n            throw new IllegalStateException('Data not enough when parse String');\r\n        }\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n        let length = v.getUint16(0, !le);\r\n\r\n        let str;\r\n        if (length > 0) {\r\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\r\n        } else {\r\n            str = '';\r\n        }\r\n\r\n        return {\r\n            data: str,\r\n            size: 2 + length\r\n        };\r\n    }\r\n\r\n    static parseLongString(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 4) {\r\n            throw new IllegalStateException('Data not enough when parse LongString');\r\n        }\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n        let length = v.getUint32(0, !le);\r\n\r\n        let str;\r\n        if (length > 0) {\r\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 4, length));\r\n        } else {\r\n            str = '';\r\n        }\r\n\r\n        return {\r\n            data: str,\r\n            size: 4 + length\r\n        };\r\n    }\r\n\r\n    static parseDate(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 10) {\r\n            throw new IllegalStateException('Data size invalid when parse Date');\r\n        }\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n        let timestamp = v.getFloat64(0, !le);\r\n        let localTimeOffset = v.getInt16(8, !le);\r\n        timestamp += localTimeOffset * 60 * 1000;  // get UTC time\r\n\r\n        return {\r\n            data: new Date(timestamp),\r\n            size: 8 + 2\r\n        };\r\n    }\r\n\r\n    static parseValue(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 1) {\r\n            throw new IllegalStateException('Data not enough when parse Value');\r\n        }\r\n\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n\r\n        let offset = 1;\r\n        let type = v.getUint8(0);\r\n        let value;\r\n        let objectEnd = false;\r\n\r\n        try {\r\n            switch (type) {\r\n                case 0:  // Number(Double) type\r\n                    value = v.getFloat64(1, !le);\r\n                    offset += 8;\r\n                    break;\r\n                case 1: {  // Boolean type\r\n                    let b = v.getUint8(1);\r\n                    value = b ? true : false;\r\n                    offset += 1;\r\n                    break;\r\n                }\r\n                case 2: {  // String type\r\n                    let amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\r\n                    value = amfstr.data;\r\n                    offset += amfstr.size;\r\n                    break;\r\n                }\r\n                case 3: { // Object(s) type\r\n                    value = {};\r\n                    let terminal = 0;  // workaround for malformed Objects which has missing ScriptDataObjectEnd\r\n                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\r\n                        terminal = 3;\r\n                    }\r\n                    while (offset < dataSize - 4) {  // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\r\n                        let amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\r\n                        if (amfobj.objectEnd)\r\n                            break;\r\n                        value[amfobj.data.name] = amfobj.data.value;\r\n                        offset += amfobj.size;\r\n                    }\r\n                    if (offset <= dataSize - 3) {\r\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\r\n                        if (marker === 9) {\r\n                            offset += 3;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 8: { // ECMA array type (Mixed array)\r\n                    value = {};\r\n                    offset += 4;  // ECMAArrayLength(UI32)\r\n                    let terminal = 0;  // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\r\n                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\r\n                        terminal = 3;\r\n                    }\r\n                    while (offset < dataSize - 8) {  // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\r\n                        let amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\r\n                        if (amfvar.objectEnd)\r\n                            break;\r\n                        value[amfvar.data.name] = amfvar.data.value;\r\n                        offset += amfvar.size;\r\n                    }\r\n                    if (offset <= dataSize - 3) {\r\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\r\n                        if (marker === 9) {\r\n                            offset += 3;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 9:  // ScriptDataObjectEnd\r\n                    value = undefined;\r\n                    offset = 1;\r\n                    objectEnd = true;\r\n                    break;\r\n                case 10: {  // Strict array type\r\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\r\n                    value = [];\r\n                    let strictArrayLength = v.getUint32(1, !le);\r\n                    offset += 4;\r\n                    for (let i = 0; i < strictArrayLength; i++) {\r\n                        let val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);\r\n                        value.push(val.data);\r\n                        offset += val.size;\r\n                    }\r\n                    break;\r\n                }\r\n                case 11: {  // Date type\r\n                    let date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\r\n                    value = date.data;\r\n                    offset += date.size;\r\n                    break;\r\n                }\r\n                case 12: {  // Long string type\r\n                    let amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\r\n                    value = amfLongStr.data;\r\n                    offset += amfLongStr.size;\r\n                    break;\r\n                }\r\n                default:\r\n                    // ignore and skip\r\n                    offset = dataSize;\r\n                    Log.w('AMF', 'Unsupported AMF value type ' + type);\r\n            }\r\n        } catch (e) {\r\n            Log.e('AMF', e.toString());\r\n        }\r\n\r\n        return {\r\n            data: value,\r\n            size: offset,\r\n            objectEnd: objectEnd\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport default AMF;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst DemuxErrors = {\r\n    OK: 'OK',\r\n    FORMAT_ERROR: 'FormatError',\r\n    FORMAT_UNSUPPORTED: 'FormatUnsupported',\r\n    CODEC_UNSUPPORTED: 'CodecUnsupported'\r\n};\r\n\r\nexport default DemuxErrors;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\r\n\r\n// Exponential-Golomb buffer decoder\r\nclass ExpGolomb {\r\n\r\n    constructor(uint8array) {\r\n        this.TAG = 'ExpGolomb';\r\n\r\n        this._buffer = uint8array;\r\n        this._buffer_index = 0;\r\n        this._total_bytes = uint8array.byteLength;\r\n        this._total_bits = uint8array.byteLength * 8;\r\n        this._current_word = 0;\r\n        this._current_word_bits_left = 0;\r\n    }\r\n\r\n    destroy() {\r\n        this._buffer = null;\r\n    }\r\n\r\n    _fillCurrentWord() {\r\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\r\n        if (buffer_bytes_left <= 0)\r\n            throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\r\n\r\n        let bytes_read = Math.min(4, buffer_bytes_left);\r\n        let word = new Uint8Array(4);\r\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\r\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\r\n\r\n        this._buffer_index += bytes_read;\r\n        this._current_word_bits_left = bytes_read * 8;\r\n    }\r\n\r\n    readBits(bits) {\r\n        if (bits > 32)\r\n            throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\r\n\r\n        if (bits <= this._current_word_bits_left) {\r\n            let result = this._current_word >>> (32 - bits);\r\n            this._current_word <<= bits;\r\n            this._current_word_bits_left -= bits;\r\n            return result;\r\n        }\r\n\r\n        let result = this._current_word_bits_left ? this._current_word : 0;\r\n        result = result >>> (32 - this._current_word_bits_left);\r\n        let bits_need_left = bits - this._current_word_bits_left;\r\n\r\n        this._fillCurrentWord();\r\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\r\n\r\n        let result2 = this._current_word >>> (32 - bits_read_next);\r\n        this._current_word <<= bits_read_next;\r\n        this._current_word_bits_left -= bits_read_next;\r\n\r\n        result = (result << bits_read_next) | result2;\r\n        return result;\r\n    }\r\n\r\n    readBool() {\r\n        return this.readBits(1) === 1;\r\n    }\r\n\r\n    readByte() {\r\n        return this.readBits(8);\r\n    }\r\n\r\n    _skipLeadingZero() {\r\n        let zero_count;\r\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\r\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\r\n                this._current_word <<= zero_count;\r\n                this._current_word_bits_left -= zero_count;\r\n                return zero_count;\r\n            }\r\n        }\r\n        this._fillCurrentWord();\r\n        return zero_count + this._skipLeadingZero();\r\n    }\r\n\r\n    readUEG() {  // unsigned exponential golomb\r\n        let leading_zeros = this._skipLeadingZero();\r\n        return this.readBits(leading_zeros + 1) - 1;\r\n    }\r\n\r\n    readSEG() {  // signed exponential golomb\r\n        let value = this.readUEG();\r\n        if (value & 0x01) {\r\n            return (value + 1) >>> 1;\r\n        } else {\r\n            return -1 * (value >>> 1);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ExpGolomb;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport AMF from './amf-parser.js';\r\nimport SPSParser from './sps-parser.js';\r\nimport DemuxErrors from './demux-errors.js';\r\nimport MediaInfo from '../core/media-info.js';\r\nimport {IllegalStateException} from '../utils/exception.js';\r\nimport aesjs from 'aes-js';\r\n\r\nfunction Swap16(src) {\r\n    return (((src >>> 8) & 0xFF) |\r\n            ((src & 0xFF) << 8));\r\n}\r\n\r\nfunction Swap32(src) {\r\n    return (((src & 0xFF000000) >>> 24) |\r\n            ((src & 0x00FF0000) >>> 8)  |\r\n            ((src & 0x0000FF00) << 8)   |\r\n            ((src & 0x000000FF) << 24));\r\n}\r\n\r\nfunction ReadBig32(array, index) {\r\n    return ((array[index] << 24)     |\r\n            (array[index + 1] << 16) |\r\n            (array[index + 2] << 8)  |\r\n            (array[index + 3]));\r\n}\r\n\r\n\r\nclass FLVDemuxer {\r\n\r\n    constructor(probeData, config) {\r\n        this.TAG = 'FLVDemuxer';\r\n\r\n        this._config = config;\r\n        // 新增\r\n        this._lastdts = 0;\r\n\r\n        // To zhengfeifei\r\n        this._onMessageDx = null;\r\n\r\n        this._onError = null;\r\n        this._onMediaInfo = null;\r\n        this._onMetaDataArrived = null;\r\n        this._onScriptDataArrived = null;\r\n        this._onTrackMetadata = null;\r\n        this._onDataAvailable = null;\r\n        this._onVideoResolutionChanged = null;\r\n\r\n        this._dataOffset = probeData.dataOffset;\r\n        this._firstParse = true;\r\n        this._dispatch = false;\r\n\r\n        this._hasAudio = probeData.hasAudioTrack;\r\n        this._hasVideo = probeData.hasVideoTrack;\r\n\r\n        this._hasAudioFlagOverrided = false;\r\n        this._hasVideoFlagOverrided = false;\r\n\r\n        this._audioInitialMetadataDispatched = false;\r\n        this._videoInitialMetadataDispatched = false;\r\n\r\n        this._mediaInfo = new MediaInfo();\r\n        this._mediaInfo.hasAudio = this._hasAudio;\r\n        this._mediaInfo.hasVideo = this._hasVideo;\r\n        this._metadata = null;\r\n        this._audioMetadata = null;\r\n        this._videoMetadata = null;\r\n\r\n        this._naluLengthSize = 4;\r\n        this._timestampBase = 0;  // int32, in milliseconds\r\n        this._timescale = 1000;\r\n        this._duration = 0;  // int32, in milliseconds\r\n        this._durationOverrided = false;\r\n        this._referenceFrameRate = {\r\n            fixed: true,\r\n            fps: 23.976,\r\n            fps_num: 23976,\r\n            fps_den: 1000\r\n        };\r\n\r\n        this._encryptkey = [0x6a, 0x7c, 0xbb, 0x91, 0xaf, 0x73, 0x01, 0xa3, 0x5a, 0xcf, 0x5b, 0x35, 0xa2, 0x5f, 0x98, 0xdf];\r\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\r\n\r\n        this._mpegSamplingRates = [\r\n            96000, 88200, 64000, 48000, 44100, 32000,\r\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\r\n        ];\r\n\r\n        this._lastVideoDimension = {\r\n            width: -1,\r\n            height: -1,\r\n            profile: '',\r\n            level: ''\r\n        };\r\n\r\n        this._bpsCalculator = null;\r\n        this._bpsInfo = {\r\n            lastVideoBytes: 0,\r\n            lastAudioBytes: 0,\r\n            bps_video: 0,\r\n            bps_audio: 0\r\n        };\r\n\r\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\r\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\r\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000,  0];\r\n\r\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\r\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\r\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48,  56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, -1];\r\n\r\n        this._videoTrack = {type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0};\r\n        this._audioTrack = {type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0};\r\n       /* eslint-disable space-before-function-paren */\r\n        this._littleEndian = (function () {\r\n            let buf = new ArrayBuffer(2);\r\n            (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\r\n            return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\r\n        })();\r\n    }\r\n\r\n    destroy() {\r\n        this._mediaInfo = null;\r\n        this._metadata = null;\r\n        this._audioMetadata = null;\r\n        this._videoMetadata = null;\r\n        this._videoTrack = null;\r\n        this._audioTrack = null;\r\n\r\n        this._onError = null;\r\n        this._onMediaInfo = null;\r\n        this._onMetaDataArrived = null;\r\n        this._onScriptDataArrived = null;\r\n        this._onTrackMetadata = null;\r\n        this._onDataAvailable = null;\r\n        this._lastVideoDimension = null;\r\n\r\n        if (this._bpsCalculator) {\r\n            self.clearInterval(this._bpsCalculator);\r\n            this._bpsCalculator = null;\r\n            this._bpsInfo = null;\r\n        }\r\n    }\r\n\r\n    static probe(buffer) {\r\n        let data = new Uint8Array(buffer);\r\n        let mismatch = {match: false};\r\n\r\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\r\n            return mismatch;\r\n        }\r\n\r\n        let hasAudio = ((data[4] & 4) >>> 2) !== 0;\r\n        let hasVideo = (data[4] & 1) !== 0;\r\n\r\n        let offset = ReadBig32(data, 5);\r\n\r\n        if (offset < 9) {\r\n            return mismatch;\r\n        }\r\n\r\n        return {\r\n            match: true,\r\n            consumed: offset,\r\n            dataOffset: offset,\r\n            hasAudioTrack: hasAudio,\r\n            hasVideoTrack: hasVideo\r\n        };\r\n    }\r\n\r\n    bindDataSource(loader) {\r\n        loader.onDataArrival = this.parseChunks.bind(this);\r\n        return this;\r\n    }\r\n\r\n    // prototype: function(type: string, metadata: any): void\r\n    get onTrackMetadata() {\r\n        return this._onTrackMetadata;\r\n    }\r\n\r\n    set onTrackMetadata(callback) {\r\n        this._onTrackMetadata = callback;\r\n    }\r\n\r\n    // prototype: function(mediaInfo: MediaInfo): void\r\n    get onMediaInfo() {\r\n        return this._onMediaInfo;\r\n    }\r\n\r\n    set onMediaInfo(callback) {\r\n        this._onMediaInfo = callback;\r\n    }\r\n\r\n    get onMessageDx() {\r\n        return this._onMessageDx;\r\n    }\r\n\r\n    set onMessageDx(callback) {\r\n        this._onMessageDx = callback;\r\n    }\r\n\r\n    get onMetaDataArrived() {\r\n        return this._onMetaDataArrived;\r\n    }\r\n\r\n    set onMetaDataArrived(callback) {\r\n        this._onMetaDataArrived = callback;\r\n    }\r\n\r\n    get onScriptDataArrived() {\r\n        return this._onScriptDataArrived;\r\n    }\r\n\r\n    set onScriptDataArrived(callback) {\r\n        this._onScriptDataArrived = callback;\r\n    }\r\n\r\n    // prototype: function(type: number, info: string): void\r\n    get onError() {\r\n        return this._onError;\r\n    }\r\n\r\n    set onError(callback) {\r\n        this._onError = callback;\r\n    }\r\n\r\n    // prototype: function(videoTrack: any, audioTrack: any): void\r\n    get onDataAvailable() {\r\n        return this._onDataAvailable;\r\n    }\r\n\r\n    set onDataAvailable(callback) {\r\n        this._onDataAvailable = callback;\r\n    }\r\n\r\n    // timestamp base for output samples, must be in milliseconds\r\n    get timestampBase() {\r\n        return this._timestampBase;\r\n    }\r\n\r\n    set timestampBase(base) {\r\n        this._timestampBase = base;\r\n    }\r\n\r\n    get overridedDuration() {\r\n        return this._duration;\r\n    }\r\n\r\n    // Force-override media duration. Must be in milliseconds, int32\r\n    set overridedDuration(duration) {\r\n        this._durationOverrided = true;\r\n        this._duration = duration;\r\n        this._mediaInfo.duration = duration;\r\n    }\r\n\r\n    // Force-override audio track present flag, boolean\r\n    set overridedHasAudio(hasAudio) {\r\n        this._hasAudioFlagOverrided = true;\r\n        this._hasAudio = hasAudio;\r\n        this._mediaInfo.hasAudio = hasAudio;\r\n    }\r\n\r\n    // Force-override video track present flag, boolean\r\n    set overridedHasVideo(hasVideo) {\r\n        this._hasVideoFlagOverrided = true;\r\n        this._hasVideo = hasVideo;\r\n        this._mediaInfo.hasVideo = hasVideo;\r\n    }\r\n\r\n    get onVideoResolutionChanged() {\r\n        return this._onVideoResolutionChanged;\r\n    }\r\n\r\n    set onVideoResolutionChanged(callback) {\r\n        this._onVideoResolutionChanged = callback;\r\n    }\r\n\r\n    resetMediaInfo() {\r\n        this._mediaInfo = new MediaInfo();\r\n    }\r\n\r\n    _isInitialMetadataDispatched() {\r\n        if (this._hasAudio && this._hasVideo) {  // both audio & video\r\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\r\n        }\r\n        if (this._hasAudio && !this._hasVideo) {  // audio only\r\n            return this._audioInitialMetadataDispatched;\r\n        }\r\n        if (!this._hasAudio && this._hasVideo) {  // video only\r\n            return this._videoInitialMetadataDispatched;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _calculateRealtimeBitrate() {\r\n        if (!this._bpsInfo) {\r\n            return;\r\n        }\r\n\r\n        this._bpsInfo.bps_video = 8 * this._bpsInfo.lastVideoBytes / 1024;\r\n        this._bpsInfo.bps_audio = 8 * this._bpsInfo.lastAudioBytes / 1024;\r\n        // Log.d(this.TAG, 'realtime av bitrate: v:' + video_bps + ', a:' + audio_bps);\r\n\r\n        this._bpsInfo.lastVideoBytes = this._bpsInfo.lastAudioBytes = 0;\r\n    }\r\n\r\n    // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;\r\n    parseChunks(chunk, byteStart) {\r\n        if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\r\n            throw new IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\r\n        }\r\n\r\n        let offset = 0;\r\n        let le = this._littleEndian;\r\n\r\n        if (byteStart === 0) {  // buffer with FLV header\r\n            if (chunk.byteLength > 13) {\r\n                let probeData = FLVDemuxer.probe(chunk);\r\n                offset = probeData.dataOffset;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        if (!this._bpsCalculator) {\r\n            this._bpsCalculator = self.setInterval(this._calculateRealtimeBitrate.bind(this), 1000);\r\n        }\r\n\r\n        if (this._firstParse) {  // handle PreviousTagSize0 before Tag1\r\n            this._firstParse = false;\r\n            if (byteStart + offset !== this._dataOffset) {\r\n                Log.w(this.TAG, 'First time parsing but chunk byteStart invalid!');\r\n            }\r\n\r\n            let v = new DataView(chunk, offset);\r\n            let prevTagSize0 = v.getUint32(0, !le);\r\n            if (prevTagSize0 !== 0) {\r\n                Log.w(this.TAG, 'PrevTagSize0 !== 0 !!!');\r\n            }\r\n            offset += 4;\r\n        }\r\n\r\n        let videoBytes = 0;\r\n        let audioBytes = 0;\r\n\r\n        while (offset < chunk.byteLength) {\r\n            this._dispatch = true;\r\n\r\n            let v = new DataView(chunk, offset);\r\n\r\n            if (offset + 11 + 4 > chunk.byteLength) {\r\n                // data not enough for parsing an flv tag\r\n                break;\r\n            }\r\n\r\n            let tagType = v.getUint8(0);\r\n            let dataSize = v.getUint32(0, !le) & 0x00FFFFFF;\r\n\r\n            if (offset + 11 + dataSize + 4 > chunk.byteLength) {\r\n                // data not enough for parsing actual data body\r\n                break;\r\n            }\r\n\r\n            if (tagType !== 8 && tagType !== 9 && tagType !== 18) {\r\n                Log.w(this.TAG, `Unsupported tag type ${tagType}, skipped`);\r\n                // consume the whole tag (skip it)\r\n                offset += 11 + dataSize + 4;\r\n                continue;\r\n            }\r\n\r\n            let ts2 = v.getUint8(4);\r\n            let ts1 = v.getUint8(5);\r\n            let ts0 = v.getUint8(6);\r\n            let ts3 = v.getUint8(7);\r\n\r\n            let timestamp = ts0 | (ts1 << 8) | (ts2 << 16) | (ts3 << 24);\r\n\r\n            let streamId = v.getUint32(7, !le) & 0x00FFFFFF;\r\n            if (streamId !== 0) {\r\n                Log.w(this.TAG, 'Meet tag which has StreamID != 0!');\r\n            }\r\n\r\n            let dataOffset = offset + 11;\r\n\r\n            switch (tagType) {\r\n                case 8:  // Audio\r\n                    this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\r\n                    audioBytes += dataSize;\r\n                    break;\r\n                case 9:  // Video\r\n                    this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\r\n                    videoBytes += dataSize;\r\n                    break;\r\n                case 18:  // ScriptDataObject\r\n                    this._parseScriptData(chunk, dataOffset, dataSize);\r\n                    break;\r\n            }\r\n\r\n            let prevTagSize = v.getUint32(11 + dataSize, !le);\r\n            if (prevTagSize !== 11 + dataSize) {\r\n                Log.w(this.TAG, `Invalid PrevTagSize ${prevTagSize}`);\r\n            }\r\n\r\n            offset += 11 + dataSize + 4;  // tagBody + dataSize + prevTagSize\r\n        }\r\n\r\n        if (this._bpsInfo) {\r\n            this._bpsInfo.lastAudioBytes += audioBytes;\r\n            this._bpsInfo.lastVideoBytes += videoBytes;\r\n        }\r\n\r\n        // dispatch parsed frames to consumer (typically, the remuxer)\r\n        if (this._isInitialMetadataDispatched()) {\r\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\r\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\r\n            }\r\n        }\r\n\r\n        return offset;  // consumed bytes, just equals latest offset index\r\n    }\r\n\r\n    _parseScriptData(arrayBuffer, dataOffset, dataSize) {\r\n        let scriptData = AMF.parseScriptData(arrayBuffer, dataOffset, dataSize);\r\n\r\n        if (scriptData.hasOwnProperty('onMetaData')) {\r\n            if (scriptData.onMetaData == null || typeof scriptData.onMetaData !== 'object') {\r\n                Log.w(this.TAG, 'Invalid onMetaData structure!');\r\n                return;\r\n            }\r\n            if (this._metadata) {\r\n                Log.w(this.TAG, 'Found another onMetaData tag!');\r\n            }\r\n            this._metadata = scriptData;\r\n            let onMetaData = this._metadata.onMetaData;\r\n\r\n            if (this._onMetaDataArrived) {\r\n                this._onMetaDataArrived(Object.assign({}, onMetaData));\r\n            }\r\n\r\n            if (typeof onMetaData.hasAudio === 'boolean') {  // hasAudio\r\n                if (this._hasAudioFlagOverrided === false) {\r\n                    this._hasAudio = onMetaData.hasAudio;\r\n                    this._mediaInfo.hasAudio = this._hasAudio;\r\n                }\r\n            }\r\n            if (typeof onMetaData.hasVideo === 'boolean') {  // hasVideo\r\n                if (this._hasVideoFlagOverrided === false) {\r\n                    this._hasVideo = onMetaData.hasVideo;\r\n                    this._mediaInfo.hasVideo = this._hasVideo;\r\n                }\r\n            }\r\n            if (typeof onMetaData.audiodatarate === 'number') {  // audiodatarate\r\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\r\n            }\r\n            if (typeof onMetaData.videodatarate === 'number') {  // videodatarate\r\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\r\n            }\r\n            if (typeof onMetaData.width === 'number') {  // width\r\n                this._mediaInfo.width = onMetaData.width;\r\n            }\r\n            if (typeof onMetaData.height === 'number') {  // height\r\n                this._mediaInfo.height = onMetaData.height;\r\n            }\r\n            if (typeof onMetaData.duration === 'number') {  // duration\r\n                if (!this._durationOverrided) {\r\n                    let duration = Math.floor(onMetaData.duration * this._timescale);\r\n                    this._duration = duration;\r\n                    this._mediaInfo.duration = duration;\r\n                }\r\n            } else {\r\n                this._mediaInfo.duration = 0;\r\n            }\r\n            if (typeof onMetaData.framerate === 'number') {  // framerate\r\n                let fps_num = Math.floor(onMetaData.framerate * 1000);\r\n                if (fps_num > 0) {\r\n                    let fps = fps_num / 1000;\r\n                    this._referenceFrameRate.fixed = true;\r\n                    this._referenceFrameRate.fps = fps;\r\n                    this._referenceFrameRate.fps_num = fps_num;\r\n                    this._referenceFrameRate.fps_den = 1000;\r\n                    this._mediaInfo.fps = fps;\r\n                }\r\n            }\r\n            if (typeof onMetaData.keyframes === 'object') {  // keyframes\r\n                this._mediaInfo.hasKeyframesIndex = true;\r\n                let keyframes = onMetaData.keyframes;\r\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\r\n                onMetaData.keyframes = null;  // keyframes has been extracted, remove it\r\n            } else {\r\n                this._mediaInfo.hasKeyframesIndex = false;\r\n            }\r\n            this._dispatch = false;\r\n            this._mediaInfo.metadata = onMetaData;\r\n\r\n            Log.v(this.TAG, 'Parsed onMetaData, hasAudio:' + this._mediaInfo.hasAudio \r\n                + ', hasVideo:' + this._mediaInfo.hasVideo + ', video demension:' \r\n                + this._mediaInfo.width + 'x' + this._mediaInfo.height + '@' + this._mediaInfo.fps \r\n                + ' fps, hasKeyframesIndex=' + this._mediaInfo.hasKeyframesIndex\r\n                + ', video_bitrate=' + this._mediaInfo.videoDataRate\r\n                + ', audio_bitrate=' + this._mediaInfo.audioDataRate);\r\n\r\n            if (this._mediaInfo.isComplete()) {\r\n                this._onMediaInfo(this._mediaInfo);\r\n            }\r\n        }\r\n\r\n        if (Object.keys(scriptData).length > 0) {\r\n            if (this._onScriptDataArrived) {\r\n                this._onScriptDataArrived(Object.assign({}, scriptData));\r\n            }\r\n        }\r\n    }\r\n\r\n    _parseKeyframesIndex(keyframes) {\r\n        let times = [];\r\n        let filepositions = [];\r\n\r\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\r\n        for (let i = 1; i < keyframes.times.length; i++) {\r\n            let time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\r\n            times.push(time);\r\n            filepositions.push(keyframes.filepositions[i]);\r\n        }\r\n\r\n        return {\r\n            times: times,\r\n            filepositions: filepositions\r\n        };\r\n    }\r\n\r\n    _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\r\n        if (dataSize <= 1) {\r\n            Log.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\r\n            return;\r\n        }\r\n\r\n        if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {\r\n            // If hasAudio: false indicated explicitly in MediaDataSource,\r\n            // Ignore all the audio packets\r\n            return;\r\n        }\r\n\r\n        let le = this._littleEndian;\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n\r\n        let soundSpec = v.getUint8(0);\r\n\r\n        let soundFormat = soundSpec >>> 4;\r\n        if (soundFormat !== 2 && soundFormat !== 10) {  // MP3 or AAC\r\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\r\n            return;\r\n        }\r\n\r\n        let soundRate = 0;\r\n        let soundRateIndex = (soundSpec & 12) >>> 2;\r\n        if (soundRateIndex >= 0 && soundRateIndex <= 4) {\r\n            soundRate = this._flvSoundRateTable[soundRateIndex];\r\n        } else {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\r\n            return;\r\n        }\r\n\r\n        let soundSize = (soundSpec & 2) >>> 1;  // unused\r\n        let soundType = (soundSpec & 1);\r\n\r\n\r\n        let meta = this._audioMetadata;\r\n        let track = this._audioTrack;\r\n\r\n        if (!meta) {\r\n            if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {\r\n                this._hasAudio = true;\r\n                this._mediaInfo.hasAudio = true;\r\n            }\r\n\r\n            // initial metadata\r\n            meta = this._audioMetadata = {};\r\n            meta.type = 'audio';\r\n            meta.id = track.id;\r\n            meta.timescale = this._timescale;\r\n            meta.duration = this._duration;\r\n            meta.audioSampleRate = soundRate;\r\n            meta.channelCount = (soundType === 0 ? 1 : 2);\r\n        }\r\n\r\n        if (soundFormat === 10) {  // AAC\r\n            let aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\r\n            if (aacData == undefined) {\r\n                return;\r\n            }\r\n\r\n            if (aacData.packetType === 0) {  // AAC sequence header (AudioSpecificConfig)\r\n                if (meta.config) {\r\n                    Log.w(this.TAG, 'Found another AudioSpecificConfig!');\r\n                }\r\n                let misc = aacData.data;\r\n                \r\n                Log.v(this.TAG, 'old {channel:' + meta.channelCount + ', codec:' + meta.codec\r\n                    + ', sample rate:' + meta.audioSampleRate + ', orignal codec:' + misc.originalCodec\r\n                    + ', config:' + meta.config + '}');\r\n                Log.v(this.TAG, 'new {channel:' + misc.channelCount + ', codec:' + misc.codec\r\n                    + ', sample rate:' + misc.samplingRate + ', orignal codec:' + misc.originalCodec\r\n                    + ', config:' + misc.config + '}');\r\n\r\n                if (meta.channelCount === misc.channelCount &&\r\n                    meta.audioSampleRate === misc.samplingRate &&\r\n                    meta.codec === misc.codec &&\r\n                    meta.originalCodec === misc.originalCodec) {\r\n                    Log.w(this.TAG, 'audio specific config do not changed, discard it.');\r\n                    return;\r\n                }\r\n\r\n                meta.audioSampleRate = misc.samplingRate;\r\n                meta.channelCount = misc.channelCount;\r\n                meta.codec = misc.codec;\r\n                meta.originalCodec = misc.originalCodec;\r\n                meta.config = misc.config;\r\n                // The decode result of an aac sample is 1024 PCM samples\r\n                meta.refSampleDuration = (1024 / meta.audioSampleRate) * meta.timescale;\r\n                Log.v(this.TAG, 'Parsed AudioSpecificConfig');\r\n\r\n                if (this._isInitialMetadataDispatched()) {\r\n                    // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\r\n                    if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\r\n                        this._onDataAvailable(this._audioTrack, this._videoTrack);\r\n                    }\r\n                } else {\r\n                    this._audioInitialMetadataDispatched = true;\r\n                }\r\n                // then notify new metadata\r\n                this._dispatch = false;\r\n                this._onTrackMetadata('audio', meta);\r\n\r\n                let mi = this._mediaInfo;\r\n                mi.audioCodec = meta.originalCodec;\r\n                mi.audioSampleRate = meta.audioSampleRate;\r\n                mi.audioChannelCount = meta.channelCount;\r\n\r\n                //codecs format see https://tools.ietf.org/html/rfc6381\r\n                if (mi.hasVideo) {\r\n                    if (mi.videoCodec != null) {\r\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\r\n                    }\r\n                } else {\r\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\r\n                }\r\n                if (mi.isComplete()) {\r\n                    this._onMediaInfo(mi);\r\n                }\r\n            } else if (aacData.packetType === 1) {  // AAC raw frame data\r\n                let dts = this._timestampBase + tagTimestamp;\r\n                let aacSample = {unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts};\r\n                track.samples.push(aacSample);\r\n                track.length += aacData.data.length;\r\n            } else {\r\n                Log.e(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\r\n            }\r\n        } else if (soundFormat === 2) {  // MP3\r\n            if (!meta.codec) {\r\n                // We need metadata for mp3 audio track, extract info from frame header\r\n                let misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);\r\n                if (misc == undefined) {\r\n                    return;\r\n                }\r\n                meta.audioSampleRate = misc.samplingRate;\r\n                meta.channelCount = misc.channelCount;\r\n                meta.codec = misc.codec;\r\n                meta.originalCodec = misc.originalCodec;\r\n                // The decode result of an mp3 sample is 1152 PCM samples\r\n                meta.refSampleDuration = (1152 / meta.audioSampleRate) * meta.timescale;\r\n                Log.v(this.TAG, 'Parsed MPEG Audio Frame Header');\r\n\r\n                this._audioInitialMetadataDispatched = true;\r\n                this._onTrackMetadata('audio', meta);\r\n\r\n                let mi = this._mediaInfo;\r\n                mi.audioCodec = meta.codec;\r\n                mi.audioSampleRate = meta.audioSampleRate;\r\n                mi.audioChannelCount = meta.channelCount;\r\n                mi.audioDataRate = misc.bitRate;\r\n                if (mi.hasVideo) {\r\n                    if (mi.videoCodec != null) {\r\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\r\n                    }\r\n                } else {\r\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\r\n                }\r\n                if (mi.isComplete()) {\r\n                    this._onMediaInfo(mi);\r\n                }\r\n            }\r\n\r\n            // This packet is always a valid audio packet, extract it\r\n            let data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);\r\n            if (data == undefined) {\r\n                return;\r\n            }\r\n            let dts = this._timestampBase + tagTimestamp;\r\n            let mp3Sample = {unit: data, length: data.byteLength, dts: dts, pts: dts};\r\n            track.samples.push(mp3Sample);\r\n            track.length += data.length;\r\n        }\r\n    }\r\n\r\n    _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize <= 1) {\r\n            Log.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\r\n            return;\r\n        }\r\n\r\n        let result = {};\r\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\r\n\r\n        result.packetType = array[0];\r\n\r\n        if (array[0] === 0) {\r\n            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\r\n        } else {\r\n            result.data = array.subarray(1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\r\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\r\n        let config = null;\r\n\r\n        /* Audio Object Type:\r\n           0: Null\r\n           1: AAC Main\r\n           2: AAC LC\r\n           3: AAC SSR (Scalable Sample Rate)\r\n           4: AAC LTP (Long Term Prediction)\r\n           5: HE-AAC / SBR (Spectral Band Replication)\r\n           6: AAC Scalable\r\n        */\r\n\r\n        let audioObjectType = 0;\r\n        let originalAudioObjectType = 0;\r\n        let audioExtensionObjectType = null;\r\n        let samplingIndex = 0;\r\n        let extensionSamplingIndex = null;\r\n\r\n        // 5 bits\r\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\r\n        // 4 bits\r\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\r\n        if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\r\n            return;\r\n        }\r\n\r\n        let samplingFrequence = this._mpegSamplingRates[samplingIndex];\r\n\r\n        // 4 bits\r\n        let channelConfig = (array[1] & 0x78) >>> 3;\r\n        if (channelConfig < 0 || channelConfig >= 8) {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\r\n            return;\r\n        }\r\n\r\n        if (audioObjectType === 5) {  // HE-AAC?\r\n            // 4 bits\r\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\r\n            // 5 bits\r\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\r\n        }\r\n\r\n        // workarounds for various browsers\r\n        let userAgent = self.navigator.userAgent.toLowerCase();\r\n\r\n        if (userAgent.indexOf('firefox') !== -1) {\r\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\r\n            if (samplingIndex >= 6) {\r\n                audioObjectType = 5;\r\n                config = new Array(4);\r\n                extensionSamplingIndex = samplingIndex - 3;\r\n            } else {  // use LC-AAC\r\n                audioObjectType = 2;\r\n                config = new Array(2);\r\n                extensionSamplingIndex = samplingIndex;\r\n            }\r\n        } else if (userAgent.indexOf('android') !== -1) {\r\n            // android: always use LC-AAC\r\n            audioObjectType = 2;\r\n            config = new Array(2);\r\n            extensionSamplingIndex = samplingIndex;\r\n        } else {\r\n            // for other browsers, e.g. chrome...\r\n            // Always use HE-AAC to make it easier to switch aac codec profile\r\n            audioObjectType = 5;\r\n            extensionSamplingIndex = samplingIndex;\r\n            config = new Array(4);\r\n\r\n            if (samplingIndex >= 6) {\r\n                extensionSamplingIndex = samplingIndex - 3;\r\n            } else if (channelConfig === 1) {  // Mono channel\r\n                audioObjectType = 2;\r\n                config = new Array(2);\r\n                extensionSamplingIndex = samplingIndex;\r\n            }\r\n        }\r\n\r\n        config[0]  = audioObjectType << 3;\r\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\r\n        config[1]  = (samplingIndex & 0x0F) << 7;\r\n        config[1] |= (channelConfig & 0x0F) << 3;\r\n        if (audioObjectType === 5) {\r\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\r\n            config[2]  = (extensionSamplingIndex & 0x01) << 7;\r\n            // extended audio object type: force to 2 (LC-AAC)\r\n            config[2] |= (2 << 2);\r\n            config[3]  = 0;\r\n        }\r\n\r\n        return {\r\n            config: config,\r\n            samplingRate: samplingFrequence,\r\n            channelCount: channelConfig,\r\n            codec: 'mp4a.40.' + audioObjectType,\r\n            originalCodec: 'mp4a.40.' + originalAudioObjectType\r\n        };\r\n    }\r\n\r\n    _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {\r\n        if (dataSize < 4) {\r\n            Log.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\r\n            return;\r\n        }\r\n\r\n        let le = this._littleEndian;\r\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\r\n        let result = null;\r\n\r\n        if (requestHeader) {\r\n            if (array[0] !== 0xFF) {\r\n                return;\r\n            }\r\n            let ver = (array[1] >>> 3) & 0x03;\r\n            let layer = (array[1] & 0x06) >> 1;\r\n\r\n            let bitrate_index = (array[2] & 0xF0) >>> 4;\r\n            let sampling_freq_index = (array[2] & 0x0C) >>> 2;\r\n\r\n            let channel_mode = (array[3] >>> 6) & 0x03;\r\n            let channel_count = channel_mode !== 3 ? 2 : 1;\r\n\r\n            let sample_rate = 0;\r\n            let bit_rate = 0;\r\n            let object_type = 34;  // Layer-3, listed in MPEG-4 Audio Object Types\r\n\r\n            let codec = 'mp3';\r\n\r\n            switch (ver) {\r\n                case 0:  // MPEG 2.5\r\n                    sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\r\n                    break;\r\n                case 2:  // MPEG 2\r\n                    sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\r\n                    break;\r\n                case 3:  // MPEG 1\r\n                    sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\r\n                    break;\r\n            }\r\n\r\n            switch (layer) {\r\n                case 1:  // Layer 3\r\n                    object_type = 34;\r\n                    if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\r\n                        bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\r\n                    }\r\n                    break;\r\n                case 2:  // Layer 2\r\n                    object_type = 33;\r\n                    if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\r\n                        bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\r\n                    }\r\n                    break;\r\n                case 3:  // Layer 1\r\n                    object_type = 32;\r\n                    if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\r\n                        bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            result = {\r\n                bitRate: bit_rate,\r\n                samplingRate: sample_rate,\r\n                channelCount: channel_count,\r\n                codec: codec,\r\n                originalCodec: codec\r\n            };\r\n        } else {\r\n            result = array;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\r\n        if (dataSize <= 1) {\r\n            Log.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\r\n            return;\r\n        }\r\n\r\n        if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {\r\n            // If hasVideo: false indicated explicitly in MediaDataSource,\r\n            // Ignore all the video packets\r\n            return;\r\n        }\r\n\r\n        let spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];\r\n\r\n        let frameType = (spec & 240) >>> 4;\r\n        let codecId = spec & 15;\r\n\r\n        if (codecId !== 7) {\r\n            this._onMessageDx(codecId);\r\n            return;\r\n        }\r\n\r\n        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\r\n    }\r\n\r\n    _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\r\n        if (dataSize < 4) {\r\n            Log.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\r\n            return;\r\n        }\r\n\r\n        let le = this._littleEndian;\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n\r\n        let packetType = v.getUint8(0);\r\n        let cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;\r\n        let cts = (cts_unsigned << 8) >> 8;  // convert to 24-bit signed int\r\n\r\n        if (packetType === 0) {  // AVCDecoderConfigurationRecord\r\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\r\n        } else if (packetType === 1) {  // One or more Nalus\r\n            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\r\n        } else if (packetType === 2) {\r\n            // empty, AVC end of sequence\r\n        } else {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid video packet type ${packetType}`);\r\n            return;\r\n        }\r\n    }\r\n\r\n    _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\r\n        if (dataSize < 7) {\r\n            Log.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\r\n            return;\r\n        }\r\n\r\n        let meta = this._videoMetadata;\r\n        let track = this._videoTrack;\r\n        let le = this._littleEndian;\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n\r\n        let newAVCDecoderConfig = false;\r\n        if (!meta) {\r\n            if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {\r\n                this._hasVideo = true;\r\n                this._mediaInfo.hasVideo = true;\r\n            }\r\n\r\n            meta = this._videoMetadata = {};\r\n            meta.type = 'video';\r\n            meta.id = track.id;\r\n            meta.timescale = this._timescale;\r\n            meta.duration = this._duration;\r\n        } else {\r\n            if (typeof meta.avcc !== 'undefined') {\r\n                newAVCDecoderConfig = true;\r\n                Log.w(this.TAG, '--== Found another AVCDecoderConfigurationRecord! ==-');\r\n            }\r\n        }\r\n\r\n        let version = v.getUint8(0);  // configurationVersion\r\n        let avcProfile = v.getUint8(1);  // avcProfileIndication\r\n        let profileCompatibility = v.getUint8(2);  // profile_compatibility\r\n        let avcLevel = v.getUint8(3);  // AVCLevelIndication\r\n\r\n        if (version !== 1 || avcProfile === 0) {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\r\n            return;\r\n        }\r\n\r\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1;  // lengthSizeMinusOne\r\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {  // holy shit!!!\r\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\r\n            return;\r\n        }\r\n\r\n        let spsCount = v.getUint8(5) & 31;  // numOfSequenceParameterSets\r\n        if (spsCount === 0) {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\r\n            return;\r\n        } else if (spsCount > 1) {\r\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${spsCount}`);\r\n        }\r\n\r\n        let isLandscapeView = true;\r\n        let offset = 6;\r\n\r\n        for (let i = 0; i < spsCount; i++) {\r\n            let len = v.getUint16(offset, !le);  // sequenceParameterSetLength\r\n            offset += 2;\r\n\r\n            if (len === 0) {\r\n                continue;\r\n            }\r\n\r\n            // Notice: Nalu without startcode header (00 00 00 01)\r\n            let sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\r\n            offset += len;\r\n\r\n            let config = SPSParser.parseSPS(sps);\r\n            if (i !== 0) {\r\n                // ignore other sps's config\r\n                continue;\r\n            }\r\n\r\n            Log.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord, sps:{codec_size: ' + config.codec_size.width \r\n                + 'x' + config.codec_size.height + ', present_size: ' + \r\n                + config.present_size.width + 'x' + config.present_size.height\r\n                + ', profile: ' + config.profile_string + ', level: ' + config.level_string\r\n                + ', fps: {' + config.frame_rate.fps_den + ',' + config.frame_rate.fps_num\r\n                + ',' + config.frame_rate.fps + ',' + config.frame_rate.fixed \r\n                + '}, sar_ratio: ' + config.sar_ratio.width\r\n                + 'x' + config.sar_ratio.height + '}');\r\n\r\n            isLandscapeView = config.codec_size.width >= config.codec_size.height ? true : false;\r\n            \r\n            let resolutionChanged = false;\r\n            if (newAVCDecoderConfig && this._lastVideoDimension) {\r\n\r\n                // compare previous video width and height\r\n                if ((this._lastVideoDimension.width != config.codec_size.width || \r\n                    this._lastVideoDimension.height != config.codec_size.height)) {\r\n\r\n                    // video width or height changed\r\n                    resolutionChanged = true;\r\n\r\n                    // save new video demension\r\n                    this._lastVideoDimension.width = config.codec_size.width;\r\n                    this._lastVideoDimension.height = config.codec_size.height;\r\n                    this._lastVideoDimension.profile = config.profile_string;\r\n                    this._lastVideoDimension.level = config.level_string;\r\n\r\n                    // emit video_resolution_changed event\r\n                    let video_info = {};\r\n                    video_info.width = config.codec_size.width;\r\n                    video_info.height = config.codec_size.height;\r\n                    this._onVideoResolutionChanged(video_info);\r\n                } else {\r\n                    // width and height does not changed, compare profile and level\r\n                    if (this._lastVideoDimension.profile == config.profile_string &&\r\n                        this._lastVideoDimension.level == config.level_string) {\r\n                        // Tecent Cloud would send AVCDecoderConfigurationRecord per second, I don't know why!\r\n                        Log.w(this.TAG, 'video config does not changed. discard reset.');\r\n                        return;\r\n                    }\r\n                }\r\n            } else {\r\n                // save the first video dimentsion\r\n                this._lastVideoDimension.width = config.codec_size.width;\r\n                this._lastVideoDimension.height = config.codec_size.height;\r\n                this._lastVideoDimension.profile = config.profile_string;\r\n                this._lastVideoDimension.level = config.level_string;\r\n            }\r\n\r\n            meta.codecWidth = config.codec_size.width;\r\n            meta.codecHeight = config.codec_size.height;\r\n            meta.presentWidth = config.present_size.width;\r\n            meta.presentHeight = config.present_size.height;\r\n\r\n            meta.profile = config.profile_string;\r\n            meta.level = config.level_string;\r\n            meta.bitDepth = config.bit_depth;\r\n            meta.chromaFormat = config.chroma_format;\r\n            meta.sarRatio = config.sar_ratio;\r\n            meta.frameRate = config.frame_rate;\r\n\r\n            if (config.frame_rate.fixed === false ||\r\n                config.frame_rate.fps_num === 0 ||\r\n                config.frame_rate.fps_den === 0) {\r\n                meta.frameRate = this._referenceFrameRate;\r\n            }\r\n\r\n            let fps_den = meta.frameRate.fps_den;\r\n            let fps_num = meta.frameRate.fps_num;\r\n            meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\r\n\r\n            let codecArray = sps.subarray(1, 4);\r\n            let codecString = 'avc1.';\r\n            for (let j = 0; j < 3; j++) {\r\n                let h = codecArray[j].toString(16);\r\n                if (h.length < 2) {\r\n                    h = '0' + h;\r\n                }\r\n                codecString += h;\r\n            }\r\n            meta.codec = codecString;\r\n\r\n            let mi = this._mediaInfo;\r\n            mi.width = meta.codecWidth;\r\n            mi.height = meta.codecHeight;\r\n            mi.fps = meta.frameRate.fps;\r\n            mi.profile = meta.profile;\r\n            mi.level = meta.level;\r\n            mi.refFrames = config.ref_frames;\r\n            mi.chromaFormat = config.chroma_format_string;\r\n            mi.sarNum = meta.sarRatio.width;\r\n            mi.sarDen = meta.sarRatio.height;\r\n            mi.videoCodec = codecString;\r\n\r\n            if (mi.hasAudio) {\r\n                if (mi.audioCodec != null) {\r\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\r\n                }\r\n            } else {\r\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\r\n            }\r\n            if (mi.isComplete()) {\r\n                this._onMediaInfo(mi);\r\n            }\r\n        }\r\n\r\n        let ppsCount = v.getUint8(offset);  // numOfPictureParameterSets\r\n        if (ppsCount === 0) {\r\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\r\n            return;\r\n        } else if (ppsCount > 1) {\r\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ppsCount}`);\r\n        }\r\n\r\n        offset++;\r\n\r\n        for (let i = 0; i < ppsCount; i++) {\r\n            let len = v.getUint16(offset, !le);  // pictureParameterSetLength\r\n            offset += 2;\r\n\r\n            if (len === 0) {\r\n                continue;\r\n            }\r\n\r\n            // pps is useless for extracting video information\r\n            offset += len;\r\n        }\r\n\r\n        meta.avcc = new Uint8Array(dataSize);\r\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\r\n\r\n        Log.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord done, ' \r\n            + meta.codecWidth + 'x' + meta.codecHeight + '@' + meta.frameRate.fps + ' fps, '\r\n            + 'profile=' + meta.profile + ', level=' + meta.level);\r\n\r\n        if (this._isInitialMetadataDispatched()) {\r\n            // flush parsed frames\r\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\r\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\r\n            }\r\n        } else {\r\n            this._videoInitialMetadataDispatched = true;\r\n        }\r\n        // notify new metadata\r\n        this._dispatch = false;\r\n        if (this._config.enableConstVideoViewSize) {\r\n            Log.w(this.TAG, '--== const video view size enabled, use {' \r\n                + this._config.constVideoViewWidth + 'x' + this._config.constVideoViewHeight + '} ==--');\r\n            meta.codecWidth = isLandscapeView ? this._config.constVideoViewWidth : this._config.constVideoViewHeight;\r\n            meta.codecHeight = isLandscapeView ? this._config.constVideoViewHeight : this._config.constVideoViewWidth;\r\n        }\r\n        this._onTrackMetadata('video', meta);\r\n    }\r\n\r\n    _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\r\n        let le = this._littleEndian;\r\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\r\n\r\n        let units = [], length = 0;\r\n\r\n        let offset = 0;\r\n        const lengthSize = this._naluLengthSize;\r\n        let dts = this._timestampBase + tagTimestamp;\r\n        let keyframe = (frameType === 1);  // from FLV Frame Type constants\r\n\r\n        if (this._config.isCigLocalRecord) {\r\n          // 只有在 cig 盒子本地录像调阅查看录像时，需要开启这个选项，其他情况请别开启\r\n          // let dts = this._timestampBase + tagTimestamp;\r\n          // 解决 时间戳间隔不相等问题\r\n          // 临时处理\r\n            if (this._lastdts === 0) {\r\n                this._lastdts = tagTimestamp - 66;\r\n            }\r\n            dts = this._timestampBase + this._lastdts;\r\n            this._lastdts = tagTimestamp;\r\n        }\r\n\r\n        let encryptflag = false;\r\n        while (offset < dataSize) {\r\n            if (offset + 4 >= dataSize) {\r\n                Log.w(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\r\n                break;  // data not enough for next Nalu\r\n            }\r\n            // Nalu with length-header (AVC1)\r\n            let naluSize = v.getUint32(offset, !le);  // Big-Endian read\r\n            if (lengthSize === 3) {\r\n                naluSize >>>= 8;\r\n            }\r\n            if (naluSize > dataSize - lengthSize) {\r\n                Log.w(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\r\n                return;\r\n            }\r\n\r\n            let unitType = v.getUint8(offset + lengthSize) & 0x1F;\r\n\r\n            if (unitType === 6) {\r\n                // SEI\r\n                encryptflag = v.getUint8(offset + lengthSize + 1);\r\n            }\r\n            let data = new Uint8Array(\r\n                arrayBuffer,\r\n                dataOffset + offset,\r\n                lengthSize + naluSize\r\n            );\r\n            if (unitType === 5) {\r\n                // IDR\r\n                keyframe = true;\r\n                if (encryptflag == true) {\r\n                    //decrypt\r\n                    // Log.v(this.TAG, 'decrypt IDR lengthSize :'+lengthSize + ' dataOffset :' + dataOffset + ' offset :' + offset + ' naluSize :'+naluSize);\r\n                    let buffer = new Uint8Array(\r\n                      arrayBuffer,\r\n                      dataOffset + offset + lengthSize + 1,\r\n                      lengthSize +\r\n                        naluSize -\r\n                        (lengthSize + 1) -\r\n                        ((lengthSize + naluSize - (lengthSize + 1)) % 16)\r\n                    );\r\n                    let iv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n                    let aesCbc = new aesjs.ModeOfOperation.cbc(this._encryptkey, iv);\r\n                    \r\n                    let decryptedBytes = aesCbc.decrypt(buffer);\r\n                    data.set(decryptedBytes, lengthSize + 1);\r\n                }\r\n            }\r\n\r\n            let unit = {type: unitType, data: data};\r\n            units.push(unit);\r\n            length += data.byteLength;\r\n\r\n            offset += lengthSize + naluSize;\r\n        }\r\n\r\n        if (units.length) {\r\n            let track = this._videoTrack;\r\n            let avcSample = {\r\n                units: units,\r\n                length: length,\r\n                isKeyframe: keyframe,\r\n                dts: dts,\r\n                cts: cts,\r\n                pts: (dts + cts)\r\n            };\r\n            if (keyframe) {\r\n                avcSample.fileposition = tagPosition;\r\n            }\r\n            track.samples.push(avcSample);\r\n            track.length += length;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default FLVDemuxer;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport ExpGolomb from './exp-golomb.js';\r\n\r\nclass SPSParser {\r\n\r\n    static _ebsp2rbsp(uint8array) {\r\n        let src = uint8array;\r\n        let src_length = src.byteLength;\r\n        let dst = new Uint8Array(src_length);\r\n        let dst_idx = 0;\r\n\r\n        for (let i = 0; i < src_length; i++) {\r\n            if (i >= 2) {\r\n                // Unescape: Skip 0x03 after 00 00\r\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\r\n                    continue;\r\n                }\r\n            }\r\n            dst[dst_idx] = src[i];\r\n            dst_idx++;\r\n        }\r\n\r\n        return new Uint8Array(dst.buffer, 0, dst_idx);\r\n    }\r\n\r\n    static parseSPS(uint8array) {\r\n        let rbsp = SPSParser._ebsp2rbsp(uint8array);\r\n        let gb = new ExpGolomb(rbsp);\r\n\r\n        gb.readByte();\r\n        let profile_idc = gb.readByte();  // profile_idc\r\n        gb.readByte();  // constraint_set_flags[5] + reserved_zero[3]\r\n        let level_idc = gb.readByte();  // level_idc\r\n        gb.readUEG();  // seq_parameter_set_id\r\n\r\n        let profile_string = SPSParser.getProfileString(profile_idc);\r\n        let level_string = SPSParser.getLevelString(level_idc);\r\n        let chroma_format_idc = 1;\r\n        let chroma_format = 420;\r\n        let chroma_format_table = [0, 420, 422, 444];\r\n        let bit_depth = 8;\r\n\r\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\r\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\r\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\r\n            profile_idc === 138 || profile_idc === 144) {\r\n\r\n            chroma_format_idc = gb.readUEG();\r\n            if (chroma_format_idc === 3) {\r\n                gb.readBits(1);  // separate_colour_plane_flag\r\n            }\r\n            if (chroma_format_idc <= 3) {\r\n                chroma_format = chroma_format_table[chroma_format_idc];\r\n            }\r\n\r\n            bit_depth = gb.readUEG() + 8;  // bit_depth_luma_minus8\r\n            gb.readUEG();  // bit_depth_chroma_minus8\r\n            gb.readBits(1);  // qpprime_y_zero_transform_bypass_flag\r\n            if (gb.readBool()) {  // seq_scaling_matrix_present_flag\r\n                let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\r\n                for (let i = 0; i < scaling_list_count; i++) {\r\n                    if (gb.readBool()) {  // seq_scaling_list_present_flag\r\n                        if (i < 6) {\r\n                            SPSParser._skipScalingList(gb, 16);\r\n                        } else {\r\n                            SPSParser._skipScalingList(gb, 64);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        gb.readUEG();  // log2_max_frame_num_minus4\r\n        let pic_order_cnt_type = gb.readUEG();\r\n        if (pic_order_cnt_type === 0) {\r\n            gb.readUEG();  // log2_max_pic_order_cnt_lsb_minus_4\r\n        } else if (pic_order_cnt_type === 1) {\r\n            gb.readBits(1);  // delta_pic_order_always_zero_flag\r\n            gb.readSEG();  // offset_for_non_ref_pic\r\n            gb.readSEG();  // offset_for_top_to_bottom_field\r\n            let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\r\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\r\n                gb.readSEG();  // offset_for_ref_frame\r\n            }\r\n        }\r\n        let ref_frames = gb.readUEG();  // max_num_ref_frames\r\n        gb.readBits(1);  // gaps_in_frame_num_value_allowed_flag\r\n\r\n        let pic_width_in_mbs_minus1 = gb.readUEG();\r\n        let pic_height_in_map_units_minus1 = gb.readUEG();\r\n\r\n        let frame_mbs_only_flag = gb.readBits(1);\r\n        if (frame_mbs_only_flag === 0) {\r\n            gb.readBits(1);  // mb_adaptive_frame_field_flag\r\n        }\r\n        gb.readBits(1);  // direct_8x8_inference_flag\r\n\r\n        let frame_crop_left_offset = 0;\r\n        let frame_crop_right_offset = 0;\r\n        let frame_crop_top_offset = 0;\r\n        let frame_crop_bottom_offset = 0;\r\n\r\n        let frame_cropping_flag = gb.readBool();\r\n        if (frame_cropping_flag) {\r\n            frame_crop_left_offset = gb.readUEG();\r\n            frame_crop_right_offset = gb.readUEG();\r\n            frame_crop_top_offset = gb.readUEG();\r\n            frame_crop_bottom_offset = gb.readUEG();\r\n        }\r\n\r\n        let sar_width = 1, sar_height = 1;\r\n        let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;\r\n\r\n        let vui_parameters_present_flag = gb.readBool();\r\n        if (vui_parameters_present_flag) {\r\n            if (gb.readBool()) {  // aspect_ratio_info_present_flag\r\n                let aspect_ratio_idc = gb.readByte();\r\n                let sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\r\n                let sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33,  99, 3, 2, 1];\r\n\r\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\r\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\r\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\r\n                } else if (aspect_ratio_idc === 255) {\r\n                    sar_width = gb.readByte() << 8 | gb.readByte();\r\n                    sar_height = gb.readByte() << 8 | gb.readByte();\r\n                }\r\n            }\r\n\r\n            if (gb.readBool()) {  // overscan_info_present_flag\r\n                gb.readBool();  // overscan_appropriate_flag\r\n            }\r\n            if (gb.readBool()) {  // video_signal_type_present_flag\r\n                gb.readBits(4);  // video_format & video_full_range_flag\r\n                if (gb.readBool()) {  // colour_description_present_flag\r\n                    gb.readBits(24);  // colour_primaries & transfer_characteristics & matrix_coefficients\r\n                }\r\n            }\r\n            if (gb.readBool()) {  // chroma_loc_info_present_flag\r\n                gb.readUEG();  // chroma_sample_loc_type_top_field\r\n                gb.readUEG();  // chroma_sample_loc_type_bottom_field\r\n            }\r\n            if (gb.readBool()) {  // timing_info_present_flag\r\n                let num_units_in_tick = gb.readBits(32);\r\n                let time_scale = gb.readBits(32);\r\n                fps_fixed = gb.readBool();  // fixed_frame_rate_flag\r\n\r\n                fps_num = time_scale;\r\n                fps_den = num_units_in_tick * 2;\r\n                fps = fps_num / fps_den;\r\n            }\r\n        }\r\n\r\n        let sarScale = 1;\r\n        if (sar_width !== 1 || sar_height !== 1) {\r\n            sarScale = sar_width / sar_height;\r\n        }\r\n\r\n        let crop_unit_x = 0, crop_unit_y = 0;\r\n        if (chroma_format_idc === 0) {\r\n            crop_unit_x = 1;\r\n            crop_unit_y = 2 - frame_mbs_only_flag;\r\n        } else {\r\n            let sub_wc = (chroma_format_idc === 3) ? 1 : 2;\r\n            let sub_hc = (chroma_format_idc === 1) ? 2 : 1;\r\n            crop_unit_x = sub_wc;\r\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\r\n        }\r\n\r\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\r\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\r\n\r\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\r\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\r\n\r\n        let present_width = Math.ceil(codec_width * sarScale);\r\n\r\n        gb.destroy();\r\n        gb = null;\r\n\r\n        return {\r\n            profile_string: profile_string,  // baseline, high, high10, ...\r\n            level_string: level_string,  // 3, 3.1, 4, 4.1, 5, 5.1, ...\r\n            bit_depth: bit_depth,  // 8bit, 10bit, ...\r\n            ref_frames: ref_frames,\r\n            chroma_format: chroma_format,  // 4:2:0, 4:2:2, ...\r\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\r\n\r\n            frame_rate: {\r\n                fixed: fps_fixed,\r\n                fps: fps,\r\n                fps_den: fps_den,\r\n                fps_num: fps_num\r\n            },\r\n\r\n            sar_ratio: {\r\n                width: sar_width,\r\n                height: sar_height\r\n            },\r\n\r\n            codec_size: {\r\n                width: codec_width,\r\n                height: codec_height\r\n            },\r\n\r\n            present_size: {\r\n                width: present_width,\r\n                height: codec_height\r\n            }\r\n        };\r\n    }\r\n\r\n    static _skipScalingList(gb, count) {\r\n        let last_scale = 8, next_scale = 8;\r\n        let delta_scale = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            if (next_scale !== 0) {\r\n                delta_scale = gb.readSEG();\r\n                next_scale = (last_scale + delta_scale + 256) % 256;\r\n            }\r\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\r\n        }\r\n    }\r\n\r\n    static getProfileString(profile_idc) {\r\n        switch (profile_idc) {\r\n            case 66:\r\n                return 'Baseline';\r\n            case 77:\r\n                return 'Main';\r\n            case 88:\r\n                return 'Extended';\r\n            case 100:\r\n                return 'High';\r\n            case 110:\r\n                return 'High10';\r\n            case 122:\r\n                return 'High422';\r\n            case 244:\r\n                return 'High444';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    static getLevelString(level_idc) {\r\n        return (level_idc / 10).toFixed(1);\r\n    }\r\n\r\n    static getChromaFormatString(chroma) {\r\n        switch (chroma) {\r\n            case 420:\r\n                return '4:2:0';\r\n            case 422:\r\n                return '4:2:2';\r\n            case 444:\r\n                return '4:4:4';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SPSParser;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Polyfill from './utils/polyfill.js';\r\nimport Features from './core/features.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './io/loader.js';\r\nimport FlvPlayer from './player/flv-player.js';\r\nimport NativePlayer from './player/native-player.js';\r\nimport PlayerEvents from './player/player-events.js';\r\nimport {ErrorTypes, ErrorDetails} from './player/player-errors.js';\r\nimport LoggingControl from './utils/logging-control.js';\r\nimport {InvalidArgumentException} from './utils/exception.js';\r\n\r\n// here are all the interfaces\r\n\r\n// install polyfills\r\nPolyfill.install();\r\n\r\n\r\n// factory method\r\nfunction createPlayer(mediaDataSource, optionalConfig) {\r\n    let mds = mediaDataSource;\r\n    if (mds == null || typeof mds !== 'object') {\r\n        throw new InvalidArgumentException('MediaDataSource must be an javascript object!');\r\n    }\r\n\r\n    if (!mds.hasOwnProperty('type')) {\r\n        throw new InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\r\n    }\r\n\r\n    switch (mds.type) {\r\n        case 'flv':\r\n            return new FlvPlayer(mds, optionalConfig);\r\n        default:\r\n            return new NativePlayer(mds, optionalConfig);\r\n    }\r\n}\r\n\r\n\r\n// feature detection\r\nfunction isSupported() {\r\n    return Features.supportMSEH264Playback();\r\n}\r\n\r\nfunction getFeatureList() {\r\n    return Features.getFeatureList();\r\n}\r\n\r\n\r\n// interfaces\r\nlet flvjs = {};\r\n\r\nflvjs.createPlayer = createPlayer;\r\nflvjs.isSupported = isSupported;\r\nflvjs.getFeatureList = getFeatureList;\r\n\r\nflvjs.BaseLoader = BaseLoader;\r\nflvjs.LoaderStatus = LoaderStatus;\r\nflvjs.LoaderErrors = LoaderErrors;\r\n\r\nflvjs.Events = PlayerEvents;\r\nflvjs.ErrorTypes = ErrorTypes;\r\nflvjs.ErrorDetails = ErrorDetails;\r\n\r\nflvjs.FlvPlayer = FlvPlayer;\r\nflvjs.NativePlayer = NativePlayer;\r\nflvjs.LoggingControl = LoggingControl;\r\n\r\nObject.defineProperty(flvjs, 'version', {\r\n    enumerable: true,\r\n    get: function () {\r\n        // replaced by browserify-versionify transform\r\n        return '__VERSION__';\r\n    }\r\n});\r\n\r\nexport default flvjs;","// entry/index file\r\n\r\n// make it compatible with browserify's umd wrapper\r\nmodule.exports = require('./flv.js').default;\r\n","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport Browser from '../utils/browser.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\r\nimport {RuntimeException} from '../utils/exception.js';\r\n\r\n/* fetch + stream IO loader. Currently working on chrome 43+.\r\n * fetch provides a better alternative http API to XMLHttpRequest\r\n *\r\n * fetch spec   https://fetch.spec.whatwg.org/\r\n * stream spec  https://streams.spec.whatwg.org/\r\n */\r\nclass FetchStreamLoader extends BaseLoader {\r\n\r\n    static isSupported() {\r\n        try {\r\n            // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\r\n            // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\r\n            // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\r\n            let isWorkWellEdge = Browser.msedge && Browser.version.minor >= 15048;\r\n            let browserNotBlacklisted = Browser.msedge ? isWorkWellEdge : true;\r\n            return (self.fetch && self.ReadableStream && browserNotBlacklisted);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    constructor(seekHandler, config) {\r\n        super('fetch-stream-loader');\r\n        this.TAG = 'FetchStreamLoader';\r\n\r\n        this._seekHandler = seekHandler;\r\n        this._config = config;\r\n        this._needStash = true;\r\n\r\n        this._requestAbort = false;\r\n        this._contentLength = null;\r\n        this._receivedLength = 0;\r\n    }\r\n\r\n    destroy() {\r\n        if (this.isWorking()) {\r\n            this.abort();\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    open(dataSource, range) {\r\n        this._dataSource = dataSource;\r\n        this._range = range;\r\n\r\n        let sourceURL = dataSource.url;\r\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\r\n            sourceURL = dataSource.redirectedURL;\r\n        }\r\n\r\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\r\n\r\n        let headers = new self.Headers();\r\n\r\n        if (typeof seekConfig.headers === 'object') {\r\n            let configHeaders = seekConfig.headers;\r\n            for (let key in configHeaders) {\r\n                if (configHeaders.hasOwnProperty(key)) {\r\n                    headers.append(key, configHeaders[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let params = {\r\n            method: 'GET',\r\n            headers: headers,\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            // The default policy of Fetch API in the whatwg standard\r\n            // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\r\n            referrerPolicy: 'no-referrer-when-downgrade'\r\n        };\r\n\r\n        // add additional headers\r\n        if (typeof this._config.headers === 'object') {\r\n            for (let key in this._config.headers) {\r\n                headers.append(key, this._config.headers[key]);\r\n            }\r\n        }\r\n\r\n        // cors is enabled by default\r\n        if (dataSource.cors === false) {\r\n            // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\r\n            params.mode = 'same-origin';\r\n        }\r\n\r\n        // withCredentials is disabled by default\r\n        if (dataSource.withCredentials) {\r\n            params.credentials = 'include';\r\n        }\r\n\r\n        // referrerPolicy from config\r\n        if (dataSource.referrerPolicy) {\r\n            params.referrerPolicy = dataSource.referrerPolicy;\r\n        }\r\n\r\n        this._status = LoaderStatus.kConnecting;\r\n        self.fetch(seekConfig.url, params).then((res) => {\r\n            if (this._requestAbort) {\r\n                this._requestAbort = false;\r\n                this._status = LoaderStatus.kIdle;\r\n                return;\r\n            }\r\n            if (res.ok && (res.status >= 200 && res.status <= 299)) {\r\n                if (res.url !== seekConfig.url) {\r\n                    if (this._onURLRedirect) {\r\n                        let redirectedURL = this._seekHandler.removeURLParameters(res.url);\r\n                        this._onURLRedirect(redirectedURL);\r\n                    }\r\n                }\r\n\r\n                let lengthHeader = res.headers.get('Content-Length');\r\n                if (lengthHeader != null) {\r\n                    this._contentLength = parseInt(lengthHeader);\r\n                    if (this._contentLength !== 0) {\r\n                        if (this._onContentLengthKnown) {\r\n                            this._onContentLengthKnown(this._contentLength);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return this._pump.call(this, res.body.getReader());\r\n            } else {\r\n                this._status = LoaderStatus.kError;\r\n                if (this._onError) {\r\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: res.status, msg: res.statusText});\r\n                } else {\r\n                    throw new RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\r\n                }\r\n            }\r\n        }).catch((e) => {\r\n            this._status = LoaderStatus.kError;\r\n            if (this._onError) {\r\n                this._onError(LoaderErrors.EXCEPTION, {code: -1, msg: e.message});\r\n            } else {\r\n                throw e;\r\n            }\r\n        });\r\n    }\r\n\r\n    abort() {\r\n        this._requestAbort = true;\r\n    }\r\n\r\n    _pump(reader) {  // ReadableStreamReader\r\n        return reader.read().then((result) => {\r\n            if (result.done) {\r\n                // First check received length\r\n                if (this._contentLength !== null && this._receivedLength < this._contentLength) {\r\n                    // Report Early-EOF\r\n                    this._status = LoaderStatus.kError;\r\n                    let type = LoaderErrors.EARLY_EOF;\r\n                    let info = {code: -1, msg: 'Fetch stream meet Early-EOF'};\r\n                    if (this._onError) {\r\n                        this._onError(type, info);\r\n                    } else {\r\n                        throw new RuntimeException(info.msg);\r\n                    }\r\n                } else {\r\n                    // OK. Download complete\r\n                    this._status = LoaderStatus.kComplete;\r\n                    if (this._onComplete) {\r\n                        this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this._requestAbort === true) {\r\n                    this._requestAbort = false;\r\n                    this._status = LoaderStatus.kComplete;\r\n                    return reader.cancel();\r\n                }\r\n\r\n                this._status = LoaderStatus.kBuffering;\r\n\r\n                let chunk = result.value.buffer;\r\n                let byteStart = this._range.from + this._receivedLength;\r\n                this._receivedLength += chunk.byteLength;\r\n\r\n                if (this._onDataArrival) {\r\n                    this._onDataArrival(chunk, byteStart, this._receivedLength);\r\n                }\r\n\r\n                this._pump(reader);\r\n            }\r\n        }).catch((e) => {\r\n            if (e.code === 11 && Browser.msedge) {  // InvalidStateError on Microsoft Edge\r\n                // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\r\n                // Ignore the unknown exception.\r\n                // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\r\n                return;\r\n            }\r\n\r\n            this._status = LoaderStatus.kError;\r\n            let type = 0;\r\n            let info = null;\r\n\r\n            if ((e.code === 19 || e.message === 'network error') && // NETWORK_ERR\r\n                (this._contentLength === null ||\r\n                (this._contentLength !== null && this._receivedLength < this._contentLength))) {\r\n                type = LoaderErrors.EARLY_EOF;\r\n                info = {code: e.code, msg: 'Fetch stream meet Early-EOF'};\r\n            } else {\r\n                type = LoaderErrors.EXCEPTION;\r\n                info = {code: e.code, msg: e.message};\r\n            }\r\n\r\n            if (this._onError) {\r\n                this._onError(type, info);\r\n            } else {\r\n                throw new RuntimeException(info.msg);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default FetchStreamLoader;\r\n","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport SpeedSampler from './speed-sampler.js';\r\nimport {LoaderStatus, LoaderErrors} from './loader.js';\r\nimport FetchStreamLoader from './fetch-stream-loader.js';\r\nimport MozChunkedLoader from './xhr-moz-chunked-loader.js';\r\nimport MSStreamLoader from './xhr-msstream-loader.js';\r\nimport RangeLoader from './xhr-range-loader.js';\r\nimport WebSocketLoader from './websocket-loader.js';\r\nimport RangeSeekHandler from './range-seek-handler.js';\r\nimport ParamSeekHandler from './param-seek-handler.js';\r\nimport {RuntimeException, IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\r\n\r\n/**\r\n * DataSource: {\r\n *     url: string,\r\n *     filesize: number,\r\n *     cors: boolean,\r\n *     withCredentials: boolean\r\n * }\r\n * \r\n */\r\n\r\n// Manage IO Loaders\r\nclass IOController {\r\n\r\n    constructor(dataSource, config, extraData) {\r\n        this.TAG = 'IOController';\r\n\r\n        this._config = config;\r\n        this._extraData = extraData;\r\n\r\n        this._stashInitialSize = 1024 * 384;  // default initial size: 384KB\r\n        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {\r\n            // apply from config\r\n            this._stashInitialSize = config.stashInitialSize;\r\n        }\r\n\r\n        this._stashUsed = 0;\r\n        this._stashSize = this._stashInitialSize;\r\n        this._bufferSize = 1024 * 1024 * 3;  // initial size: 3MB\r\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\r\n        this._stashByteStart = 0;\r\n        this._enableStash = true;\r\n        if (config.enableStashBuffer === false) {\r\n            this._enableStash = false;\r\n        }\r\n\r\n        this._loader = null;\r\n        this._loaderClass = null;\r\n        this._seekHandler = null;\r\n\r\n        this._dataSource = dataSource;\r\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\r\n        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;\r\n        this._totalLength = this._refTotalLength;\r\n        this._fullRequestFlag = false;\r\n        this._currentRange = null;\r\n        this._redirectedURL = null;\r\n\r\n        this._speedNormalized = 0;\r\n        this._speedSampler = new SpeedSampler();\r\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\r\n\r\n        this._isEarlyEofReconnecting = false;\r\n\r\n        this._paused = false;\r\n        this._resumeFrom = 0;\r\n\r\n        this._onDataArrival = null;\r\n        this._onSeeked = null;\r\n        this._onError = null;\r\n        this._onComplete = null;\r\n        this._onRedirect = null;\r\n        this._onRecoveredEarlyEof = null;\r\n\r\n        this._selectSeekHandler();\r\n        this._selectLoader();\r\n        this._createLoader();\r\n    }\r\n\r\n    destroy() {\r\n        if (this._loader.isWorking()) {\r\n            this._loader.abort();\r\n        }\r\n        this._loader.destroy();\r\n        this._loader = null;\r\n        this._loaderClass = null;\r\n        this._dataSource = null;\r\n        this._stashBuffer = null;\r\n        this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;\r\n        this._currentRange = null;\r\n        this._speedSampler = null;\r\n\r\n        this._isEarlyEofReconnecting = false;\r\n\r\n        this._onDataArrival = null;\r\n        this._onSeeked = null;\r\n        this._onError = null;\r\n        this._onComplete = null;\r\n        this._onRedirect = null;\r\n        this._onRecoveredEarlyEof = null;\r\n\r\n        this._extraData = null;\r\n    }\r\n\r\n    isWorking() {\r\n        return this._loader && this._loader.isWorking() && !this._paused;\r\n    }\r\n\r\n    isPaused() {\r\n        return this._paused;\r\n    }\r\n\r\n    get status() {\r\n        return this._loader.status;\r\n    }\r\n\r\n    get extraData() {\r\n        return this._extraData;\r\n    }\r\n\r\n    set extraData(data) {\r\n        this._extraData = data;\r\n    }\r\n\r\n    // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\r\n    get onDataArrival() {\r\n        return this._onDataArrival;\r\n    }\r\n\r\n    set onDataArrival(callback) {\r\n        this._onDataArrival = callback;\r\n    }\r\n\r\n    get onSeeked() {\r\n        return this._onSeeked;\r\n    }\r\n\r\n    set onSeeked(callback) {\r\n        this._onSeeked = callback;\r\n    }\r\n\r\n    // prototype: function onError(type: number, info: {code: number, msg: string}): void\r\n    get onError() {\r\n        return this._onError;\r\n    }\r\n\r\n    set onError(callback) {\r\n        this._onError = callback;\r\n    }\r\n\r\n    get onComplete() {\r\n        return this._onComplete;\r\n    }\r\n\r\n    set onComplete(callback) {\r\n        this._onComplete = callback;\r\n    }\r\n\r\n    get onRedirect() {\r\n        return this._onRedirect;\r\n    }\r\n\r\n    set onRedirect(callback) {\r\n        this._onRedirect = callback;\r\n    }\r\n\r\n    get onRecoveredEarlyEof() {\r\n        return this._onRecoveredEarlyEof;\r\n    }\r\n\r\n    set onRecoveredEarlyEof(callback) {\r\n        this._onRecoveredEarlyEof = callback;\r\n    }\r\n\r\n    get currentURL() {\r\n        return this._dataSource.url;\r\n    }\r\n\r\n    get hasRedirect() {\r\n        return (this._redirectedURL != null || this._dataSource.redirectedURL != undefined);\r\n    }\r\n\r\n    get currentRedirectedURL() {\r\n        return this._redirectedURL || this._dataSource.redirectedURL;\r\n    }\r\n\r\n    // in KB/s\r\n    get currentSpeed() {\r\n        if (this._loaderClass === RangeLoader) {\r\n            // SpeedSampler is inaccuracy if loader is RangeLoader\r\n            return this._loader.currentSpeed;\r\n        }\r\n        return this._speedSampler.lastSecondKBps;\r\n    }\r\n\r\n    get loaderType() {\r\n        return this._loader.type;\r\n    }\r\n\r\n    _selectSeekHandler() {\r\n        let config = this._config;\r\n\r\n        if (config.seekType === 'range') {\r\n            this._seekHandler = new RangeSeekHandler(this._config.rangeLoadZeroStart);\r\n        } else if (config.seekType === 'param') {\r\n            let paramStart = config.seekParamStart || 'bstart';\r\n            let paramEnd = config.seekParamEnd || 'bend';\r\n\r\n            this._seekHandler = new ParamSeekHandler(paramStart, paramEnd);\r\n        } else if (config.seekType === 'custom') {\r\n            if (typeof config.customSeekHandler !== 'function') {\r\n                throw new InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');\r\n            }\r\n            this._seekHandler = new config.customSeekHandler();\r\n        } else {\r\n            throw new InvalidArgumentException(`Invalid seekType in config: ${config.seekType}`);\r\n        }\r\n    }\r\n\r\n    _selectLoader() {\r\n        if (this._config.customLoader != null) {\r\n            this._loaderClass = this._config.customLoader;\r\n        } else if (this._isWebSocketURL) {\r\n            this._loaderClass = WebSocketLoader;\r\n        } else if (FetchStreamLoader.isSupported()) {\r\n            this._loaderClass = FetchStreamLoader;\r\n        } else if (MozChunkedLoader.isSupported()) {\r\n            this._loaderClass = MozChunkedLoader;\r\n        } else if (RangeLoader.isSupported()) {\r\n            this._loaderClass = RangeLoader;\r\n        } else {\r\n            throw new RuntimeException('Your browser doesn\\'t support xhr with arraybuffer responseType!');\r\n        }\r\n    }\r\n\r\n    _createLoader() {\r\n        this._loader = new this._loaderClass(this._seekHandler, this._config);\r\n        if (this._loader.needStashBuffer === false) {\r\n            this._enableStash = false;\r\n        }\r\n        this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\r\n        this._loader.onURLRedirect = this._onURLRedirect.bind(this);\r\n        this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\r\n        this._loader.onComplete = this._onLoaderComplete.bind(this);\r\n        this._loader.onError = this._onLoaderError.bind(this);\r\n    }\r\n\r\n    open(optionalFrom) {\r\n        this._currentRange = {from: 0, to: -1};\r\n        if (optionalFrom) {\r\n            this._currentRange.from = optionalFrom;\r\n        }\r\n\r\n        this._speedSampler.reset();\r\n        if (!optionalFrom) {\r\n            this._fullRequestFlag = true;\r\n        }\r\n\r\n        this._loader.open(this._dataSource, Object.assign({}, this._currentRange));\r\n    }\r\n\r\n    abort() {\r\n        this._loader.abort();\r\n\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._resumeFrom = 0;\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this.isWorking()) {\r\n            this._loader.abort();\r\n\r\n            if (this._stashUsed !== 0) {\r\n                this._resumeFrom = this._stashByteStart;\r\n                this._currentRange.to = this._stashByteStart - 1;\r\n            } else {\r\n                this._resumeFrom = this._currentRange.to + 1;\r\n            }\r\n            this._stashUsed = 0;\r\n            this._stashByteStart = 0;\r\n            this._paused = true;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            let bytes = this._resumeFrom;\r\n            this._resumeFrom = 0;\r\n            this._internalSeek(bytes, true);\r\n        }\r\n    }\r\n\r\n    seek(bytes) {\r\n        this._paused = false;\r\n        this._stashUsed = 0;\r\n        this._stashByteStart = 0;\r\n        this._internalSeek(bytes, true);\r\n    }\r\n\r\n    /**\r\n     * When seeking request is from media seeking, unconsumed stash data should be dropped\r\n     * However, stash data shouldn't be dropped if seeking requested from http reconnection\r\n     *\r\n     * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\r\n     */\r\n    _internalSeek(bytes, dropUnconsumed) {\r\n        if (this._loader.isWorking()) {\r\n            this._loader.abort();\r\n        }\r\n\r\n        // dispatch & flush stash buffer before seek\r\n        this._flushStashBuffer(dropUnconsumed);\r\n\r\n        this._loader.destroy();\r\n        this._loader = null;\r\n\r\n        let requestRange = {from: bytes, to: -1};\r\n        this._currentRange = {from: requestRange.from, to: -1};\r\n\r\n        this._speedSampler.reset();\r\n        this._stashSize = this._stashInitialSize;\r\n        this._createLoader();\r\n        this._loader.open(this._dataSource, requestRange);\r\n\r\n        if (this._onSeeked) {\r\n            this._onSeeked();\r\n        }\r\n    }\r\n\r\n    updateUrl(url) {\r\n        if (!url || typeof url !== 'string' || url.length === 0) {\r\n            throw new InvalidArgumentException('Url must be a non-empty string!');\r\n        }\r\n\r\n        this._dataSource.url = url;\r\n\r\n        // TODO: replace with new url\r\n    }\r\n\r\n    _expandBuffer(expectedBytes) {\r\n        let bufferNewSize = this._stashSize;\r\n        while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\r\n            bufferNewSize *= 2;\r\n        }\r\n\r\n        bufferNewSize += 1024 * 1024 * 1;  // bufferSize = stashSize + 1MB\r\n        if (bufferNewSize === this._bufferSize) {\r\n            return;\r\n        }\r\n\r\n        let newBuffer = new ArrayBuffer(bufferNewSize);\r\n\r\n        if (this._stashUsed > 0) {  // copy existing data into new buffer\r\n            let stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\r\n            let stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\r\n            stashNewArray.set(stashOldArray, 0);\r\n        }\r\n\r\n        this._stashBuffer = newBuffer;\r\n        this._bufferSize = bufferNewSize;\r\n    }\r\n\r\n    _normalizeSpeed(input) {\r\n        let list = this._speedNormalizeList;\r\n        let last = list.length - 1;\r\n        let mid = 0;\r\n        let lbound = 0;\r\n        let ubound = last;\r\n\r\n        if (input < list[0]) {\r\n            return list[0];\r\n        }\r\n\r\n        // binary search\r\n        while (lbound <= ubound) {\r\n            mid = lbound + Math.floor((ubound - lbound) / 2);\r\n            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {\r\n                return list[mid];\r\n            } else if (list[mid] < input) {\r\n                lbound = mid + 1;\r\n            } else {\r\n                ubound = mid - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    _adjustStashSize(normalized) {\r\n        let stashSizeKB = 0;\r\n\r\n        if (this._config.isLive) {\r\n            // live stream: always use single normalized speed for size of stashSizeKB\r\n            stashSizeKB = normalized;\r\n        } else {\r\n            if (normalized < 512) {\r\n                stashSizeKB = normalized;\r\n            } else if (normalized >= 512 && normalized <= 1024) {\r\n                stashSizeKB = Math.floor(normalized * 1.5);\r\n            } else {\r\n                stashSizeKB = normalized * 2;\r\n            }\r\n        }\r\n\r\n        if (stashSizeKB > 8192) {\r\n            stashSizeKB = 8192;\r\n        }\r\n\r\n        let bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1;  // stashSize + 1MB\r\n        if (this._bufferSize < bufferSize) {\r\n            this._expandBuffer(bufferSize);\r\n        }\r\n        this._stashSize = stashSizeKB * 1024;\r\n    }\r\n\r\n    _dispatchChunks(chunks, byteStart) {\r\n        this._currentRange.to = byteStart + chunks.byteLength - 1;\r\n        return this._onDataArrival(chunks, byteStart);\r\n    }\r\n\r\n    _onURLRedirect(redirectedURL) {\r\n        this._redirectedURL = redirectedURL;\r\n        if (this._onRedirect) {\r\n            this._onRedirect(redirectedURL);\r\n        }\r\n    }\r\n\r\n    _onContentLengthKnown(contentLength) {\r\n        if (contentLength && this._fullRequestFlag) {\r\n            this._totalLength = contentLength;\r\n            this._fullRequestFlag = false;\r\n        }\r\n    }\r\n\r\n    _onLoaderChunkArrival(chunk, byteStart, receivedLength) {\r\n        if (!this._onDataArrival) {\r\n            throw new IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');\r\n        }\r\n        if (this._paused) {\r\n            return;\r\n        }\r\n        if (this._isEarlyEofReconnecting) {\r\n            // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback\r\n            this._isEarlyEofReconnecting = false;\r\n            if (this._onRecoveredEarlyEof) {\r\n                this._onRecoveredEarlyEof();\r\n            }\r\n        }\r\n\r\n        this._speedSampler.addBytes(chunk.byteLength);\r\n\r\n        // adjust stash buffer size according to network speed dynamically\r\n        let KBps = this._speedSampler.lastSecondKBps;\r\n        if (KBps !== 0) {\r\n            let normalized = this._normalizeSpeed(KBps);\r\n            if (this._speedNormalized !== normalized) {\r\n                this._speedNormalized = normalized;\r\n                this._adjustStashSize(normalized);\r\n            }\r\n        }\r\n\r\n        if (!this._enableStash) {  // disable stash\r\n            if (this._stashUsed === 0) {\r\n                // dispatch chunk directly to consumer;\r\n                // check ret value (consumed bytes) and stash unconsumed to stashBuffer\r\n                let consumed = this._dispatchChunks(chunk, byteStart);\r\n                if (consumed < chunk.byteLength) {  // unconsumed data remain.\r\n                    let remain = chunk.byteLength - consumed;\r\n                    if (remain > this._bufferSize) {\r\n                        this._expandBuffer(remain);\r\n                    }\r\n                    let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                    stashArray.set(new Uint8Array(chunk, consumed), 0);\r\n                    this._stashUsed += remain;\r\n                    this._stashByteStart = byteStart + consumed;\r\n                }\r\n            } else {\r\n                // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\r\n                if (this._stashUsed + chunk.byteLength > this._bufferSize) {\r\n                    this._expandBuffer(this._stashUsed + chunk.byteLength);\r\n                }\r\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\r\n                this._stashUsed += chunk.byteLength;\r\n                let consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);\r\n                if (consumed < this._stashUsed && consumed > 0) {  // unconsumed data remain\r\n                    let remainArray = new Uint8Array(this._stashBuffer, consumed);\r\n                    stashArray.set(remainArray, 0);\r\n                }\r\n                this._stashUsed -= consumed;\r\n                this._stashByteStart += consumed;\r\n            }\r\n        } else {  // enable stash\r\n            if (this._stashUsed === 0 && this._stashByteStart === 0) {  // seeked? or init chunk?\r\n                // This is the first chunk after seek action\r\n                this._stashByteStart = byteStart;\r\n            }\r\n            if (this._stashUsed + chunk.byteLength <= this._stashSize) {\r\n                // just stash\r\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._stashSize);\r\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\r\n                this._stashUsed += chunk.byteLength;\r\n            } else {  // stashUsed + chunkSize > stashSize, size limit exceeded\r\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                if (this._stashUsed > 0) {  // There're stash datas in buffer\r\n                    // dispatch the whole stashBuffer, and stash remain data\r\n                    // then append chunk to stashBuffer (stash)\r\n                    let buffer = this._stashBuffer.slice(0, this._stashUsed);\r\n                    let consumed = this._dispatchChunks(buffer, this._stashByteStart);\r\n                    if (consumed < buffer.byteLength) {\r\n                        if (consumed > 0) {\r\n                            let remainArray = new Uint8Array(buffer, consumed);\r\n                            stashArray.set(remainArray, 0);\r\n                            this._stashUsed = remainArray.byteLength;\r\n                            this._stashByteStart += consumed;\r\n                        }\r\n                    } else {\r\n                        this._stashUsed = 0;\r\n                        this._stashByteStart += consumed;\r\n                    }\r\n                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {\r\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\r\n                        stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                    }\r\n                    stashArray.set(new Uint8Array(chunk), this._stashUsed);\r\n                    this._stashUsed += chunk.byteLength;\r\n                } else {  // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\r\n                    // dispatch chunk directly and stash remain data\r\n                    let consumed = this._dispatchChunks(chunk, byteStart);\r\n                    if (consumed < chunk.byteLength) {\r\n                        let remain = chunk.byteLength - consumed;\r\n                        if (remain > this._bufferSize) {\r\n                            this._expandBuffer(remain);\r\n                            stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                        }\r\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\r\n                        this._stashUsed += remain;\r\n                        this._stashByteStart = byteStart + consumed;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _flushStashBuffer(dropUnconsumed) {\r\n        if (this._stashUsed > 0) {\r\n            let buffer = this._stashBuffer.slice(0, this._stashUsed);\r\n            let consumed = this._dispatchChunks(buffer, this._stashByteStart);\r\n            let remain = buffer.byteLength - consumed;\r\n\r\n            if (consumed < buffer.byteLength) {\r\n                if (dropUnconsumed) {\r\n                    Log.w(this.TAG, `${remain} bytes unconsumed data remain when flush buffer, dropped`);\r\n                } else {\r\n                    if (consumed > 0) {\r\n                        let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\r\n                        let remainArray = new Uint8Array(buffer, consumed);\r\n                        stashArray.set(remainArray, 0);\r\n                        this._stashUsed = remainArray.byteLength;\r\n                        this._stashByteStart += consumed;\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n            this._stashUsed = 0;\r\n            this._stashByteStart = 0;\r\n            return remain;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    _onLoaderComplete(from, to) {\r\n        // Force-flush stash buffer, and drop unconsumed data\r\n        this._flushStashBuffer(true);\r\n\r\n        if (this._onComplete) {\r\n            this._onComplete(this._extraData);\r\n        }\r\n    }\r\n\r\n    _onLoaderError(type, data) {\r\n        Log.e(this.TAG, `Loader error, code = ${data.code}, msg = ${data.msg}`);\r\n\r\n        this._flushStashBuffer(false);\r\n\r\n        if (this._isEarlyEofReconnecting) {\r\n            // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\r\n            this._isEarlyEofReconnecting = false;\r\n            type = LoaderErrors.UNRECOVERABLE_EARLY_EOF;\r\n        }\r\n\r\n        switch (type) {\r\n            case LoaderErrors.EARLY_EOF: {\r\n                if (!this._config.isLive) {\r\n                    // Do internal http reconnect if not live stream\r\n                    if (this._totalLength) {\r\n                        let nextFrom = this._currentRange.to + 1;\r\n                        if (nextFrom < this._totalLength) {\r\n                            Log.w(this.TAG, 'Connection lost, trying reconnect...');\r\n                            this._isEarlyEofReconnecting = true;\r\n                            this._internalSeek(nextFrom, false);\r\n                        }\r\n                        return;\r\n                    }\r\n                    // else: We don't know totalLength, throw UnrecoverableEarlyEof\r\n                }\r\n                // live stream: throw UnrecoverableEarlyEof error to upper-layer\r\n                type = LoaderErrors.UNRECOVERABLE_EARLY_EOF;\r\n                break;\r\n            }\r\n            case LoaderErrors.UNRECOVERABLE_EARLY_EOF:\r\n            case LoaderErrors.CONNECTING_TIMEOUT:\r\n            case LoaderErrors.HTTP_STATUS_CODE_INVALID:\r\n            case LoaderErrors.EXCEPTION:\r\n                break;\r\n        }\r\n\r\n        if (this._onError) {\r\n            this._onError(type, data);\r\n        } else {\r\n            throw new RuntimeException('IOException: ' + data.msg);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default IOController;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {NotImplementedException} from '../utils/exception.js';\r\n\r\nexport const LoaderStatus = {\r\n    kIdle: 0,\r\n    kConnecting: 1,\r\n    kBuffering: 2,\r\n    kError: 3,\r\n    kComplete: 4\r\n};\r\n\r\nexport const LoaderErrors = {\r\n    OK: 'OK',\r\n    EXCEPTION: 'Exception',\r\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\r\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\r\n    EARLY_EOF: 'EarlyEof',\r\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\r\n};\r\n\r\n/* Loader has callbacks which have following prototypes:\r\n *     function onContentLengthKnown(contentLength: number): void\r\n *     function onURLRedirect(url: string): void\r\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\r\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\r\n *     function onComplete(rangeFrom: number, rangeTo: number): void\r\n */\r\nexport class BaseLoader {\r\n\r\n    constructor(typeName) {\r\n        this._type = typeName || 'undefined';\r\n        this._status = LoaderStatus.kIdle;\r\n        this._needStash = false;\r\n        // callbacks\r\n        this._onContentLengthKnown = null;\r\n        this._onURLRedirect = null;\r\n        this._onDataArrival = null;\r\n        this._onError = null;\r\n        this._onComplete = null;\r\n    }\r\n\r\n    destroy() {\r\n        this._status = LoaderStatus.kIdle;\r\n        this._onContentLengthKnown = null;\r\n        this._onURLRedirect = null;\r\n        this._onDataArrival = null;\r\n        this._onError = null;\r\n        this._onComplete = null;\r\n    }\r\n\r\n    isWorking() {\r\n        return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    get needStashBuffer() {\r\n        return this._needStash;\r\n    }\r\n\r\n    get onContentLengthKnown() {\r\n        return this._onContentLengthKnown;\r\n    }\r\n\r\n    set onContentLengthKnown(callback) {\r\n        this._onContentLengthKnown = callback;\r\n    }\r\n\r\n    get onURLRedirect() {\r\n        return this._onURLRedirect;\r\n    }\r\n\r\n    set onURLRedirect(callback) {\r\n        this._onURLRedirect = callback;\r\n    }\r\n\r\n    get onDataArrival() {\r\n        return this._onDataArrival;\r\n    }\r\n\r\n    set onDataArrival(callback) {\r\n        this._onDataArrival = callback;\r\n    }\r\n\r\n    get onError() {\r\n        return this._onError;\r\n    }\r\n\r\n    set onError(callback) {\r\n        this._onError = callback;\r\n    }\r\n\r\n    get onComplete() {\r\n        return this._onComplete;\r\n    }\r\n\r\n    set onComplete(callback) {\r\n        this._onComplete = callback;\r\n    }\r\n\r\n    // pure virtual\r\n    open(dataSource, range) {\r\n        throw new NotImplementedException('Unimplemented abstract function!');\r\n    }\r\n\r\n    abort() {\r\n        throw new NotImplementedException('Unimplemented abstract function!');\r\n    }\r\n\r\n\r\n}","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass ParamSeekHandler {\r\n\r\n    constructor(paramStart, paramEnd) {\r\n        this._startName = paramStart;\r\n        this._endName = paramEnd;\r\n    }\r\n\r\n    getConfig(baseUrl, range) {\r\n        let url = baseUrl;\r\n\r\n        if (range.from !== 0 || range.to !== -1) {\r\n            let needAnd = true;\r\n            if (url.indexOf('?') === -1) {\r\n                url += '?';\r\n                needAnd = false;\r\n            }\r\n\r\n            if (needAnd) {\r\n                url += '&';\r\n            }\r\n\r\n            url += `${this._startName}=${range.from.toString()}`;\r\n\r\n            if (range.to !== -1) {\r\n                url += `&${this._endName}=${range.to.toString()}`;\r\n            }\r\n        }\r\n\r\n        return {\r\n            url: url,\r\n            headers: {}\r\n        };\r\n    }\r\n\r\n    removeURLParameters(seekedURL) {\r\n        let baseURL = seekedURL.split('?')[0];\r\n        let params = undefined;\r\n\r\n        let queryIndex = seekedURL.indexOf('?');\r\n        if (queryIndex !== -1) {\r\n            params = seekedURL.substring(queryIndex + 1);\r\n        }\r\n\r\n        let resultParams = '';\r\n\r\n        if (params != undefined && params.length > 0) {\r\n            let pairs = params.split('&');\r\n\r\n            for (let i = 0; i < pairs.length; i++) {\r\n                let pair = pairs[i].split('=');\r\n                let requireAnd = (i > 0);\r\n\r\n                if (pair[0] !== this._startName && pair[0] !== this._endName) {\r\n                    if (requireAnd) {\r\n                        resultParams += '&';\r\n                    }\r\n                    resultParams += pairs[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return (resultParams.length === 0) ? baseURL : baseURL + '?' + resultParams;\r\n    }\r\n\r\n}\r\n\r\nexport default ParamSeekHandler;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass RangeSeekHandler {\r\n\r\n    constructor(zeroStart) {\r\n        this._zeroStart = zeroStart || false;\r\n    }\r\n\r\n    getConfig(url, range) {\r\n        let headers = {};\r\n\r\n        if (range.from !== 0 || range.to !== -1) {\r\n            let param;\r\n            if (range.to !== -1) {\r\n                param = `bytes=${range.from.toString()}-${range.to.toString()}`;\r\n            } else {\r\n                param = `bytes=${range.from.toString()}-`;\r\n            }\r\n            headers['Range'] = param;\r\n        } else if (this._zeroStart) {\r\n            headers['Range'] = 'bytes=0-';\r\n        }\r\n\r\n        return {\r\n            url: url,\r\n            headers: headers\r\n        };\r\n    }\r\n\r\n    removeURLParameters(seekedURL) {\r\n        return seekedURL;\r\n    }\r\n\r\n}\r\n\r\nexport default RangeSeekHandler;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Utility class to calculate realtime network I/O speed\r\nclass SpeedSampler {\r\n\r\n    constructor() {\r\n        // milliseconds\r\n        this._firstCheckpoint = 0;\r\n        this._lastCheckpoint = 0;\r\n        this._intervalBytes = 0;\r\n        this._totalBytes = 0;\r\n        this._lastSecondBytes = 0;\r\n\r\n        // compatibility detection\r\n        if (self.performance && self.performance.now) {\r\n            this._now = self.performance.now.bind(self.performance);\r\n        } else {\r\n            this._now = Date.now;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this._firstCheckpoint = this._lastCheckpoint = 0;\r\n        this._totalBytes = this._intervalBytes = 0;\r\n        this._lastSecondBytes = 0;\r\n    }\r\n\r\n    addBytes(bytes) {\r\n        if (this._firstCheckpoint === 0) {\r\n            this._firstCheckpoint = this._now();\r\n            this._lastCheckpoint = this._firstCheckpoint;\r\n            this._intervalBytes += bytes;\r\n            this._totalBytes += bytes;\r\n        } else if (this._now() - this._lastCheckpoint < 1000) {\r\n            this._intervalBytes += bytes;\r\n            this._totalBytes += bytes;\r\n        } else {  // duration >= 1000\r\n            this._lastSecondBytes = this._intervalBytes;\r\n            this._intervalBytes = bytes;\r\n            this._totalBytes += bytes;\r\n            this._lastCheckpoint = this._now();\r\n        }\r\n    }\r\n\r\n    get currentKBps() {\r\n        this.addBytes(0);\r\n\r\n        let durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\r\n        if (durationSeconds == 0) durationSeconds = 1;\r\n        return (this._intervalBytes / durationSeconds) / 1024;\r\n    }\r\n\r\n    get lastSecondKBps() {\r\n        this.addBytes(0);\r\n\r\n        if (this._lastSecondBytes !== 0) {\r\n            return this._lastSecondBytes / 1024;\r\n        } else {  // lastSecondBytes === 0\r\n            if (this._now() - this._lastCheckpoint >= 500) {\r\n                // if time interval since last checkpoint has exceeded 500ms\r\n                // the speed is nearly accurate\r\n                return this.currentKBps;\r\n            } else {\r\n                // We don't know\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    get averageKBps() {\r\n        let durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\r\n        return (this._totalBytes / durationSeconds) / 1024;\r\n    }\r\n\r\n}\r\n\r\nexport default SpeedSampler;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\r\nimport {RuntimeException} from '../utils/exception.js';\r\n\r\n// For FLV over WebSocket live stream\r\nclass WebSocketLoader extends BaseLoader {\r\n\r\n    static isSupported() {\r\n        try {\r\n            return (typeof self.WebSocket !== 'undefined');\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super('websocket-loader');\r\n        this.TAG = 'WebSocketLoader';\r\n\r\n        this._needStash = true;\r\n\r\n        this._ws = null;\r\n        this._requestAbort = false;\r\n        this._receivedLength = 0;\r\n    }\r\n\r\n    destroy() {\r\n        if (this._ws) {\r\n            this.abort();\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    open(dataSource) {\r\n        try {\r\n            let ws = this._ws = new self.WebSocket(dataSource.url);\r\n            ws.binaryType = 'arraybuffer';\r\n            ws.onopen = this._onWebSocketOpen.bind(this);\r\n            ws.onclose = this._onWebSocketClose.bind(this);\r\n            ws.onmessage = this._onWebSocketMessage.bind(this);\r\n            ws.onerror = this._onWebSocketError.bind(this);\r\n\r\n            this._status = LoaderStatus.kConnecting;\r\n        } catch (e) {\r\n            this._status = LoaderStatus.kError;\r\n\r\n            let info = {code: e.code, msg: e.message};\r\n\r\n            if (this._onError) {\r\n                this._onError(LoaderErrors.EXCEPTION, info);\r\n            } else {\r\n                throw new RuntimeException(info.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    abort() {\r\n        let ws = this._ws;\r\n        if (ws && (ws.readyState === 0 || ws.readyState === 1)) {  // CONNECTING || OPEN\r\n            this._requestAbort = true;\r\n            ws.close();\r\n        }\r\n\r\n        this._ws = null;\r\n        this._status = LoaderStatus.kComplete;\r\n    }\r\n\r\n    _onWebSocketOpen(e) {\r\n        this._status = LoaderStatus.kBuffering;\r\n    }\r\n\r\n    _onWebSocketClose(e) {\r\n        if (this._requestAbort === true) {\r\n            this._requestAbort = false;\r\n            return;\r\n        }\r\n\r\n        this._status = LoaderStatus.kComplete;\r\n\r\n        if (this._onComplete) {\r\n            this._onComplete(0, this._receivedLength - 1);\r\n        }\r\n    }\r\n\r\n    _onWebSocketMessage(e) {\r\n        if (e.data instanceof ArrayBuffer) {\r\n            this._dispatchArrayBuffer(e.data);\r\n        } else if (e.data instanceof Blob) {\r\n            let reader = new FileReader();\r\n            reader.onload = () => {\r\n                this._dispatchArrayBuffer(reader.result);\r\n            };\r\n            reader.readAsArrayBuffer(e.data);\r\n        } else {\r\n            this._status = LoaderStatus.kError;\r\n            let info = {code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name};\r\n\r\n            if (this._onError) {\r\n                this._onError(LoaderErrors.EXCEPTION, info);\r\n            } else {\r\n                throw new RuntimeException(info.msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchArrayBuffer(arraybuffer) {\r\n        let chunk = arraybuffer;\r\n        let byteStart = this._receivedLength;\r\n        this._receivedLength += chunk.byteLength;\r\n\r\n        if (this._onDataArrival) {\r\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\r\n        }\r\n    }\r\n\r\n    _onWebSocketError(e) {\r\n        this._status = LoaderStatus.kError;\r\n\r\n        let info = {\r\n            code: e.code,\r\n            msg: e.message\r\n        };\r\n\r\n        if (this._onError) {\r\n            this._onError(LoaderErrors.EXCEPTION, info);\r\n        } else {\r\n            throw new RuntimeException(info.msg);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default WebSocketLoader;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\r\nimport {RuntimeException} from '../utils/exception.js';\r\n\r\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\r\nclass MozChunkedLoader extends BaseLoader {\r\n\r\n    static isSupported() {\r\n        try {\r\n            let xhr = new XMLHttpRequest();\r\n            // Firefox 37- requires .open() to be called before setting responseType\r\n            xhr.open('GET', 'https://example.com', true);\r\n            xhr.responseType = 'moz-chunked-arraybuffer';\r\n            return (xhr.responseType === 'moz-chunked-arraybuffer');\r\n        } catch (e) {\r\n            Log.w('MozChunkedLoader', e.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    constructor(seekHandler, config) {\r\n        super('xhr-moz-chunked-loader');\r\n        this.TAG = 'MozChunkedLoader';\r\n\r\n        this._seekHandler = seekHandler;\r\n        this._config = config;\r\n        this._needStash = true;\r\n\r\n        this._xhr = null;\r\n        this._requestAbort = false;\r\n        this._contentLength = null;\r\n        this._receivedLength = 0;\r\n    }\r\n\r\n    destroy() {\r\n        if (this.isWorking()) {\r\n            this.abort();\r\n        }\r\n        if (this._xhr) {\r\n            this._xhr.onreadystatechange = null;\r\n            this._xhr.onprogress = null;\r\n            this._xhr.onloadend = null;\r\n            this._xhr.onerror = null;\r\n            this._xhr = null;\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    open(dataSource, range) {\r\n        this._dataSource = dataSource;\r\n        this._range = range;\r\n\r\n        let sourceURL = dataSource.url;\r\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\r\n            sourceURL = dataSource.redirectedURL;\r\n        }\r\n\r\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\r\n        this._requestURL = seekConfig.url;\r\n\r\n        let xhr = this._xhr = new XMLHttpRequest();\r\n        xhr.open('GET', seekConfig.url, true);\r\n        xhr.responseType = 'moz-chunked-arraybuffer';\r\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\r\n        xhr.onprogress = this._onProgress.bind(this);\r\n        xhr.onloadend = this._onLoadEnd.bind(this);\r\n        xhr.onerror = this._onXhrError.bind(this);\r\n\r\n        // cors is auto detected and enabled by xhr\r\n\r\n        // withCredentials is disabled by default\r\n        if (dataSource.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        if (typeof seekConfig.headers === 'object') {\r\n            let headers = seekConfig.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // add additional headers\r\n        if (typeof this._config.headers === 'object') {\r\n            let headers = this._config.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._status = LoaderStatus.kConnecting;\r\n        xhr.send();\r\n    }\r\n\r\n    abort() {\r\n        this._requestAbort = true;\r\n        if (this._xhr) {\r\n            this._xhr.abort();\r\n        }\r\n        this._status = LoaderStatus.kComplete;\r\n    }\r\n\r\n    _onReadyStateChange(e) {\r\n        let xhr = e.target;\r\n\r\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\r\n            if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\r\n                if (this._onURLRedirect) {\r\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\r\n                    this._onURLRedirect(redirectedURL);\r\n                }\r\n            }\r\n\r\n            if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\r\n                this._status = LoaderStatus.kError;\r\n                if (this._onError) {\r\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\r\n                } else {\r\n                    throw new RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\r\n                }\r\n            } else {\r\n                this._status = LoaderStatus.kBuffering;\r\n            }\r\n        }\r\n    }\r\n\r\n    _onProgress(e) {\r\n        if (this._status === LoaderStatus.kError) {\r\n            // Ignore error response\r\n            return;\r\n        }\r\n\r\n        if (this._contentLength === null) {\r\n            if (e.total !== null && e.total !== 0) {\r\n                this._contentLength = e.total;\r\n                if (this._onContentLengthKnown) {\r\n                    this._onContentLengthKnown(this._contentLength);\r\n                }\r\n            }\r\n        }\r\n\r\n        let chunk = e.target.response;\r\n        let byteStart = this._range.from + this._receivedLength;\r\n        this._receivedLength += chunk.byteLength;\r\n\r\n        if (this._onDataArrival) {\r\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\r\n        }\r\n    }\r\n\r\n    _onLoadEnd(e) {\r\n        if (this._requestAbort === true) {\r\n            this._requestAbort = false;\r\n            return;\r\n        } else if (this._status === LoaderStatus.kError) {\r\n            return;\r\n        }\r\n\r\n        this._status = LoaderStatus.kComplete;\r\n        if (this._onComplete) {\r\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\r\n        }\r\n    }\r\n\r\n    _onXhrError(e) {\r\n        this._status = LoaderStatus.kError;\r\n        let type = 0;\r\n        let info = null;\r\n\r\n        if (this._contentLength && e.loaded < this._contentLength) {\r\n            type = LoaderErrors.EARLY_EOF;\r\n            info = {code: -1, msg: 'Moz-Chunked stream meet Early-Eof'};\r\n        } else {\r\n            type = LoaderErrors.EXCEPTION;\r\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\r\n        }\r\n\r\n        if (this._onError) {\r\n            this._onError(type, info);\r\n        } else {\r\n            throw new RuntimeException(info.msg);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default MozChunkedLoader;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\r\nimport {RuntimeException} from '../utils/exception.js';\r\n\r\n/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!\r\n * The browser may crash in wininet.dll. Disable for now.\r\n *\r\n * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`\r\n * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.\r\n *\r\n * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.\r\n * in order to release previous ArrayBuffer to avoid memory leak\r\n *\r\n * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.\r\n */\r\nclass MSStreamLoader extends BaseLoader {\r\n\r\n    static isSupported() {\r\n        try {\r\n            if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {\r\n                return false;\r\n            }\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'https://example.com', true);\r\n            xhr.responseType = 'ms-stream';\r\n            return (xhr.responseType === 'ms-stream');\r\n        } catch (e) {\r\n            Log.w('MSStreamLoader', e.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    constructor(seekHandler, config) {\r\n        super('xhr-msstream-loader');\r\n        this.TAG = 'MSStreamLoader';\r\n\r\n        this._seekHandler = seekHandler;\r\n        this._config = config;\r\n        this._needStash = true;\r\n\r\n        this._xhr = null;\r\n        this._reader = null;  // MSStreamReader\r\n\r\n        this._totalRange = null;\r\n        this._currentRange = null;\r\n\r\n        this._currentRequestURL = null;\r\n        this._currentRedirectedURL = null;\r\n\r\n        this._contentLength = null;\r\n        this._receivedLength = 0;\r\n\r\n        this._bufferLimit = 16 * 1024 * 1024;  // 16MB\r\n        this._lastTimeBufferSize = 0;\r\n        this._isReconnecting = false;\r\n    }\r\n\r\n    destroy() {\r\n        if (this.isWorking()) {\r\n            this.abort();\r\n        }\r\n        if (this._reader) {\r\n            this._reader.onprogress = null;\r\n            this._reader.onload = null;\r\n            this._reader.onerror = null;\r\n            this._reader = null;\r\n        }\r\n        if (this._xhr) {\r\n            this._xhr.onreadystatechange = null;\r\n            this._xhr = null;\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    open(dataSource, range) {\r\n        this._internalOpen(dataSource, range, false);\r\n    }\r\n\r\n    _internalOpen(dataSource, range, isSubrange) {\r\n        this._dataSource = dataSource;\r\n\r\n        if (!isSubrange) {\r\n            this._totalRange = range;\r\n        } else {\r\n            this._currentRange = range;\r\n        }\r\n\r\n        let sourceURL = dataSource.url;\r\n        if (this._config.reuseRedirectedURL) {\r\n            if (this._currentRedirectedURL != undefined) {\r\n                sourceURL = this._currentRedirectedURL;\r\n            } else if (dataSource.redirectedURL != undefined) {\r\n                sourceURL = dataSource.redirectedURL;\r\n            }\r\n        }\r\n\r\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\r\n        this._currentRequestURL = seekConfig.url;\r\n\r\n        let reader = this._reader = new self.MSStreamReader();\r\n        reader.onprogress = this._msrOnProgress.bind(this);\r\n        reader.onload = this._msrOnLoad.bind(this);\r\n        reader.onerror = this._msrOnError.bind(this);\r\n\r\n        let xhr = this._xhr = new XMLHttpRequest();\r\n        xhr.open('GET', seekConfig.url, true);\r\n        xhr.responseType = 'ms-stream';\r\n        xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);\r\n        xhr.onerror = this._xhrOnError.bind(this);\r\n\r\n        if (dataSource.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        if (typeof seekConfig.headers === 'object') {\r\n            let headers = seekConfig.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // add additional headers\r\n        if (typeof this._config.headers === 'object') {\r\n            let headers = this._config.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._isReconnecting) {\r\n            this._isReconnecting = false;\r\n        } else {\r\n            this._status = LoaderStatus.kConnecting;\r\n        }\r\n        xhr.send();\r\n    }\r\n\r\n    abort() {\r\n        this._internalAbort();\r\n        this._status = LoaderStatus.kComplete;\r\n    }\r\n\r\n    _internalAbort() {\r\n        if (this._reader) {\r\n            if (this._reader.readyState === 1) {  // LOADING\r\n                this._reader.abort();\r\n            }\r\n            this._reader.onprogress = null;\r\n            this._reader.onload = null;\r\n            this._reader.onerror = null;\r\n            this._reader = null;\r\n        }\r\n        if (this._xhr) {\r\n            this._xhr.abort();\r\n            this._xhr.onreadystatechange = null;\r\n            this._xhr = null;\r\n        }\r\n    }\r\n\r\n    _xhrOnReadyStateChange(e) {\r\n        let xhr = e.target;\r\n\r\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\r\n            if (xhr.status >= 200 && xhr.status <= 299) {\r\n                this._status = LoaderStatus.kBuffering;\r\n\r\n                if (xhr.responseURL != undefined) {\r\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\r\n                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\r\n                        this._currentRedirectedURL = redirectedURL;\r\n                        if (this._onURLRedirect) {\r\n                            this._onURLRedirect(redirectedURL);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let lengthHeader = xhr.getResponseHeader('Content-Length');\r\n                if (lengthHeader != null && this._contentLength == null) {\r\n                    let length = parseInt(lengthHeader);\r\n                    if (length > 0) {\r\n                        this._contentLength = length;\r\n                        if (this._onContentLengthKnown) {\r\n                            this._onContentLengthKnown(this._contentLength);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this._status = LoaderStatus.kError;\r\n                if (this._onError) {\r\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\r\n                } else {\r\n                    throw new RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\r\n                }\r\n            }\r\n        } else if (xhr.readyState === 3) {  // LOADING\r\n            if (xhr.status >= 200 && xhr.status <= 299) {\r\n                this._status = LoaderStatus.kBuffering;\r\n\r\n                let msstream = xhr.response;\r\n                this._reader.readAsArrayBuffer(msstream);\r\n            }\r\n        }\r\n    }\r\n\r\n    _xhrOnError(e) {\r\n        this._status = LoaderStatus.kError;\r\n        let type = LoaderErrors.EXCEPTION;\r\n        let info = {code: -1, msg: e.constructor.name + ' ' + e.type};\r\n\r\n        if (this._onError) {\r\n            this._onError(type, info);\r\n        } else {\r\n            throw new RuntimeException(info.msg);\r\n        }\r\n    }\r\n\r\n    _msrOnProgress(e) {\r\n        let reader = e.target;\r\n        let bigbuffer = reader.result;\r\n        if (bigbuffer == null) {  // result may be null, workaround for buggy M$\r\n            this._doReconnectIfNeeded();\r\n            return;\r\n        }\r\n\r\n        let slice = bigbuffer.slice(this._lastTimeBufferSize);\r\n        this._lastTimeBufferSize = bigbuffer.byteLength;\r\n        let byteStart = this._totalRange.from + this._receivedLength;\r\n        this._receivedLength += slice.byteLength;\r\n\r\n        if (this._onDataArrival) {\r\n            this._onDataArrival(slice, byteStart, this._receivedLength);\r\n        }\r\n\r\n        if (bigbuffer.byteLength >= this._bufferLimit) {\r\n            Log.v(this.TAG, `MSStream buffer exceeded max size near ${byteStart + slice.byteLength}, reconnecting...`);\r\n            this._doReconnectIfNeeded();\r\n        }\r\n    }\r\n\r\n    _doReconnectIfNeeded() {\r\n        if (this._contentLength == null || this._receivedLength < this._contentLength) {\r\n            this._isReconnecting = true;\r\n            this._lastTimeBufferSize = 0;\r\n            this._internalAbort();\r\n\r\n            let range = {\r\n                from: this._totalRange.from + this._receivedLength,\r\n                to: -1\r\n            };\r\n            this._internalOpen(this._dataSource, range, true);\r\n        }\r\n    }\r\n\r\n    _msrOnLoad(e) {  // actually it is onComplete event\r\n        this._status = LoaderStatus.kComplete;\r\n        if (this._onComplete) {\r\n            this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);\r\n        }\r\n    }\r\n\r\n    _msrOnError(e) {\r\n        this._status = LoaderStatus.kError;\r\n        let type = 0;\r\n        let info = null;\r\n\r\n        if (this._contentLength && this._receivedLength < this._contentLength) {\r\n            type = LoaderErrors.EARLY_EOF;\r\n            info = {code: -1, msg: 'MSStream meet Early-Eof'};\r\n        } else {\r\n            type = LoaderErrors.EARLY_EOF;\r\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\r\n        }\r\n\r\n        if (this._onError) {\r\n            this._onError(type, info);\r\n        } else {\r\n            throw new RuntimeException(info.msg);\r\n        }\r\n    }\r\n}\r\n\r\nexport default MSStreamLoader;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport SpeedSampler from './speed-sampler.js';\r\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\r\nimport {RuntimeException} from '../utils/exception.js';\r\n\r\n// Universal IO Loader, implemented by adding Range header in xhr's request header\r\nclass RangeLoader extends BaseLoader {\r\n\r\n    static isSupported() {\r\n        try {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'https://example.com', true);\r\n            xhr.responseType = 'arraybuffer';\r\n            return (xhr.responseType === 'arraybuffer');\r\n        } catch (e) {\r\n            Log.w('RangeLoader', e.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    constructor(seekHandler, config) {\r\n        super('xhr-range-loader');\r\n        this.TAG = 'RangeLoader';\r\n\r\n        this._seekHandler = seekHandler;\r\n        this._config = config;\r\n        this._needStash = false;\r\n\r\n        this._chunkSizeKBList = [\r\n            128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192\r\n        ];\r\n        this._currentChunkSizeKB = 384;\r\n        this._currentSpeedNormalized = 0;\r\n        this._zeroSpeedChunkCount = 0;\r\n\r\n        this._xhr = null;\r\n        this._speedSampler = new SpeedSampler();\r\n\r\n        this._requestAbort = false;\r\n        this._waitForTotalLength = false;\r\n        this._totalLengthReceived = false;\r\n\r\n        this._currentRequestURL = null;\r\n        this._currentRedirectedURL = null;\r\n        this._currentRequestRange = null;\r\n        this._totalLength = null;  // size of the entire file\r\n        this._contentLength = null;  // Content-Length of entire request range\r\n        this._receivedLength = 0;  // total received bytes\r\n        this._lastTimeLoaded = 0;  // received bytes of current request sub-range\r\n    }\r\n\r\n    destroy() {\r\n        if (this.isWorking()) {\r\n            this.abort();\r\n        }\r\n        if (this._xhr) {\r\n            this._xhr.onreadystatechange = null;\r\n            this._xhr.onprogress = null;\r\n            this._xhr.onload = null;\r\n            this._xhr.onerror = null;\r\n            this._xhr = null;\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    get currentSpeed() {\r\n        return this._speedSampler.lastSecondKBps;\r\n    }\r\n\r\n    open(dataSource, range) {\r\n        this._dataSource = dataSource;\r\n        this._range = range;\r\n        this._status = LoaderStatus.kConnecting;\r\n\r\n        let useRefTotalLength = false;\r\n        if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {\r\n            useRefTotalLength = true;\r\n            this._totalLength = this._dataSource.filesize;\r\n        }\r\n\r\n        if (!this._totalLengthReceived && !useRefTotalLength) {\r\n            // We need total filesize\r\n            this._waitForTotalLength = true;\r\n            this._internalOpen(this._dataSource, {from: 0, to: -1});\r\n        } else {\r\n            // We have filesize, start loading\r\n            this._openSubRange();\r\n        }\r\n    }\r\n\r\n    _openSubRange() {\r\n        let chunkSize = this._currentChunkSizeKB * 1024;\r\n\r\n        let from = this._range.from + this._receivedLength;\r\n        let to = from + chunkSize;\r\n\r\n        if (this._contentLength != null) {\r\n            if (to - this._range.from >= this._contentLength) {\r\n                to = this._range.from + this._contentLength - 1;\r\n            }\r\n        }\r\n\r\n        this._currentRequestRange = {from, to};\r\n        this._internalOpen(this._dataSource, this._currentRequestRange);\r\n    }\r\n\r\n    _internalOpen(dataSource, range) {\r\n        this._lastTimeLoaded = 0;\r\n\r\n        let sourceURL = dataSource.url;\r\n        if (this._config.reuseRedirectedURL) {\r\n            if (this._currentRedirectedURL != undefined) {\r\n                sourceURL = this._currentRedirectedURL;\r\n            } else if (dataSource.redirectedURL != undefined) {\r\n                sourceURL = dataSource.redirectedURL;\r\n            }\r\n        }\r\n\r\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\r\n        this._currentRequestURL = seekConfig.url;\r\n\r\n        let xhr = this._xhr = new XMLHttpRequest();\r\n        xhr.open('GET', seekConfig.url, true);\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\r\n        xhr.onprogress = this._onProgress.bind(this);\r\n        xhr.onload = this._onLoad.bind(this);\r\n        xhr.onerror = this._onXhrError.bind(this);\r\n\r\n        if (dataSource.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        if (typeof seekConfig.headers === 'object') {\r\n            let headers = seekConfig.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // add additional headers\r\n        if (typeof this._config.headers === 'object') {\r\n            let headers = this._config.headers;\r\n\r\n            for (let key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    abort() {\r\n        this._requestAbort = true;\r\n        this._internalAbort();\r\n        this._status = LoaderStatus.kComplete;\r\n    }\r\n\r\n    _internalAbort() {\r\n        if (this._xhr) {\r\n            this._xhr.onreadystatechange = null;\r\n            this._xhr.onprogress = null;\r\n            this._xhr.onload = null;\r\n            this._xhr.onerror = null;\r\n            this._xhr.abort();\r\n            this._xhr = null;\r\n        }\r\n    }\r\n\r\n    _onReadyStateChange(e) {\r\n        let xhr = e.target;\r\n\r\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\r\n            if (xhr.responseURL != undefined) {  // if the browser support this property\r\n                let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\r\n                if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\r\n                    this._currentRedirectedURL = redirectedURL;\r\n                    if (this._onURLRedirect) {\r\n                        this._onURLRedirect(redirectedURL);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((xhr.status >= 200 && xhr.status <= 299)) {\r\n                if (this._waitForTotalLength) {\r\n                    return;\r\n                }\r\n                this._status = LoaderStatus.kBuffering;\r\n            } else {\r\n                this._status = LoaderStatus.kError;\r\n                if (this._onError) {\r\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\r\n                } else {\r\n                    throw new RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _onProgress(e) {\r\n        if (this._status === LoaderStatus.kError) {\r\n            // Ignore error response\r\n            return;\r\n        }\r\n\r\n        if (this._contentLength === null) {\r\n            let openNextRange = false;\r\n\r\n            if (this._waitForTotalLength) {\r\n                this._waitForTotalLength = false;\r\n                this._totalLengthReceived = true;\r\n                openNextRange = true;\r\n\r\n                let total = e.total;\r\n                this._internalAbort();\r\n                if (total != null & total !== 0) {\r\n                    this._totalLength = total;\r\n                }\r\n            }\r\n\r\n            // calculate currrent request range's contentLength\r\n            if (this._range.to === -1) {\r\n                this._contentLength = this._totalLength - this._range.from;\r\n            } else {  // to !== -1\r\n                this._contentLength = this._range.to - this._range.from + 1;\r\n            }\r\n\r\n            if (openNextRange) {\r\n                this._openSubRange();\r\n                return;\r\n            }\r\n            if (this._onContentLengthKnown) {\r\n                this._onContentLengthKnown(this._contentLength);\r\n            }\r\n        }\r\n\r\n        let delta = e.loaded - this._lastTimeLoaded;\r\n        this._lastTimeLoaded = e.loaded;\r\n        this._speedSampler.addBytes(delta);\r\n    }\r\n\r\n    _normalizeSpeed(input) {\r\n        let list = this._chunkSizeKBList;\r\n        let last = list.length - 1;\r\n        let mid = 0;\r\n        let lbound = 0;\r\n        let ubound = last;\r\n\r\n        if (input < list[0]) {\r\n            return list[0];\r\n        }\r\n\r\n        while (lbound <= ubound) {\r\n            mid = lbound + Math.floor((ubound - lbound) / 2);\r\n            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {\r\n                return list[mid];\r\n            } else if (list[mid] < input) {\r\n                lbound = mid + 1;\r\n            } else {\r\n                ubound = mid - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    _onLoad(e) {\r\n        if (this._status === LoaderStatus.kError) {\r\n            // Ignore error response\r\n            return;\r\n        }\r\n\r\n        if (this._waitForTotalLength) {\r\n            this._waitForTotalLength = false;\r\n            return;\r\n        }\r\n\r\n        this._lastTimeLoaded = 0;\r\n        let KBps = this._speedSampler.lastSecondKBps;\r\n        if (KBps === 0) {\r\n            this._zeroSpeedChunkCount++;\r\n            if (this._zeroSpeedChunkCount >= 3) {\r\n                // Try get currentKBps after 3 chunks\r\n                KBps = this._speedSampler.currentKBps;\r\n            }\r\n        }\r\n\r\n        if (KBps !== 0) {\r\n            let normalized = this._normalizeSpeed(KBps);\r\n            if (this._currentSpeedNormalized !== normalized) {\r\n                this._currentSpeedNormalized = normalized;\r\n                this._currentChunkSizeKB = normalized;\r\n            }\r\n        }\r\n\r\n        let chunk = e.target.response;\r\n        let byteStart = this._range.from + this._receivedLength;\r\n        this._receivedLength += chunk.byteLength;\r\n\r\n        let reportComplete = false;\r\n\r\n        if (this._contentLength != null && this._receivedLength < this._contentLength) {\r\n            // continue load next chunk\r\n            this._openSubRange();\r\n        } else {\r\n            reportComplete = true;\r\n        }\r\n\r\n        // dispatch received chunk\r\n        if (this._onDataArrival) {\r\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\r\n        }\r\n\r\n        if (reportComplete) {\r\n            this._status = LoaderStatus.kComplete;\r\n            if (this._onComplete) {\r\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    _onXhrError(e) {\r\n        this._status = LoaderStatus.kError;\r\n        let type = 0;\r\n        let info = null;\r\n\r\n        if (this._contentLength && this._receivedLength > 0\r\n                                && this._receivedLength < this._contentLength) {\r\n            type = LoaderErrors.EARLY_EOF;\r\n            info = {code: -1, msg: 'RangeLoader meet Early-Eof'};\r\n        } else {\r\n            type = LoaderErrors.EXCEPTION;\r\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\r\n        }\r\n\r\n        if (this._onError) {\r\n            this._onError(type, info);\r\n        } else {\r\n            throw new RuntimeException(info.msg);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default RangeLoader;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Log from '../utils/logger.js';\r\nimport Browser from '../utils/browser.js';\r\nimport PlayerEvents from './player-events.js';\r\nimport Transmuxer from '../core/transmuxer.js';\r\nimport TransmuxingEvents from '../core/transmuxing-events.js';\r\nimport MSEController from '../core/mse-controller.js';\r\nimport MSEEvents from '../core/mse-events.js';\r\nimport {ErrorTypes, ErrorDetails} from './player-errors.js';\r\nimport {createDefaultConfig} from '../config.js';\r\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\r\n\r\nclass FlvPlayer {\r\n\r\n    constructor(mediaDataSource, config) {\r\n        this.TAG = 'FlvPlayer';\r\n        this._type = 'FlvPlayer';\r\n        this._emitter = new EventEmitter();\r\n\r\n        this._config = createDefaultConfig();\r\n        if (typeof config === 'object') {\r\n            Object.assign(this._config, config);\r\n        }\r\n\r\n        if (mediaDataSource.type.toLowerCase() !== 'flv') {\r\n            throw new InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');\r\n        }\r\n\r\n        if (mediaDataSource.isLive === true) {\r\n            this._config.isLive = true;\r\n        }\r\n\r\n        this.e = {\r\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\r\n            onvSeeking: this._onvSeeking.bind(this),\r\n            onvCanPlay: this._onvCanPlay.bind(this),\r\n            onvStalled: this._onvStalled.bind(this),\r\n            onvProgress: this._onvProgress.bind(this)\r\n        };\r\n\r\n        if (self.performance && self.performance.now) {\r\n            this._now = self.performance.now.bind(self.performance);\r\n        } else {\r\n            this._now = Date.now;\r\n        }\r\n\r\n        this._pendingSeekTime = null;  // in seconds\r\n        this._requestSetTime = false;\r\n        this._seekpointRecord = null;\r\n        this._progressChecker = null;\r\n\r\n        this._mediaDataSource = mediaDataSource;\r\n        this._mediaElement = null;\r\n        this._msectl = null;\r\n        this._transmuxer = null;\r\n\r\n        this._mseSourceOpened = false;\r\n        this._hasPendingLoad = false;\r\n        this._receivedCanPlay = false;\r\n\r\n        this._mediaInfo = null;\r\n        this._statisticsInfo = null;\r\n\r\n        let chromeNeedIDRFix = (Browser.chrome &&\r\n                               (Browser.version.major < 50 ||\r\n                               (Browser.version.major === 50 && Browser.version.build < 2661)));\r\n        this._alwaysSeekKeyframe = (chromeNeedIDRFix || Browser.msedge || Browser.msie) ? true : false;\r\n\r\n        if (this._alwaysSeekKeyframe) {\r\n            this._config.accurateSeek = false;\r\n        }\r\n\r\n\r\n        this._videoStateMonitorInterval = this._config.videoStateMonitorInterval;\r\n        // for duration monitor\r\n        this._enableDurationMonitor = this._config.enableDurationMonitor;\r\n        this._maxDurationGap = this._config.maxDurationGap;\r\n        this._decreaseDurationStep = this._config.decreaseDurationStep;\r\n        this._durationMonitor = null;\r\n        // for video frozen monitor\r\n        this._enableVideoFrozenMonitor = this._config.enableVideoFrozenMonitor;\r\n        this._frozenTimesThreshold = this._config.frozenTimesThreshold;\r\n        this._forzenTimes = 0;\r\n        this._lastDecodedFrames = 0;\r\n\r\n        //每 M 秒计算一下延迟追赶发生的次数\r\n        // >= N次，认为调整次数太频繁，_maxDurationGap一次性增加 K 秒\r\n        // 0~N次，发生追赶，但不算频繁，_maxDurationGap少量增加 P 秒\r\n        // == 0次，认为拉流数据较为平滑，未发生追赶，_maxDurationGap下调 P 秒\r\n        // M,N,K,P为可配参数，K建议大一点，P建议小一点\r\n        this._latencyDetectInterval = this._config.latencyDetectInterval;   //M, 毫秒\r\n        this._latencyDetectThreshold = this._config.latencyDetectThreshold; //N\r\n        this._latencyDetectIncreaseStep = this._config.latencyDetectIncreaseStep;   //K\r\n        this._latencyDetectAdjustStep = this._config.latencyDetectAdjustStep;   //P \r\n        this._latencyDetectAdjustFactor = this._config.latencyDetectAdjustFactor;  //增加 P 秒的时间间隔因子，即多少个_latencyDetectInterval才触发一次上调\r\n\r\n        this._latencyDetectTimer = null;\r\n        this._latencyAdjustCount = 0;\r\n        this._latencyAdjustFactor = 0;\r\n    }\r\n\r\n    destroy() {\r\n        if (this._progressChecker != null) {\r\n            window.clearInterval(this._progressChecker);\r\n            this._progressChecker = null;\r\n        }\r\n        if (this._transmuxer) {\r\n            this.unload();\r\n        }\r\n        if (this._mediaElement) {\r\n            this.detachMediaElement();\r\n        }\r\n        this.e = null;\r\n        this._mediaDataSource = null;\r\n\r\n        if (this._emitter) {\r\n            this._emitter.removeAllListeners();\r\n            this._emitter = null;\r\n        }\r\n    }\r\n\r\n    on(event, listener) {\r\n        if (event === PlayerEvents.MEDIA_INFO) {\r\n            if (this._mediaInfo != null) {\r\n                Promise.resolve().then(() => {\r\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\r\n                });\r\n            }\r\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\r\n            if (this._statisticsInfo != null) {\r\n                Promise.resolve().then(() => {\r\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\r\n                });\r\n            }\r\n        }\r\n        this._emitter.addListener(event, listener);\r\n    }\r\n\r\n    off(event, listener) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    attachMediaElement(mediaElement) {\r\n        this._mediaElement = mediaElement;\r\n\r\n        //see more events of video element from https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\r\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\r\n        mediaElement.addEventListener('seeking', this.e.onvSeeking);\r\n        mediaElement.addEventListener('canplay', this.e.onvCanPlay);\r\n        mediaElement.addEventListener('stalled', this.e.onvStalled);\r\n        mediaElement.addEventListener('progress', this.e.onvProgress);\r\n\r\n        this._msectl = new MSEController(this._config);\r\n\r\n        this._msectl.on(MSEEvents.UPDATE_END, this._onmseUpdateEnd.bind(this));\r\n        this._msectl.on(MSEEvents.BUFFER_FULL, this._onmseBufferFull.bind(this));\r\n        this._msectl.on(MSEEvents.SOURCE_OPEN, () => {\r\n            this._mseSourceOpened = true;\r\n            if (this._hasPendingLoad) {\r\n                this._hasPendingLoad = false;\r\n                this.load();\r\n            }\r\n        });\r\n        this._msectl.on(MSEEvents.SOURCE_END, () => {\r\n            this._emitter.emit(PlayerEvents.MEDIA_SOURCE_ENDED);\r\n        });\r\n        this._msectl.on(MSEEvents.SOURCE_CLOSE, () => {\r\n            this._mseSourceOpened = false;\r\n            this._emitter.emit(PlayerEvents.MEDIA_SOURCE_CLOSE);\r\n        });\r\n        this._msectl.on(MSEEvents.ERROR, (info) => {\r\n            this._emitter.emit(PlayerEvents.ERROR,\r\n                               ErrorTypes.MEDIA_ERROR,\r\n                               ErrorDetails.MEDIA_MSE_ERROR,\r\n                               info\r\n            );\r\n        });\r\n\r\n        this._msectl.attachMediaElement(mediaElement);\r\n\r\n        if (this._pendingSeekTime != null) {\r\n            try {\r\n                mediaElement.currentTime = this._pendingSeekTime;\r\n                this._pendingSeekTime = null;\r\n            } catch (e) {\r\n                // IE11 may throw InvalidStateError if readyState === 0\r\n                // We can defer set currentTime operation after loadedmetadata\r\n            }\r\n        }\r\n    }\r\n\r\n    detachMediaElement() {\r\n        if (this._mediaElement) {\r\n            this._msectl.detachMediaElement();\r\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\r\n            this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\r\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\r\n            this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\r\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\r\n            this._mediaElement = null;\r\n        }\r\n        if (this._msectl) {\r\n            this._msectl.destroy();\r\n            this._msectl = null;\r\n        }\r\n    }\r\n\r\n    load() {\r\n        if (!this._mediaElement) {\r\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\r\n        }\r\n        if (this._transmuxer) {\r\n            throw new IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');\r\n        }\r\n        if (this._hasPendingLoad) {\r\n            return;\r\n        }\r\n\r\n        if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\r\n            this._hasPendingLoad = true;\r\n            return;\r\n        }\r\n\r\n        if (this._mediaElement.readyState > 0) {\r\n            this._requestSetTime = true;\r\n            // IE11 may throw InvalidStateError if readyState === 0\r\n            this._mediaElement.currentTime = 0;\r\n        }\r\n\r\n        if (this._enableDurationMonitor && (this._durationMonitor == null)) {\r\n            this._durationMonitor = self.setInterval(this._doDurationMonitor.bind(this), this._videoStateMonitorInterval);\r\n            this._forzenTimes = 0;\r\n            this._lastDecodedFrames = 0;\r\n\r\n            this._latencyDetectTimer = self.setInterval(this._adjustDurationGap.bind(this), this._latencyDetectInterval);\r\n        }\r\n\r\n        this._transmuxer = new Transmuxer(this._mediaDataSource, this._config);\r\n\r\n        this._transmuxer.on(TransmuxingEvents.INIT_SEGMENT, (type, is) => {\r\n            this._msectl.appendInitSegment(is);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.MEDIA_SEGMENT, (type, ms) => {\r\n            this._msectl.appendMediaSegment(ms);\r\n\r\n            // lazyLoad check\r\n            if (this._config.lazyLoad && !this._config.isLive) {\r\n                let currentTime = this._mediaElement.currentTime;\r\n                if (ms.info.endDts >= (currentTime + this._config.lazyLoadMaxDuration) * 1000) {\r\n                    if (this._progressChecker == null) {\r\n                        Log.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\r\n                        this._suspendTransmuxer();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.LOADING_COMPLETE, () => {\r\n            this._msectl.endOfStream();\r\n            this._emitter.emit(PlayerEvents.LOADING_COMPLETE);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.RECOVERED_EARLY_EOF, () => {\r\n            this._emitter.emit(PlayerEvents.RECOVERED_EARLY_EOF);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.IO_ERROR, (detail, info) => {\r\n            this._emitter.emit(PlayerEvents.ERROR, ErrorTypes.NETWORK_ERROR, detail, info);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.DEMUX_ERROR, (detail, info) => {\r\n            this._emitter.emit(PlayerEvents.ERROR, ErrorTypes.MEDIA_ERROR, detail, {code: -1, msg: info});\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.MEDIA_INFO, (mediaInfo) => {\r\n            this._mediaInfo = mediaInfo;\r\n            this._emitter.emit(PlayerEvents.MEDIA_INFO, Object.assign({}, mediaInfo));\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.METADATA_ARRIVED, (metadata) => {\r\n            this._emitter.emit(PlayerEvents.METADATA_ARRIVED, metadata);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, (data) => {\r\n            this._emitter.emit(PlayerEvents.SCRIPTDATA_ARRIVED, data);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.STATISTICS_INFO, (statInfo) => {\r\n            this._statisticsInfo = this._fillStatisticsInfo(statInfo);\r\n            this._emitter.emit(PlayerEvents.STATISTICS_INFO, Object.assign({}, this._statisticsInfo));\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, (milliseconds) => {\r\n            if (this._mediaElement && !this._config.accurateSeek) {\r\n                this._requestSetTime = true;\r\n                this._mediaElement.currentTime = milliseconds / 1000;\r\n            }\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.VIDEO_RESOLUTION_CHANGED, (video_info) => {\r\n            this._emitter.emit(PlayerEvents.VIDEO_RESOLUTION_CHANGED, video_info);\r\n        });\r\n        this._transmuxer.on(TransmuxingEvents.DEMUX_MSG, (metadata) => {\r\n            this._emitter.emit(PlayerEvents.DEMUX_MSG, metadata);\r\n        });\r\n\r\n        this._transmuxer.open();\r\n    }\r\n\r\n    unload() {\r\n        if (this._mediaElement) {\r\n            this._mediaElement.pause();\r\n        }\r\n        if (this._msectl) {\r\n            this._msectl.seek(0);\r\n        }\r\n        if (this._transmuxer) {\r\n            this._transmuxer.close();\r\n            this._transmuxer.destroy();\r\n            this._transmuxer = null;\r\n        }\r\n\r\n        if (this._durationMonitor) {\r\n            self.clearInterval(this._durationMonitor);\r\n            this._durationMonitor = null;\r\n        }\r\n\r\n        if (this._latencyDetectTimer) {\r\n            self.clearInterval(this._latencyDetectTimer);\r\n            this._latencyDetectTimer = null;\r\n            this._latencyAdjustCount = 0;\r\n        }\r\n\r\n        this._forzenTimes = 0;\r\n        this._lastDecodedFrames = 0;\r\n    }\r\n\r\n    play() {\r\n        return this._mediaElement.play();\r\n    }\r\n\r\n    pause() {\r\n        this._mediaElement.pause();\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get buffered() {\r\n        return this._mediaElement.buffered;\r\n    }\r\n\r\n    get duration() {\r\n        return this._mediaElement.duration;\r\n    }\r\n\r\n    get volume() {\r\n        return this._mediaElement.volume;\r\n    }\r\n\r\n    set volume(value) {\r\n        this._mediaElement.volume = value;\r\n    }\r\n\r\n    get muted() {\r\n        return this._mediaElement.muted;\r\n    }\r\n\r\n    set muted(muted) {\r\n        this._mediaElement.muted = muted;\r\n    }\r\n\r\n    get currentTime() {\r\n        if (this._mediaElement) {\r\n            return this._mediaElement.currentTime;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    set currentTime(seconds) {\r\n        if (this._mediaElement) {\r\n            this._internalSeek(seconds);\r\n        } else {\r\n            this._pendingSeekTime = seconds;\r\n        }\r\n    }\r\n\r\n    get mediaInfo() {\r\n        return Object.assign({}, this._mediaInfo);\r\n    }\r\n\r\n    get statisticsInfo() {\r\n        if (this._statisticsInfo == null) {\r\n            this._statisticsInfo = {};\r\n        }\r\n        this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\r\n        return Object.assign({}, this._statisticsInfo);\r\n    }\r\n\r\n    _fillStatisticsInfo(statInfo) {\r\n        statInfo.playerType = this._type;\r\n\r\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\r\n            return statInfo;\r\n        }\r\n\r\n        let hasQualityInfo = true;\r\n        let decoded = 0;\r\n        let dropped = 0;\r\n\r\n        if (this._mediaElement.getVideoPlaybackQuality) {\r\n            let quality = this._mediaElement.getVideoPlaybackQuality();\r\n            decoded = quality.totalVideoFrames;\r\n            dropped = quality.droppedVideoFrames;\r\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\r\n            decoded = this._mediaElement.webkitDecodedFrameCount;\r\n            dropped = this._mediaElement.webkitDroppedFrameCount;\r\n        } else {\r\n            hasQualityInfo = false;\r\n        }\r\n\r\n        if (hasQualityInfo) {\r\n            statInfo.decodedFrames = decoded;\r\n            statInfo.droppedFrames = dropped;\r\n        }\r\n\r\n        return statInfo;\r\n    }\r\n\r\n    enableVideoStateMonitor(enabled) {\r\n        this._enableDurationMonitor = enabled;\r\n        this._enableVideoFrozenMonitor = enabled;\r\n    }\r\n    _increaseLatencyAdjust(second) {\r\n        this._maxDurationGap += second;\r\n        Log.d(this.TAG, '+' + this._maxDurationGap);\r\n    }\r\n\r\n    _decreaseLatencyAdjust(second) {\r\n        this._maxDurationGap -= second;\r\n        if (this._maxDurationGap < this._config.maxDurationGap) {\r\n            this._maxDurationGap = this._config.maxDurationGap;\r\n        }\r\n        Log.d(this.TAG, '-' + this._maxDurationGap);\r\n    }\r\n\r\n    _adjustDurationGap() {\r\n        if (this._latencyAdjustCount >= this._latencyDetectThreshold) {\r\n            this._increaseLatencyAdjust(this._latencyDetectIncreaseStep);\r\n        } else if (this._latencyAdjustCount == 0) {\r\n            ++this._latencyAdjustFactor;\r\n            if (this._latencyAdjustFactor >= this._latencyDetectAdjustFactor) {\r\n                this._latencyAdjustFactor = 0;\r\n                this._decreaseLatencyAdjust(this._latencyDetectAdjustStep);\r\n            }\r\n        }\r\n        this._latencyAdjustCount = 0;\r\n    }\r\n\r\n    _doDurationMonitor() {\r\n\r\n        // Log.d(this.TAG, '_doDurationMonitor, decoded_frames:' + decoded_frames);\r\n        if (!this._enableDurationMonitor || !this._mseSourceOpened) {\r\n            return;\r\n        }\r\n\r\n        if (this._msectl && this._msectl.checkSourceBufferNull()) {\r\n            return; \r\n        }\r\n\r\n        let buffered = this._mediaElement.buffered;\r\n        let currentTime = this._mediaElement.currentTime;\r\n        let isPaused = this._mediaElement.paused;\r\n\r\n        if (buffered == null || buffered.length == 0) {\r\n            return;\r\n        }\r\n\r\n        let buffer_end = buffered.end(0);\r\n        let current_play_delta = buffer_end - currentTime;\r\n\r\n        // check duration\r\n        if (!isPaused && current_play_delta > this._maxDurationGap) {\r\n            //当前播放点与缓冲区末尾相差超过阈值，追赶\r\n            let newGap = buffer_end - this._decreaseDurationStep;\r\n            Log.w(this.TAG, 'large duration {' + current_play_delta \r\n                + '}, reduce ' + this._decreaseDurationStep + ' and set to ' + newGap);\r\n            this._mediaElement.currentTime = newGap;\r\n            this._requestSetTime = true;\r\n\r\n            ++this._latencyAdjustCount;\r\n            this._increaseLatencyAdjust(this._latencyDetectAdjustStep);    //立刻上调一点\r\n        }\r\n\r\n        // check video frozen or not\r\n        if (this._enableVideoFrozenMonitor) {\r\n\r\n            // get current decoded frames count\r\n            let decoded_frames = 0;\r\n            if (this._mediaElement.getVideoPlaybackQuality) {\r\n                let quality = this._mediaElement.getVideoPlaybackQuality();\r\n                decoded_frames = quality.totalVideoFrames;\r\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\r\n                decoded_frames = this._mediaElement.webkitDecodedFrameCount;\r\n            } else {\r\n                // could not get decoded frames count\r\n                return;\r\n            }\r\n            \r\n            if (this._lastDecodedFrames != 0) {\r\n                //check whether video frozen or not\r\n                if (this._lastDecodedFrames == decoded_frames) {\r\n                    this._forzenTimes++;\r\n                    // Log.w(this.TAG, '--== Video decoded frames stop increase, check count:' + this._forzenTimes);\r\n                } else {\r\n                    this._forzenTimes = 0;\r\n                }\r\n            }\r\n            // Log.d(this.TAG, '--== decoded frame {last:' + this._lastDecodedFrames + ', cur:' + decoded_frames + '}');\r\n            this._lastDecodedFrames = decoded_frames;\r\n\r\n            if (this._forzenTimes >= this._frozenTimesThreshold) {\r\n                // equals to threshold, emit VIDEO_FROZEN event\r\n                Log.w(this.TAG, 'Report video frozen event');\r\n                this._emitter.emit(PlayerEvents.VIDEO_FROZEN);\r\n                this._forzenTimes = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    _onmseUpdateEnd() {\r\n        if (!this._config.lazyLoad || this._config.isLive) {\r\n            return;\r\n        }\r\n\r\n        let buffered = this._mediaElement.buffered;\r\n        let currentTime = this._mediaElement.currentTime;\r\n        let currentRangeStart = 0;\r\n        let currentRangeEnd = 0;\r\n\r\n        for (let i = 0; i < buffered.length; i++) {\r\n            let start = buffered.start(i);\r\n            let end = buffered.end(i);\r\n            if (start <= currentTime && currentTime < end) {\r\n                currentRangeStart = start;\r\n                currentRangeEnd = end;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {\r\n            Log.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\r\n            this._suspendTransmuxer();\r\n        }\r\n    }\r\n\r\n    _onmseBufferFull() {\r\n        Log.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');\r\n        if (this._progressChecker == null) {\r\n            this._suspendTransmuxer();\r\n        }\r\n        this._emitter.emit(PlayerEvents.MS_BUFFER_FULL);\r\n    }\r\n\r\n    _suspendTransmuxer() {\r\n        if (this._transmuxer) {\r\n            this._transmuxer.pause();\r\n\r\n            if (this._progressChecker == null) {\r\n                this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkProgressAndResume() {\r\n        let currentTime = this._mediaElement.currentTime;\r\n        let buffered = this._mediaElement.buffered;\r\n\r\n        let needResume = false;\r\n\r\n        for (let i = 0; i < buffered.length; i++) {\r\n            let from = buffered.start(i);\r\n            let to = buffered.end(i);\r\n            if (currentTime >= from && currentTime < to) {\r\n                if (currentTime >= to - this._config.lazyLoadRecoverDuration) {\r\n                    needResume = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (needResume) {\r\n            window.clearInterval(this._progressChecker);\r\n            this._progressChecker = null;\r\n            if (needResume) {\r\n                Log.v(this.TAG, 'Continue loading from paused position');\r\n                this._transmuxer.resume();\r\n            }\r\n        }\r\n    }\r\n\r\n    _isTimepointBuffered(seconds) {\r\n        let buffered = this._mediaElement.buffered;\r\n\r\n        for (let i = 0; i < buffered.length; i++) {\r\n            let from = buffered.start(i);\r\n            let to = buffered.end(i);\r\n            if (seconds >= from && seconds < to) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _internalSeek(seconds) {\r\n        let directSeek = this._isTimepointBuffered(seconds);\r\n\r\n        let directSeekBegin = false;\r\n        let directSeekBeginTime = 0;\r\n\r\n        if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {\r\n            let videoBeginTime = this._mediaElement.buffered.start(0);\r\n            if ((videoBeginTime < 1.0 && seconds < videoBeginTime) || Browser.safari) {\r\n                directSeekBegin = true;\r\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\r\n                directSeekBeginTime = Browser.safari ? 0.1 : videoBeginTime;\r\n            }\r\n        }\r\n\r\n        if (directSeekBegin) {  // seek to video begin, set currentTime directly if beginPTS buffered\r\n            this._requestSetTime = true;\r\n            this._mediaElement.currentTime = directSeekBeginTime;\r\n        }  else if (directSeek) {  // buffered position\r\n            if (!this._alwaysSeekKeyframe) {\r\n                this._requestSetTime = true;\r\n                this._mediaElement.currentTime = seconds;\r\n            } else {\r\n                let idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));\r\n                this._requestSetTime = true;\r\n                if (idr != null) {\r\n                    this._mediaElement.currentTime = idr.dts / 1000;\r\n                } else {\r\n                    this._mediaElement.currentTime = seconds;\r\n                }\r\n            }\r\n            if (this._progressChecker != null) {\r\n                this._checkProgressAndResume();\r\n            }\r\n        } else {\r\n            if (this._progressChecker != null) {\r\n                window.clearInterval(this._progressChecker);\r\n                this._progressChecker = null;\r\n            }\r\n            this._msectl.seek(seconds);\r\n            this._transmuxer.seek(Math.floor(seconds * 1000));  // in milliseconds\r\n            // no need to set mediaElement.currentTime if non-accurateSeek,\r\n            // just wait for the recommend_seekpoint callback\r\n            if (this._config.accurateSeek) {\r\n                this._requestSetTime = true;\r\n                this._mediaElement.currentTime = seconds;\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkAndApplyUnbufferedSeekpoint() {\r\n        if (this._seekpointRecord) {\r\n            if (this._seekpointRecord.recordTime <= this._now() - 100) {\r\n                let target = this._mediaElement.currentTime;\r\n                this._seekpointRecord = null;\r\n                if (!this._isTimepointBuffered(target)) {\r\n                    if (this._progressChecker != null) {\r\n                        window.clearTimeout(this._progressChecker);\r\n                        this._progressChecker = null;\r\n                    }\r\n                    // .currentTime is consists with .buffered timestamp\r\n                    // Chrome/Edge use DTS, while FireFox/Safari use PTS\r\n                    this._msectl.seek(target);\r\n                    this._transmuxer.seek(Math.floor(target * 1000));\r\n                    // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\r\n                    if (this._config.accurateSeek) {\r\n                        this._requestSetTime = true;\r\n                        this._mediaElement.currentTime = target;\r\n                    }\r\n                }\r\n            } else {\r\n                window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkAndResumeStuckPlayback(stalled) {\r\n        let media = this._mediaElement;\r\n        if (stalled || !this._receivedCanPlay || media.readyState < 2) {  // HAVE_CURRENT_DATA\r\n            let buffered = media.buffered;\r\n            if (buffered.length > 0 && media.currentTime < buffered.start(0)) {\r\n                Log.w(this.TAG, `Playback seems stuck at ${media.currentTime}, seek to ${buffered.start(0)}`);\r\n                this._requestSetTime = true;\r\n                this._mediaElement.currentTime = buffered.start(0);\r\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\r\n            }\r\n        } else {\r\n            // Playback didn't stuck, remove progress event listener\r\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\r\n        }\r\n    }\r\n\r\n    _onvLoadedMetadata(e) {\r\n        if (this._pendingSeekTime != null) {\r\n            this._mediaElement.currentTime = this._pendingSeekTime;\r\n            this._pendingSeekTime = null;\r\n        }\r\n    }\r\n\r\n    _onvSeeking(e) {  // handle seeking request from browser's progress bar\r\n        let target = this._mediaElement.currentTime;\r\n        let buffered = this._mediaElement.buffered;\r\n\r\n        if (this._requestSetTime) {\r\n            this._requestSetTime = false;\r\n            return;\r\n        }\r\n\r\n        if (target < 1.0 && buffered.length > 0) {\r\n            // seek to video begin, set currentTime directly if beginPTS buffered\r\n            let videoBeginTime = buffered.start(0);\r\n            if ((videoBeginTime < 1.0 && target < videoBeginTime) || Browser.safari) {\r\n                this._requestSetTime = true;\r\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\r\n                this._mediaElement.currentTime = Browser.safari ? 0.1 : videoBeginTime;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isTimepointBuffered(target)) {\r\n            if (this._alwaysSeekKeyframe) {\r\n                let idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\r\n                if (idr != null) {\r\n                    this._requestSetTime = true;\r\n                    this._mediaElement.currentTime = idr.dts / 1000;\r\n                }\r\n            }\r\n            if (this._progressChecker != null) {\r\n                this._checkProgressAndResume();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._seekpointRecord = {\r\n            seekPoint: target,\r\n            recordTime: this._now()\r\n        };\r\n        window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\r\n    }\r\n\r\n    _onvCanPlay(e) {\r\n        this._receivedCanPlay = true;\r\n        this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\r\n    }\r\n\r\n    _onvStalled(e) {\r\n        this._checkAndResumeStuckPlayback(true);\r\n    }\r\n\r\n    _onvProgress(e) {\r\n        this._checkAndResumeStuckPlayback();\r\n    }\r\n\r\n}\r\n\r\nexport default FlvPlayer;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport PlayerEvents from './player-events.js';\r\nimport {createDefaultConfig} from '../config.js';\r\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\r\n\r\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \r\nclass NativePlayer {\r\n\r\n    constructor(mediaDataSource, config) {\r\n        this.TAG = 'NativePlayer';\r\n        this._type = 'NativePlayer';\r\n        this._emitter = new EventEmitter();\r\n\r\n        this._config = createDefaultConfig();\r\n        if (typeof config === 'object') {\r\n            Object.assign(this._config, config);\r\n        }\r\n\r\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\r\n            throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\r\n        }\r\n        if (mediaDataSource.hasOwnProperty('segments')) {\r\n            throw new InvalidArgumentException(`NativePlayer(${mediaDataSource.type}) doesn't support multipart playback!`);\r\n        }\r\n\r\n        this.e = {\r\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\r\n        };\r\n\r\n        this._pendingSeekTime = null;\r\n        this._statisticsReporter = null;\r\n\r\n        this._mediaDataSource = mediaDataSource;\r\n        this._mediaElement = null;\r\n    }\r\n\r\n    destroy() {\r\n        if (this._mediaElement) {\r\n            this.unload();\r\n            this.detachMediaElement();\r\n        }\r\n        this.e = null;\r\n        this._mediaDataSource = null;\r\n        this._emitter.removeAllListeners();\r\n        this._emitter = null;\r\n    }\r\n\r\n    on(event, listener) {\r\n        if (event === PlayerEvents.MEDIA_INFO) {\r\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {  // HAVE_NOTHING\r\n                Promise.resolve().then(() => {\r\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\r\n                });\r\n            }\r\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\r\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\r\n                Promise.resolve().then(() => {\r\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\r\n                });\r\n            }\r\n        }\r\n        this._emitter.addListener(event, listener);\r\n    }\r\n\r\n    off(event, listener) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    attachMediaElement(mediaElement) {\r\n        this._mediaElement = mediaElement;\r\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\r\n\r\n        if (this._pendingSeekTime != null) {\r\n            try {\r\n                mediaElement.currentTime = this._pendingSeekTime;\r\n                this._pendingSeekTime = null;\r\n            } catch (e) {\r\n                // IE11 may throw InvalidStateError if readyState === 0\r\n                // Defer set currentTime operation after loadedmetadata\r\n            }\r\n        }\r\n    }\r\n\r\n    detachMediaElement() {\r\n        if (this._mediaElement) {\r\n            this._mediaElement.src = '';\r\n            this._mediaElement.removeAttribute('src');\r\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\r\n            this._mediaElement = null;\r\n        }\r\n        if (this._statisticsReporter != null) {\r\n            window.clearInterval(this._statisticsReporter);\r\n            this._statisticsReporter = null;\r\n        }\r\n    }\r\n\r\n    load() {\r\n        if (!this._mediaElement) {\r\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\r\n        }\r\n        this._mediaElement.src = this._mediaDataSource.url;\r\n\r\n        if (this._mediaElement.readyState > 0) {\r\n            this._mediaElement.currentTime = 0;\r\n        }\r\n\r\n        this._mediaElement.preload = 'auto';\r\n        this._mediaElement.load();\r\n        this._statisticsReporter = window.setInterval(\r\n            this._reportStatisticsInfo.bind(this),\r\n        this._config.statisticsInfoReportInterval);\r\n    }\r\n\r\n    unload() {\r\n        if (this._mediaElement) {\r\n            this._mediaElement.src = '';\r\n            this._mediaElement.removeAttribute('src');\r\n        }\r\n        if (this._statisticsReporter != null) {\r\n            window.clearInterval(this._statisticsReporter);\r\n            this._statisticsReporter = null;\r\n        }\r\n    }\r\n\r\n    play() {\r\n        return this._mediaElement.play();\r\n    }\r\n\r\n    pause() {\r\n        this._mediaElement.pause();\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get buffered() {\r\n        return this._mediaElement.buffered;\r\n    }\r\n\r\n    get duration() {\r\n        return this._mediaElement.duration;\r\n    }\r\n\r\n    get volume() {\r\n        return this._mediaElement.volume;\r\n    }\r\n\r\n    set volume(value) {\r\n        this._mediaElement.volume = value;\r\n    }\r\n\r\n    get muted() {\r\n        return this._mediaElement.muted;\r\n    }\r\n\r\n    set muted(muted) {\r\n        this._mediaElement.muted = muted;\r\n    }\r\n\r\n    get currentTime() {\r\n        if (this._mediaElement) {\r\n            return this._mediaElement.currentTime;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    set currentTime(seconds) {\r\n        if (this._mediaElement) {\r\n            this._mediaElement.currentTime = seconds;\r\n        } else {\r\n            this._pendingSeekTime = seconds;\r\n        }\r\n    }\r\n\r\n    get mediaInfo() {\r\n        let mediaPrefix = (this._mediaElement instanceof HTMLAudioElement) ? 'audio/' : 'video/';\r\n        let info = {\r\n            mimeType: mediaPrefix + this._mediaDataSource.type\r\n        };\r\n        if (this._mediaElement) {\r\n            info.duration = Math.floor(this._mediaElement.duration * 1000);\r\n            if (this._mediaElement instanceof HTMLVideoElement) {\r\n                info.width = this._mediaElement.videoWidth;\r\n                info.height = this._mediaElement.videoHeight;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n\r\n    get statisticsInfo() {\r\n        let info = {\r\n            playerType: this._type,\r\n            url: this._mediaDataSource.url\r\n        };\r\n\r\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\r\n            return info;\r\n        }\r\n\r\n        let hasQualityInfo = true;\r\n        let decoded = 0;\r\n        let dropped = 0;\r\n\r\n        if (this._mediaElement.getVideoPlaybackQuality) {\r\n            let quality = this._mediaElement.getVideoPlaybackQuality();\r\n            decoded = quality.totalVideoFrames;\r\n            dropped = quality.droppedVideoFrames;\r\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\r\n            decoded = this._mediaElement.webkitDecodedFrameCount;\r\n            dropped = this._mediaElement.webkitDroppedFrameCount;\r\n        } else {\r\n            hasQualityInfo = false;\r\n        }\r\n\r\n        if (hasQualityInfo) {\r\n            info.decodedFrames = decoded;\r\n            info.droppedFrames = dropped;\r\n        }\r\n        \r\n        return info;\r\n    }\r\n\r\n    _onvLoadedMetadata(e) {\r\n        if (this._pendingSeekTime != null) {\r\n            this._mediaElement.currentTime = this._pendingSeekTime;\r\n            this._pendingSeekTime = null;\r\n        }\r\n        this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\r\n    }\r\n\r\n    _reportStatisticsInfo() {\r\n        this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\r\n    }\r\n\r\n}\r\n\r\nexport default NativePlayer;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {LoaderErrors} from '../io/loader.js';\r\nimport DemuxErrors from '../demux/demux-errors.js';\r\n\r\nexport const ErrorTypes = {\r\n    NETWORK_ERROR: 'NetworkError',\r\n    MEDIA_ERROR: 'MediaError',\r\n    OTHER_ERROR: 'OtherError'\r\n};\r\n\r\nexport const ErrorDetails = {\r\n    NETWORK_EXCEPTION: LoaderErrors.EXCEPTION,\r\n    NETWORK_STATUS_CODE_INVALID: LoaderErrors.HTTP_STATUS_CODE_INVALID,\r\n    NETWORK_TIMEOUT: LoaderErrors.CONNECTING_TIMEOUT,\r\n    NETWORK_UNRECOVERABLE_EARLY_EOF: LoaderErrors.UNRECOVERABLE_EARLY_EOF,\r\n\r\n    MEDIA_MSE_ERROR: 'MediaMSEError',\r\n\r\n    MEDIA_FORMAT_ERROR: DemuxErrors.FORMAT_ERROR,\r\n    MEDIA_FORMAT_UNSUPPORTED: DemuxErrors.FORMAT_UNSUPPORTED,\r\n    MEDIA_CODEC_UNSUPPORTED: DemuxErrors.CODEC_UNSUPPORTED\r\n};","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst PlayerEvents = {\r\n    ERROR: 'error',\r\n    LOADING_COMPLETE: 'loading_complete',\r\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\r\n    MEDIA_INFO: 'media_info',\r\n    METADATA_ARRIVED: 'metadata_arrived',\r\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\r\n    STATISTICS_INFO: 'statistics_info',\r\n\r\n    DEMUX_MSG: 'demux_msg',\r\n    VIDEO_RESOLUTION_CHANGED: 'video_resolution_changed',\r\n    MEDIA_SOURCE_ENDED: 'media_source_ended',\r\n    MEDIA_SOURCE_CLOSE: 'media_source_close',\r\n    VIDEO_FROZEN: 'video_decoded_frame_frozen',\r\n    MS_BUFFER_FULL: 'media_source_buffer_full',\r\n};\r\n\r\nexport default PlayerEvents;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass AAC {\r\n\r\n    static getSilentFrame(codec, channelCount) {\r\n        if (codec === 'mp4a.40.2') {\r\n            // handle LC-AAC\r\n            if (channelCount === 1) {\r\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\r\n            } else if (channelCount === 2) {\r\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\r\n            } else if (channelCount === 3) {\r\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\r\n            } else if (channelCount === 4) {\r\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\r\n            } else if (channelCount === 5) {\r\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\r\n            } else if (channelCount === 6) {\r\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\r\n            }\r\n        } else {\r\n            // handle HE-AAC (mp4a.40.5 / mp4a.40.29)\r\n            if (channelCount === 1) {\r\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\r\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\r\n            } else if (channelCount === 2) {\r\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\r\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\r\n            } else if (channelCount === 3) {\r\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\r\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport default AAC;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\r\nclass MP4 {\r\n\r\n    static init() {\r\n        MP4.types = {\r\n            avc1: [], avcC: [], btrt: [], dinf: [],\r\n            dref: [], esds: [], ftyp: [], hdlr: [],\r\n            mdat: [], mdhd: [], mdia: [], mfhd: [],\r\n            minf: [], moof: [], moov: [], mp4a: [],\r\n            mvex: [], mvhd: [], sdtp: [], stbl: [],\r\n            stco: [], stsc: [], stsd: [], stsz: [],\r\n            stts: [], tfdt: [], tfhd: [], traf: [],\r\n            trak: [], trun: [], trex: [], tkhd: [],\r\n            vmhd: [], smhd: [], '.mp3': []\r\n        };\r\n\r\n        for (let name in MP4.types) {\r\n            if (MP4.types.hasOwnProperty(name)) {\r\n                MP4.types[name] = [\r\n                    name.charCodeAt(0),\r\n                    name.charCodeAt(1),\r\n                    name.charCodeAt(2),\r\n                    name.charCodeAt(3)\r\n                ];\r\n            }\r\n        }\r\n\r\n        let constants = MP4.constants = {};\r\n\r\n        constants.FTYP = new Uint8Array([\r\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\r\n            0x0,  0x0,  0x0,  0x1,   // minor_version: 0x01\r\n            0x69, 0x73, 0x6F, 0x6D,  // isom\r\n            0x61, 0x76, 0x63, 0x31   // avc1\r\n        ]);\r\n\r\n        constants.STSD_PREFIX = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x01   // entry_count\r\n        ]);\r\n\r\n        constants.STTS = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00   // entry_count\r\n        ]);\r\n\r\n        constants.STSC = constants.STCO = constants.STTS;\r\n\r\n        constants.STSZ = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // sample_size\r\n            0x00, 0x00, 0x00, 0x00   // sample_count\r\n        ]);\r\n\r\n        constants.HDLR_VIDEO = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\r\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x56, 0x69, 0x64, 0x65,\r\n            0x6F, 0x48, 0x61, 0x6E,\r\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\r\n        ]);\r\n\r\n        constants.HDLR_AUDIO = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\r\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x53, 0x6F, 0x75, 0x6E,\r\n            0x64, 0x48, 0x61, 0x6E,\r\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\r\n        ]);\r\n\r\n        constants.DREF = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x01,  // entry_count\r\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\r\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\r\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\r\n        ]);\r\n\r\n        // Sound media header\r\n        constants.SMHD = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\r\n        ]);\r\n\r\n        // video media header\r\n        constants.VMHD = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\r\n            0x00, 0x00,              // graphicsmode: 2 bytes\r\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\r\n            0x00, 0x00\r\n        ]);\r\n    }\r\n\r\n    // Generate a box\r\n    static box(type) {\r\n        let size = 8;\r\n        let result = null;\r\n        let datas = Array.prototype.slice.call(arguments, 1);\r\n        let arrayCount = datas.length;\r\n\r\n        for (let i = 0; i < arrayCount; i++) {\r\n            size += datas[i].byteLength;\r\n        }\r\n\r\n        result = new Uint8Array(size);\r\n        result[0] = (size >>> 24) & 0xFF;  // size\r\n        result[1] = (size >>> 16) & 0xFF;\r\n        result[2] = (size >>>  8) & 0xFF;\r\n        result[3] = (size) & 0xFF;\r\n\r\n        result.set(type, 4);  // type\r\n\r\n        let offset = 8;\r\n        for (let i = 0; i < arrayCount; i++) {  // data body\r\n            result.set(datas[i], offset);\r\n            offset += datas[i].byteLength;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // emit ftyp & moov\r\n    static generateInitSegment(meta) {\r\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\r\n        let moov = MP4.moov(meta);\r\n\r\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\r\n        result.set(ftyp, 0);\r\n        result.set(moov, ftyp.byteLength);\r\n        return result;\r\n    }\r\n\r\n    // Movie metadata box\r\n    static moov(meta) {\r\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\r\n        let trak = MP4.trak(meta);\r\n        let mvex = MP4.mvex(meta);\r\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\r\n    }\r\n\r\n    // Movie header box\r\n    static mvhd(timescale, duration) {\r\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // creation_time\r\n            0x00, 0x00, 0x00, 0x00,  // modification_time\r\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\r\n            (timescale >>> 16) & 0xFF,\r\n            (timescale >>>  8) & 0xFF,\r\n            (timescale) & 0xFF,\r\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\r\n            (duration >>> 16) & 0xFF,\r\n            (duration >>>  8) & 0xFF,\r\n            (duration) & 0xFF,\r\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\r\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\r\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\r\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\r\n        ]));\r\n    }\r\n\r\n    // Track box\r\n    static trak(meta) {\r\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\r\n    }\r\n\r\n    // Track header box\r\n    static tkhd(meta) {\r\n        let trackId = meta.id, duration = meta.duration;\r\n        let width = meta.presentWidth, height = meta.presentHeight;\r\n\r\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // creation_time\r\n            0x00, 0x00, 0x00, 0x00,  // modification_time\r\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\r\n            (trackId >>> 16) & 0xFF,\r\n            (trackId >>>  8) & 0xFF,\r\n            (trackId) & 0xFF,\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\r\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\r\n            (duration >>> 16) & 0xFF,\r\n            (duration >>>  8) & 0xFF,\r\n            (duration) & 0xFF,\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\r\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\r\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\r\n            (width >>> 8) & 0xFF,    // width and height\r\n            (width) & 0xFF,\r\n            0x00, 0x00,\r\n            (height >>> 8) & 0xFF,\r\n            (height) & 0xFF,\r\n            0x00, 0x00\r\n        ]));\r\n    }\r\n\r\n    // Media Box\r\n    static mdia(meta) {\r\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\r\n    }\r\n\r\n    // Media header box\r\n    static mdhd(meta) {\r\n        let timescale = meta.timescale;\r\n        let duration = meta.duration;\r\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            0x00, 0x00, 0x00, 0x00,  // creation_time\r\n            0x00, 0x00, 0x00, 0x00,  // modification_time\r\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\r\n            (timescale >>> 16) & 0xFF,\r\n            (timescale >>>  8) & 0xFF,\r\n            (timescale) & 0xFF,\r\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\r\n            (duration >>> 16) & 0xFF,\r\n            (duration >>>  8) & 0xFF,\r\n            (duration) & 0xFF,\r\n            0x55, 0xC4,             // language: und (undetermined)\r\n            0x00, 0x00              // pre_defined = 0\r\n        ]));\r\n    }\r\n\r\n    // Media handler reference box\r\n    static hdlr(meta) {\r\n        let data = null;\r\n        if (meta.type === 'audio') {\r\n            data = MP4.constants.HDLR_AUDIO;\r\n        } else {\r\n            data = MP4.constants.HDLR_VIDEO;\r\n        }\r\n        return MP4.box(MP4.types.hdlr, data);\r\n    }\r\n\r\n    // Media infomation box\r\n    static minf(meta) {\r\n        let xmhd = null;\r\n        if (meta.type === 'audio') {\r\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\r\n        } else {\r\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\r\n        }\r\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\r\n    }\r\n\r\n    // Data infomation box\r\n    static dinf() {\r\n        let result = MP4.box(MP4.types.dinf,\r\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\r\n        );\r\n        return result;\r\n    }\r\n\r\n    // Sample table box\r\n    static stbl(meta) {\r\n        let result = MP4.box(MP4.types.stbl,  // type: stbl\r\n            MP4.stsd(meta),  // Sample Description Table\r\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\r\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\r\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\r\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\r\n        ); \r\n        return result; \r\n    }\r\n\r\n    // Sample description box\r\n    static stsd(meta) {\r\n        if (meta.type === 'audio') {\r\n            if (meta.codec === 'mp3') {\r\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\r\n            }\r\n            // else: aac -> mp4a\r\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\r\n        } else {\r\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\r\n        }\r\n    }\r\n\r\n    static mp3(meta) {\r\n        let channelCount = meta.channelCount;\r\n        let sampleRate = meta.audioSampleRate;\r\n\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\r\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, channelCount,      // channelCount(2)\r\n            0x00, 0x10,              // sampleSize(2)\r\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\r\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\r\n            (sampleRate) & 0xFF,\r\n            0x00, 0x00\r\n        ]);\r\n\r\n        return MP4.box(MP4.types['.mp3'], data);\r\n    }\r\n\r\n    static mp4a(meta) {\r\n        let channelCount = meta.channelCount;\r\n        let sampleRate = meta.audioSampleRate;\r\n\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\r\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, channelCount,      // channelCount(2)\r\n            0x00, 0x10,              // sampleSize(2)\r\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\r\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\r\n            (sampleRate) & 0xFF,\r\n            0x00, 0x00\r\n        ]);\r\n\r\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\r\n    }\r\n\r\n    static esds(meta) {\r\n        let config = meta.config || [];\r\n        let configSize = config.length;\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\r\n\r\n            0x03,                    // descriptor_type\r\n            0x17 + configSize,       // length3\r\n            0x00, 0x01,              // es_id\r\n            0x00,                    // stream_priority\r\n\r\n            0x04,                    // descriptor_type\r\n            0x0F + configSize,       // length\r\n            0x40,                    // codec: mpeg4_audio\r\n            0x15,                    // stream_type: Audio\r\n            0x00, 0x00, 0x00,        // buffer_size\r\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\r\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\r\n\r\n            0x05                     // descriptor_type\r\n        ].concat([\r\n            configSize\r\n        ]).concat(\r\n            config\r\n        ).concat([\r\n            0x06, 0x01, 0x02         // GASpecificConfig\r\n        ]));\r\n        return MP4.box(MP4.types.esds, data);\r\n    }\r\n\r\n    static avc1(meta) {\r\n        let avcc = meta.avcc;\r\n        let width = meta.codecWidth, height = meta.codecHeight;\r\n\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\r\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\r\n            0x00, 0x00, 0x00, 0x00,  // pre_defined(2) + reserved(2)\r\n            0x00, 0x00, 0x00, 0x00,  // pre_defined: 3 * 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            (width >>> 8) & 0xFF,    // width: 2 bytes\r\n            (width) & 0xFF,\r\n            (height >>> 8) & 0xFF,   // height: 2 bytes\r\n            (height) & 0xFF,\r\n            0x00, 0x48, 0x00, 0x00,  // horizresolution: 4 bytes\r\n            0x00, 0x48, 0x00, 0x00,  // vertresolution: 4 bytes\r\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\r\n            0x00, 0x01,              // frame_count\r\n            0x0A,                    // strlen\r\n            0x78, 0x71, 0x71, 0x2F,  // compressorname: 32 bytes\r\n            0x66, 0x6C, 0x76, 0x2E,\r\n            0x6A, 0x73, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00,\r\n            0x00, 0x18,              // depth\r\n            0xFF, 0xFF               // pre_defined = -1\r\n        ]);\r\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\r\n    }\r\n\r\n    // Movie Extends box\r\n    static mvex(meta) {\r\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\r\n    }\r\n\r\n    // Track Extends box\r\n    static trex(meta) {\r\n        let trackId = meta.id;\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\r\n            (trackId >>> 24) & 0xFF, // track_ID\r\n            (trackId >>> 16) & 0xFF,\r\n            (trackId >>>  8) & 0xFF,\r\n            (trackId) & 0xFF,\r\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\r\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\r\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\r\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\r\n        ]);\r\n        return MP4.box(MP4.types.trex, data);\r\n    }\r\n\r\n    // Movie fragment box\r\n    static moof(track, baseMediaDecodeTime) {\r\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\r\n    }\r\n\r\n    static mfhd(sequenceNumber) {\r\n        let data = new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,\r\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\r\n            (sequenceNumber >>> 16) & 0xFF,\r\n            (sequenceNumber >>>  8) & 0xFF,\r\n            (sequenceNumber) & 0xFF\r\n        ]);\r\n        return MP4.box(MP4.types.mfhd, data);\r\n    }\r\n\r\n    // Track fragment box\r\n    static traf(track, baseMediaDecodeTime) {\r\n        let trackId = track.id;\r\n\r\n        // Track fragment header box\r\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\r\n            (trackId >>> 24) & 0xFF, // track_ID\r\n            (trackId >>> 16) & 0xFF,\r\n            (trackId >>>  8) & 0xFF,\r\n            (trackId) & 0xFF\r\n        ]));\r\n        // Track Fragment Decode Time\r\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\r\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\r\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\r\n            (baseMediaDecodeTime >>> 16) & 0xFF,\r\n            (baseMediaDecodeTime >>>  8) & 0xFF,\r\n            (baseMediaDecodeTime) & 0xFF\r\n        ]));\r\n        let sdtp = MP4.sdtp(track);\r\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\r\n\r\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\r\n    }\r\n\r\n    // Sample Dependency Type box\r\n    static sdtp(track) {\r\n        let samples = track.samples || [];\r\n        let sampleCount = samples.length;\r\n        let data = new Uint8Array(4 + sampleCount);\r\n        // 0~4 bytes: version(0) & flags\r\n        for (let i = 0; i < sampleCount; i++) {\r\n            let flags = samples[i].flags;\r\n            data[i + 4] = (flags.isLeading << 6)    // is_leading: 2 (bit)\r\n                        | (flags.dependsOn << 4)    // sample_depends_on\r\n                        | (flags.isDependedOn << 2) // sample_is_depended_on\r\n                        | (flags.hasRedundancy);    // sample_has_redundancy\r\n        }\r\n        return MP4.box(MP4.types.sdtp, data);\r\n    }\r\n\r\n    // Track fragment run box\r\n    static trun(track, offset) {\r\n        let samples = track.samples || [];\r\n        let sampleCount = samples.length;\r\n        let dataSize = 12 + 16 * sampleCount;\r\n        let data = new Uint8Array(dataSize);\r\n        offset += 8 + dataSize;\r\n\r\n        data.set([\r\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\r\n            (sampleCount >>> 24) & 0xFF, // sample_count\r\n            (sampleCount >>> 16) & 0xFF,\r\n            (sampleCount >>>  8) & 0xFF,\r\n            (sampleCount) & 0xFF,\r\n            (offset >>> 24) & 0xFF,      // data_offset\r\n            (offset >>> 16) & 0xFF,\r\n            (offset >>>  8) & 0xFF,\r\n            (offset) & 0xFF\r\n        ], 0);\r\n\r\n        for (let i = 0; i < sampleCount; i++) {\r\n            let duration = samples[i].duration;\r\n            let size = samples[i].size;\r\n            let flags = samples[i].flags;\r\n            let cts = samples[i].cts;\r\n            data.set([\r\n                (duration >>> 24) & 0xFF,  // sample_duration\r\n                (duration >>> 16) & 0xFF,\r\n                (duration >>>  8) & 0xFF,\r\n                (duration) & 0xFF,\r\n                (size >>> 24) & 0xFF,      // sample_size\r\n                (size >>> 16) & 0xFF,\r\n                (size >>>  8) & 0xFF,\r\n                (size) & 0xFF,\r\n                (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\r\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\r\n                0x00, 0x00,                // sample_degradation_priority\r\n                (cts >>> 24) & 0xFF,       // sample_composition_time_offset\r\n                (cts >>> 16) & 0xFF,\r\n                (cts >>>  8) & 0xFF,\r\n                (cts) & 0xFF\r\n            ], 12 + 16 * i);\r\n        }\r\n        return MP4.box(MP4.types.trun, data);\r\n    }\r\n\r\n    static mdat(data) {\r\n        return MP4.box(MP4.types.mdat, data);\r\n    }\r\n\r\n}\r\n\r\nMP4.init();\r\n\r\nexport default MP4;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Log from '../utils/logger.js';\r\nimport MP4 from './mp4-generator.js';\r\nimport AAC from './aac-silent.js';\r\nimport Browser from '../utils/browser.js';\r\nimport {SampleInfo, MediaSegmentInfo, MediaSegmentInfoList} from '../core/media-segment-info.js';\r\nimport {IllegalStateException} from '../utils/exception.js';\r\n\r\n\r\n// Fragmented mp4 remuxer\r\nclass MP4Remuxer {\r\n\r\n    constructor(config) {\r\n        this.TAG = 'MP4Remuxer';\r\n\r\n        this._config = config;\r\n        this._isLive = (config.isLive === true) ? true : false;\r\n\r\n        this._dtsBase = -1;\r\n        this._dtsBaseInited = false;\r\n        this._audioDtsBase = Infinity;\r\n        this._videoDtsBase = Infinity;\r\n        this._audioNextDts = undefined;\r\n        this._videoNextDts = undefined;\r\n        this._audioStashedLastSample = null;\r\n        this._videoStashedLastSample = null;\r\n\r\n        this._audioMeta = null;\r\n        this._videoMeta = null;\r\n\r\n        this._audioSegmentInfoList = new MediaSegmentInfoList('audio');\r\n        this._videoSegmentInfoList = new MediaSegmentInfoList('video');\r\n\r\n        this._onInitSegment = null;\r\n        this._onMediaSegment = null;\r\n\r\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\r\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\r\n        this._forceFirstIDR = (Browser.chrome &&\r\n                              (Browser.version.major < 50 ||\r\n                              (Browser.version.major === 50 && Browser.version.build < 2661))) ? true : false;\r\n\r\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\r\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\r\n        this._fillSilentAfterSeek = (Browser.msedge || Browser.msie);\r\n\r\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\r\n        this._mp3UseMpegAudio = !Browser.firefox;\r\n\r\n        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\r\n    }\r\n\r\n    destroy() {\r\n        this._dtsBase = -1;\r\n        this._dtsBaseInited = false;\r\n        this._audioMeta = null;\r\n        this._videoMeta = null;\r\n        this._audioSegmentInfoList.clear();\r\n        this._audioSegmentInfoList = null;\r\n        this._videoSegmentInfoList.clear();\r\n        this._videoSegmentInfoList = null;\r\n        this._onInitSegment = null;\r\n        this._onMediaSegment = null;\r\n    }\r\n\r\n    bindDataSource(producer) {\r\n        producer.onDataAvailable = this.remux.bind(this);\r\n        producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\r\n        return this;\r\n    }\r\n\r\n    /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\r\n       InitSegment: {\r\n           type: string,\r\n           data: ArrayBuffer,\r\n           codec: string,\r\n           container: string\r\n       }\r\n    */\r\n    get onInitSegment() {\r\n        return this._onInitSegment;\r\n    }\r\n\r\n    set onInitSegment(callback) {\r\n        this._onInitSegment = callback;\r\n    }\r\n\r\n    /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\r\n       MediaSegment: {\r\n           type: string,\r\n           data: ArrayBuffer,\r\n           sampleCount: int32\r\n           info: MediaSegmentInfo\r\n       }\r\n    */\r\n    get onMediaSegment() {\r\n        return this._onMediaSegment;\r\n    }\r\n\r\n    set onMediaSegment(callback) {\r\n        this._onMediaSegment = callback;\r\n    }\r\n\r\n    insertDiscontinuity() {\r\n        this._audioNextDts = this._videoNextDts = undefined;\r\n    }\r\n\r\n    seek(originalDts) {\r\n        this._audioStashedLastSample = null;\r\n        this._videoStashedLastSample = null;\r\n        this._videoSegmentInfoList.clear();\r\n        this._audioSegmentInfoList.clear();\r\n    }\r\n\r\n    remux(audioTrack, videoTrack) {\r\n        if (!this._onMediaSegment) {\r\n            throw new IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\r\n        }\r\n        if (!this._dtsBaseInited) {\r\n            this._calculateDtsBase(audioTrack, videoTrack);\r\n        }\r\n        this._remuxVideo(videoTrack);\r\n        this._remuxAudio(audioTrack);\r\n    }\r\n\r\n    _onTrackMetadataReceived(type, metadata) {\r\n        let metabox = null;\r\n\r\n        let container = 'mp4';\r\n        let codec = metadata.codec;\r\n\r\n        if (type === 'audio') {\r\n            this._audioMeta = metadata;\r\n            if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\r\n                // 'audio/mpeg' for MP3 audio track\r\n                container = 'mpeg';\r\n                codec = '';\r\n                metabox = new Uint8Array();\r\n            } else {\r\n                // 'audio/mp4, codecs=\"codec\"'\r\n                metabox = MP4.generateInitSegment(metadata);\r\n            }\r\n        } else if (type === 'video') {\r\n            this._videoMeta = metadata;\r\n            metabox = MP4.generateInitSegment(metadata);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        // dispatch metabox (Initialization Segment)\r\n        if (!this._onInitSegment) {\r\n            throw new IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\r\n        }\r\n        this._onInitSegment(type, {\r\n            type: type,\r\n            data: metabox.buffer,\r\n            codec: codec,\r\n            container: `${type}/${container}`,\r\n            mediaDuration: metadata.duration  // in timescale 1000 (milliseconds)\r\n        });\r\n    }\r\n\r\n    _calculateDtsBase(audioTrack, videoTrack) {\r\n        if (this._dtsBaseInited) {\r\n            return;\r\n        }\r\n\r\n        if (audioTrack.samples && audioTrack.samples.length) {\r\n            this._audioDtsBase = audioTrack.samples[0].dts;\r\n        }\r\n        if (videoTrack.samples && videoTrack.samples.length) {\r\n            this._videoDtsBase = videoTrack.samples[0].dts;\r\n        }\r\n\r\n        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\r\n        this._dtsBaseInited = true;\r\n    }\r\n\r\n    flushStashedSamples() {\r\n        let videoSample = this._videoStashedLastSample;\r\n        let audioSample = this._audioStashedLastSample;\r\n\r\n        let videoTrack = {\r\n            type: 'video',\r\n            id: 1,\r\n            sequenceNumber: 0,\r\n            samples: [],\r\n            length: 0\r\n        };\r\n\r\n        if (videoSample != null) {\r\n            videoTrack.samples.push(videoSample);\r\n            videoTrack.length = videoSample.length;\r\n        }\r\n\r\n        let audioTrack = {\r\n            type: 'audio',\r\n            id: 2,\r\n            sequenceNumber: 0,\r\n            samples: [],\r\n            length: 0\r\n        };\r\n\r\n        if (audioSample != null) {\r\n            audioTrack.samples.push(audioSample);\r\n            audioTrack.length = audioSample.length;\r\n        }\r\n\r\n        this._videoStashedLastSample = null;\r\n        this._audioStashedLastSample = null;\r\n\r\n        this._remuxVideo(videoTrack, true);\r\n        this._remuxAudio(audioTrack, true);\r\n    }\r\n\r\n    _remuxAudio(audioTrack, force) {\r\n        if (this._audioMeta == null) {\r\n            return;\r\n        }\r\n\r\n        let track = audioTrack;\r\n        let samples = track.samples;\r\n        let dtsCorrection = undefined;\r\n        let firstDts = -1, lastDts = -1, lastPts = -1;\r\n        let refSampleDuration = this._audioMeta.refSampleDuration;\r\n\r\n        let mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\r\n        let firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\r\n\r\n        let insertPrefixSilentFrame = false;\r\n\r\n        if (!samples || samples.length === 0) {\r\n            return;\r\n        }\r\n        if (samples.length === 1 && !force) {\r\n            // If [sample count in current batch] === 1 && (force != true)\r\n            // Ignore and keep in demuxer's queue\r\n            return;\r\n        }  // else if (force === true) do remux\r\n\r\n        let offset = 0;\r\n        let mdatbox = null;\r\n        let mdatBytes = 0;\r\n\r\n        // calculate initial mdat size\r\n        if (mpegRawTrack) {\r\n            // for raw mpeg buffer\r\n            offset = 0;\r\n            mdatBytes = track.length;\r\n        } else {\r\n            // for fmp4 mdat box\r\n            offset = 8;  // size + type\r\n            mdatBytes = 8 + track.length;\r\n        }\r\n\r\n\r\n        let lastSample = null;\r\n\r\n        // Pop the lastSample and waiting for stash\r\n        if (samples.length > 1) {\r\n            lastSample = samples.pop();\r\n            mdatBytes -= lastSample.length;\r\n        }\r\n\r\n        // Insert [stashed lastSample in the previous batch] to the front\r\n        if (this._audioStashedLastSample != null) {\r\n            let sample = this._audioStashedLastSample;\r\n            this._audioStashedLastSample = null;\r\n            samples.unshift(sample);\r\n            mdatBytes += sample.length;\r\n        }\r\n\r\n        // Stash the lastSample of current batch, waiting for next batch\r\n        if (lastSample != null) {\r\n            this._audioStashedLastSample = lastSample;\r\n        }\r\n\r\n\r\n        let firstSampleOriginalDts = samples[0].dts - this._dtsBase;\r\n\r\n        // calculate dtsCorrection\r\n        if (this._audioNextDts) {\r\n            dtsCorrection = firstSampleOriginalDts - this._audioNextDts;\r\n        } else {  // this._audioNextDts == undefined\r\n            if (this._audioSegmentInfoList.isEmpty()) {\r\n                dtsCorrection = 0;\r\n                if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\r\n                    if (this._audioMeta.originalCodec !== 'mp3') {\r\n                        insertPrefixSilentFrame = true;\r\n                    }\r\n                }\r\n            } else {\r\n                let lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\r\n                if (lastSample != null) {\r\n                    let distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\r\n                    if (distance <= 3) {\r\n                        distance = 0;\r\n                    }\r\n                    let expectedDts = lastSample.dts + lastSample.duration + distance;\r\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\r\n                } else { // lastSample == null, cannot found\r\n                    dtsCorrection = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (insertPrefixSilentFrame) {\r\n            // align audio segment beginDts to match with current video segment's beginDts\r\n            let firstSampleDts = firstSampleOriginalDts - dtsCorrection;\r\n            let videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);\r\n            if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {\r\n                let silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\r\n                if (silentUnit) {\r\n                    let dts = videoSegment.beginDts;\r\n                    let silentFrameDuration = firstSampleDts - videoSegment.beginDts;\r\n                    Log.v(this.TAG, `InsertPrefixSilentAudio: dts: ${dts}, duration: ${silentFrameDuration}`);\r\n                    samples.unshift({unit: silentUnit, dts: dts, pts: dts});\r\n                    mdatBytes += silentUnit.byteLength;\r\n                }  // silentUnit == null: Cannot generate, skip\r\n            } else {\r\n                insertPrefixSilentFrame = false;\r\n            }\r\n        }\r\n\r\n        let mp4Samples = [];\r\n\r\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\r\n        for (let i = 0; i < samples.length; i++) {\r\n            let sample = samples[i];\r\n            let unit = sample.unit;\r\n            let originalDts = sample.dts - this._dtsBase;\r\n            let dts = originalDts;\r\n            let needFillSilentFrames = false;\r\n            let silentFrames = null;\r\n            let sampleDuration = 0;\r\n\r\n            if (originalDts < -0.001) {\r\n                continue; //pass the first sample with the invalid dts\r\n            }\r\n\r\n            if (this._audioMeta.codec !== 'mp3') {\r\n                // for AAC codec, we need to keep dts increase based on refSampleDuration\r\n                let curRefDts = originalDts;\r\n                const maxAudioFramesDrift = 3;\r\n                if (this._audioNextDts) {\r\n                    curRefDts = this._audioNextDts;\r\n                }\r\n\r\n                dtsCorrection = originalDts - curRefDts;\r\n                if (dtsCorrection <= -maxAudioFramesDrift * refSampleDuration) {\r\n                    // If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample\r\n                    Log.w(this.TAG, `Dropping 1 audio frame (originalDts: ${originalDts} ms ,curRefDts: ${curRefDts} ms)  due to dtsCorrection: ${dtsCorrection} ms overlap.`);\r\n                    continue;\r\n                }\r\n                else if (dtsCorrection >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !Browser.safari) {\r\n                    // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\r\n                    needFillSilentFrames = true;\r\n                    // We need to insert silent frames to fill timestamp gap\r\n                    let frameCount = Math.floor(dtsCorrection / refSampleDuration);\r\n                    Log.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' +\r\n                        'Silent frames will be generated to avoid unsync.\\n' +\r\n                        `originalDts: ${originalDts} ms, curRefDts: ${curRefDts} ms, ` +\r\n                        `dtsCorrection: ${Math.round(dtsCorrection)} ms, generate: ${frameCount} frames`);\r\n\r\n\r\n                    dts = Math.floor(curRefDts);\r\n                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\r\n\r\n                    let silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\r\n                    if (silentUnit == null) {\r\n                        Log.w(this.TAG, 'Unable to generate silent frame for ' +\r\n                            `${this._audioMeta.originalCodec} with ${this._audioMeta.channelCount} channels, repeat last frame`);\r\n                        // Repeat last frame\r\n                        silentUnit = unit;\r\n                    }\r\n                    silentFrames = [];\r\n\r\n                    for (let j = 0; j < frameCount; j++) {\r\n                        curRefDts = curRefDts + refSampleDuration;\r\n                        let intDts = Math.floor(curRefDts);  // change to integer\r\n                        let intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;\r\n                        let frame = {\r\n                            dts: intDts,\r\n                            pts: intDts,\r\n                            cts: 0,\r\n                            unit: silentUnit,\r\n                            size: silentUnit.byteLength,\r\n                            duration: intDuration,  // wait for next sample\r\n                            originalDts: originalDts,\r\n                            flags: {\r\n                                isLeading: 0,\r\n                                dependsOn: 1,\r\n                                isDependedOn: 0,\r\n                                hasRedundancy: 0\r\n                            }\r\n                        };\r\n                        silentFrames.push(frame);\r\n                        mdatBytes += unit.byteLength;\r\n\r\n                    }\r\n\r\n                    this._audioNextDts = curRefDts + refSampleDuration;\r\n\r\n                } else {\r\n\r\n                    dts = Math.floor(curRefDts);\r\n                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\r\n                    this._audioNextDts = curRefDts + refSampleDuration;\r\n\r\n                }\r\n            } else {\r\n                // keep the original dts calculate algorithm for mp3\r\n                dts = originalDts - dtsCorrection;\r\n\r\n\r\n                if (i !== samples.length - 1) {\r\n                    let nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\r\n                    sampleDuration = nextDts - dts;\r\n                } else {  // the last sample\r\n                    if (lastSample != null) {  // use stashed sample's dts to calculate sample duration\r\n                        let nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\r\n                        sampleDuration = nextDts - dts;\r\n                    } else if (mp4Samples.length >= 1) {  // use second last sample duration\r\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\r\n                    } else {  // the only one sample, use reference sample duration\r\n                        sampleDuration = Math.floor(refSampleDuration);\r\n                    }\r\n                }\r\n                this._audioNextDts = dts + sampleDuration;\r\n            }\r\n\r\n            if (firstDts === -1) {\r\n                firstDts = dts;\r\n            }\r\n\r\n            mp4Samples.push({\r\n                dts: dts,\r\n                pts: dts,\r\n                cts: 0,\r\n                unit: sample.unit,\r\n                size: sample.unit.byteLength,\r\n                duration: sampleDuration,\r\n                originalDts: originalDts,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    dependsOn: 1,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0\r\n                }\r\n            });\r\n\r\n            if (needFillSilentFrames) {\r\n                // Silent frames should be inserted after wrong-duration frame\r\n                mp4Samples.push.apply(mp4Samples, silentFrames);\r\n            }\r\n        }\r\n\r\n        if (mp4Samples.length === 0) {\r\n            //no samples need to remux\r\n            track.samples = [];\r\n            track.length = 0;\r\n            return;\r\n        }\r\n\r\n        // allocate mdatbox\r\n        if (mpegRawTrack) {\r\n            // allocate for raw mpeg buffer\r\n            mdatbox = new Uint8Array(mdatBytes);\r\n        } else {\r\n            // allocate for fmp4 mdat box\r\n            mdatbox = new Uint8Array(mdatBytes);\r\n            // size field\r\n            mdatbox[0] = (mdatBytes >>> 24) & 0xFF;\r\n            mdatbox[1] = (mdatBytes >>> 16) & 0xFF;\r\n            mdatbox[2] = (mdatBytes >>>  8) & 0xFF;\r\n            mdatbox[3] = (mdatBytes) & 0xFF;\r\n            // type field (fourCC)\r\n            mdatbox.set(MP4.types.mdat, 4);\r\n        }\r\n\r\n        // Write samples into mdatbox\r\n        for (let i = 0; i < mp4Samples.length; i++) {\r\n            let unit = mp4Samples[i].unit;\r\n            mdatbox.set(unit, offset);\r\n            offset += unit.byteLength;\r\n        }\r\n\r\n        let latest = mp4Samples[mp4Samples.length - 1];\r\n        lastDts = latest.dts + latest.duration;\r\n        //this._audioNextDts = lastDts;\r\n\r\n        // fill media segment info & add to info list\r\n        let info = new MediaSegmentInfo();\r\n        info.beginDts = firstDts;\r\n        info.endDts = lastDts;\r\n        info.beginPts = firstDts;\r\n        info.endPts = lastDts;\r\n        info.originalBeginDts = mp4Samples[0].originalDts;\r\n        info.originalEndDts = latest.originalDts + latest.duration;\r\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\r\n                                          mp4Samples[0].pts,\r\n                                          mp4Samples[0].duration,\r\n                                          mp4Samples[0].originalDts,\r\n                                          false);\r\n        info.lastSample = new SampleInfo(latest.dts,\r\n                                         latest.pts,\r\n                                         latest.duration,\r\n                                         latest.originalDts,\r\n                                         false);\r\n        if (!this._isLive) {\r\n            this._audioSegmentInfoList.append(info);\r\n        }\r\n\r\n        track.samples = mp4Samples;\r\n        track.sequenceNumber++;\r\n\r\n        let moofbox = null;\r\n\r\n        if (mpegRawTrack) {\r\n            // Generate empty buffer, because useless for raw mpeg\r\n            moofbox = new Uint8Array();\r\n        } else {\r\n            // Generate moof for fmp4 segment\r\n            moofbox = MP4.moof(track, firstDts);\r\n        }\r\n\r\n        track.samples = [];\r\n        track.length = 0;\r\n\r\n        let segment = {\r\n            type: 'audio',\r\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\r\n            sampleCount: mp4Samples.length,\r\n            info: info\r\n        };\r\n\r\n        if (mpegRawTrack && firstSegmentAfterSeek) {\r\n            // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\r\n            // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\r\n            segment.timestampOffset = firstDts;\r\n        }\r\n\r\n        this._onMediaSegment('audio', segment);\r\n    }\r\n\r\n    _remuxVideo(videoTrack, force) {\r\n        if (this._videoMeta == null) {\r\n            return;\r\n        }\r\n\r\n        let track = videoTrack;\r\n        let samples = track.samples;\r\n        let dtsCorrection = undefined;\r\n        let firstDts = -1, lastDts = -1;\r\n        let firstPts = -1, lastPts = -1;\r\n\r\n        if (!samples || samples.length === 0) {\r\n            return;\r\n        }\r\n        if (samples.length === 1 && !force) {\r\n            // If [sample count in current batch] === 1 && (force != true)\r\n            // Ignore and keep in demuxer's queue\r\n            return;\r\n        }  // else if (force === true) do remux\r\n\r\n        let offset = 8;\r\n        let mdatbox = null;\r\n        let mdatBytes = 8 + videoTrack.length;\r\n\r\n\r\n        let lastSample = null;\r\n\r\n        // Pop the lastSample and waiting for stash\r\n        if (samples.length > 1) {\r\n            lastSample = samples.pop();\r\n            mdatBytes -= lastSample.length;\r\n        }\r\n\r\n        // Insert [stashed lastSample in the previous batch] to the front\r\n        if (this._videoStashedLastSample != null) {\r\n            let sample = this._videoStashedLastSample;\r\n            this._videoStashedLastSample = null;\r\n            samples.unshift(sample);\r\n            mdatBytes += sample.length;\r\n        }\r\n\r\n        // Stash the lastSample of current batch, waiting for next batch\r\n        if (lastSample != null) {\r\n            this._videoStashedLastSample = lastSample;\r\n        }\r\n\r\n\r\n        let firstSampleOriginalDts = samples[0].dts - this._dtsBase;\r\n\r\n        // calculate dtsCorrection\r\n        if (this._videoNextDts) {\r\n            dtsCorrection = firstSampleOriginalDts - this._videoNextDts;\r\n        } else {  // this._videoNextDts == undefined\r\n            if (this._videoSegmentInfoList.isEmpty()) {\r\n                dtsCorrection = 0;\r\n            } else {\r\n                let lastSample = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\r\n                if (lastSample != null) {\r\n                    let distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\r\n                    if (distance <= 3) {\r\n                        distance = 0;\r\n                    }\r\n                    let expectedDts = lastSample.dts + lastSample.duration + distance;\r\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\r\n                } else { // lastSample == null, cannot found\r\n                    dtsCorrection = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        let info = new MediaSegmentInfo();\r\n        let mp4Samples = [];\r\n\r\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\r\n        for (let i = 0; i < samples.length; i++) {\r\n            let sample = samples[i];\r\n            let originalDts = sample.dts - this._dtsBase;\r\n            let isKeyframe = sample.isKeyframe;\r\n            let dts = originalDts - dtsCorrection;\r\n            let cts = sample.cts;\r\n            let pts = dts + cts;\r\n\r\n            if (firstDts === -1) {\r\n                firstDts = dts;\r\n                firstPts = pts;\r\n            }\r\n\r\n            let sampleDuration = 0;\r\n\r\n            if (i !== samples.length - 1) {\r\n                let nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\r\n                sampleDuration = nextDts - dts;\r\n            } else {  // the last sample\r\n                if (lastSample != null) {  // use stashed sample's dts to calculate sample duration\r\n                    let nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\r\n                    sampleDuration = nextDts - dts;\r\n                } else if (mp4Samples.length >= 1) {  // use second last sample duration\r\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\r\n                } else {  // the only one sample, use reference sample duration\r\n                    sampleDuration = Math.floor(this._videoMeta.refSampleDuration);\r\n                }\r\n            }\r\n\r\n            if (isKeyframe) {\r\n                let syncPoint = new SampleInfo(dts, pts, sampleDuration, sample.dts, true);\r\n                syncPoint.fileposition = sample.fileposition;\r\n                info.appendSyncPoint(syncPoint);\r\n            }\r\n\r\n            mp4Samples.push({\r\n                dts: dts,\r\n                pts: pts,\r\n                cts: cts,\r\n                units: sample.units,\r\n                size: sample.length,\r\n                isKeyframe: isKeyframe,\r\n                duration: sampleDuration,\r\n                originalDts: originalDts,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    dependsOn: isKeyframe ? 2 : 1,\r\n                    isDependedOn: isKeyframe ? 1 : 0,\r\n                    hasRedundancy: 0,\r\n                    isNonSync: isKeyframe ? 0 : 1\r\n                }\r\n            });\r\n        }\r\n\r\n        // allocate mdatbox\r\n        mdatbox = new Uint8Array(mdatBytes);\r\n        mdatbox[0] = (mdatBytes >>> 24) & 0xFF;\r\n        mdatbox[1] = (mdatBytes >>> 16) & 0xFF;\r\n        mdatbox[2] = (mdatBytes >>>  8) & 0xFF;\r\n        mdatbox[3] = (mdatBytes) & 0xFF;\r\n        mdatbox.set(MP4.types.mdat, 4);\r\n\r\n        // Write samples into mdatbox\r\n        for (let i = 0; i < mp4Samples.length; i++) {\r\n            let units = mp4Samples[i].units;\r\n            while (units.length) {\r\n                let unit = units.shift();\r\n                let data = unit.data;\r\n                mdatbox.set(data, offset);\r\n                offset += data.byteLength;\r\n            }\r\n        }\r\n\r\n        let latest = mp4Samples[mp4Samples.length - 1];\r\n        lastDts = latest.dts + latest.duration;\r\n        lastPts = latest.pts + latest.duration;\r\n        this._videoNextDts = lastDts;\r\n\r\n        // fill media segment info & add to info list\r\n        info.beginDts = firstDts;\r\n        info.endDts = lastDts;\r\n        info.beginPts = firstPts;\r\n        info.endPts = lastPts;\r\n        info.originalBeginDts = mp4Samples[0].originalDts;\r\n        info.originalEndDts = latest.originalDts + latest.duration;\r\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\r\n                                          mp4Samples[0].pts,\r\n                                          mp4Samples[0].duration,\r\n                                          mp4Samples[0].originalDts,\r\n                                          mp4Samples[0].isKeyframe);\r\n        info.lastSample = new SampleInfo(latest.dts,\r\n                                         latest.pts,\r\n                                         latest.duration,\r\n                                         latest.originalDts,\r\n                                         latest.isKeyframe);\r\n        if (!this._isLive) {\r\n            this._videoSegmentInfoList.append(info);\r\n        }\r\n\r\n        track.samples = mp4Samples;\r\n        track.sequenceNumber++;\r\n\r\n        // workaround for chrome < 50: force first sample as a random access point\r\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\r\n        if (this._forceFirstIDR) {\r\n            let flags = mp4Samples[0].flags;\r\n            flags.dependsOn = 2;\r\n            flags.isNonSync = 0;\r\n        }\r\n\r\n        let moofbox = MP4.moof(track, firstDts);\r\n        track.samples = [];\r\n        track.length = 0;\r\n\r\n        this._onMediaSegment('video', {\r\n            type: 'video',\r\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\r\n            sampleCount: mp4Samples.length,\r\n            info: info\r\n        });\r\n    }\r\n\r\n    _mergeBoxes(moof, mdat) {\r\n        let result = new Uint8Array(moof.byteLength + mdat.byteLength);\r\n        result.set(moof, 0);\r\n        result.set(mdat, moof.byteLength);\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport default MP4Remuxer;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nlet Browser = {};\r\n\r\nfunction detect() {\r\n    // modified from jquery-browser-plugin\r\n\r\n    let ua = self.navigator.userAgent.toLowerCase();\r\n\r\n    let match = /(edge)\\/([\\w.]+)/.exec(ua) ||\r\n        /(opr)[\\/]([\\w.]+)/.exec(ua) ||\r\n        /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        /(iemobile)[\\/]([\\w.]+)/.exec(ua) ||\r\n        /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        /(msie) ([\\w.]+)/.exec(ua) ||\r\n        ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\r\n        ua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) ||\r\n        [];\r\n\r\n    let platform_match = /(ipad)/.exec(ua) ||\r\n        /(ipod)/.exec(ua) ||\r\n        /(windows phone)/.exec(ua) ||\r\n        /(iphone)/.exec(ua) ||\r\n        /(kindle)/.exec(ua) ||\r\n        /(android)/.exec(ua) ||\r\n        /(windows)/.exec(ua) ||\r\n        /(mac)/.exec(ua) ||\r\n        /(linux)/.exec(ua) ||\r\n        /(cros)/.exec(ua) ||\r\n        [];\r\n\r\n    let matched = {\r\n        browser: match[5] || match[3] || match[1] || '',\r\n        version: match[2] || match[4] || '0',\r\n        majorVersion: match[4] || match[2] || '0',\r\n        platform: platform_match[0] || ''\r\n    };\r\n\r\n    let browser = {};\r\n    if (matched.browser) {\r\n        browser[matched.browser] = true;\r\n\r\n        let versionArray = matched.majorVersion.split('.');\r\n        browser.version = {\r\n            major: parseInt(matched.majorVersion, 10),\r\n            string: matched.version\r\n        };\r\n        if (versionArray.length > 1) {\r\n            browser.version.minor = parseInt(versionArray[1], 10);\r\n        }\r\n        if (versionArray.length > 2) {\r\n            browser.version.build = parseInt(versionArray[2], 10);\r\n        }\r\n    }\r\n\r\n    if (matched.platform) {\r\n        browser[matched.platform] = true;\r\n    }\r\n\r\n    if (browser.chrome || browser.opr || browser.safari) {\r\n        browser.webkit = true;\r\n    }\r\n\r\n    // MSIE. IE11 has 'rv' identifer\r\n    if (browser.rv || browser.iemobile) {\r\n        if (browser.rv) {\r\n            delete browser.rv;\r\n        }\r\n        let msie = 'msie';\r\n        matched.browser = msie;\r\n        browser[msie] = true;\r\n    }\r\n\r\n    // Microsoft Edge\r\n    if (browser.edge) {\r\n        delete browser.edge;\r\n        let msedge = 'msedge';\r\n        matched.browser = msedge;\r\n        browser[msedge] = true;\r\n    }\r\n\r\n    // Opera 15+\r\n    if (browser.opr) {\r\n        let opera = 'opera';\r\n        matched.browser = opera;\r\n        browser[opera] = true;\r\n    }\r\n\r\n    // Stock android browsers are marked as Safari\r\n    if (browser.safari && browser.android) {\r\n        let android = 'android';\r\n        matched.browser = android;\r\n        browser[android] = true;\r\n    }\r\n\r\n    browser.name = matched.browser;\r\n    browser.platform = matched.platform;\r\n\r\n    for (let key in Browser) {\r\n        if (Browser.hasOwnProperty(key)) {\r\n            delete Browser[key];\r\n        }\r\n    }\r\n    Object.assign(Browser, browser);\r\n}\r\n\r\ndetect();\r\n\r\nexport default Browser;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport class RuntimeException {\r\n\r\n    constructor(message) {\r\n        this._message = message;\r\n    }\r\n\r\n    get name() {\r\n        return 'RuntimeException';\r\n    }\r\n\r\n    get message() {\r\n        return this._message;\r\n    }\r\n\r\n    toString() {\r\n        return this.name + ': ' + this.message;\r\n    }\r\n\r\n}\r\n\r\nexport class IllegalStateException extends RuntimeException {\r\n\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n\r\n    get name() {\r\n        return 'IllegalStateException';\r\n    }\r\n\r\n}\r\n\r\nexport class InvalidArgumentException extends RuntimeException {\r\n\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n\r\n    get name() {\r\n        return 'InvalidArgumentException';\r\n    }\r\n\r\n}\r\n\r\nexport class NotImplementedException extends RuntimeException {\r\n\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n\r\n    get name() {\r\n        return 'NotImplementedException';\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\n\r\nclass Log {\r\n\r\n    static e(tag, msg) {\r\n        if (!tag || Log.FORCE_GLOBAL_TAG)\r\n            tag = Log.GLOBAL_TAG;\r\n\r\n        let str = `[${tag}] > ${msg}`;\r\n\r\n        if (Log.ENABLE_CALLBACK) {\r\n            Log.emitter.emit('log', 'error', str);\r\n        }\r\n\r\n        if (!Log.ENABLE_ERROR) {\r\n            return;\r\n        }\r\n\r\n        if (console.error) {\r\n            console.error(str);\r\n        } else if (console.warn) {\r\n            console.warn(str);\r\n        } else {\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    static i(tag, msg) {\r\n        if (!tag || Log.FORCE_GLOBAL_TAG)\r\n            tag = Log.GLOBAL_TAG;\r\n\r\n        let str = `[${tag}] > ${msg}`;\r\n\r\n        if (Log.ENABLE_CALLBACK) {\r\n            Log.emitter.emit('log', 'info', str);\r\n        }\r\n\r\n        if (!Log.ENABLE_INFO) {\r\n            return;\r\n        }\r\n\r\n        if (console.info) {\r\n            console.info(str);\r\n        } else {\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    static w(tag, msg) {\r\n        if (!tag || Log.FORCE_GLOBAL_TAG)\r\n            tag = Log.GLOBAL_TAG;\r\n\r\n        let str = `[${tag}] > ${msg}`;\r\n\r\n        if (Log.ENABLE_CALLBACK) {\r\n            Log.emitter.emit('log', 'warn', str);\r\n        }\r\n\r\n        if (!Log.ENABLE_WARN) {\r\n            return;\r\n        }\r\n\r\n        if (console.warn) {\r\n            console.warn(str);\r\n        } else {\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    static d(tag, msg) {\r\n        if (!tag || Log.FORCE_GLOBAL_TAG)\r\n            tag = Log.GLOBAL_TAG;\r\n\r\n        let str = `[${tag}] > ${msg}`;\r\n\r\n        if (Log.ENABLE_CALLBACK) {\r\n            Log.emitter.emit('log', 'debug', str);\r\n        }\r\n\r\n        if (!Log.ENABLE_DEBUG) {\r\n            return;\r\n        }\r\n\r\n        if (console.debug) {\r\n            console.debug(str);\r\n        } else {\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    static v(tag, msg) {\r\n        if (!tag || Log.FORCE_GLOBAL_TAG)\r\n            tag = Log.GLOBAL_TAG;\r\n\r\n        let str = `[${tag}] > ${msg}`;\r\n\r\n        if (Log.ENABLE_CALLBACK) {\r\n            Log.emitter.emit('log', 'verbose', str);\r\n        }\r\n\r\n        if (!Log.ENABLE_VERBOSE) {\r\n            return;\r\n        }\r\n\r\n        console.log(str);\r\n    }\r\n\r\n}\r\n\r\nLog.GLOBAL_TAG = 'flv.js';\r\nLog.FORCE_GLOBAL_TAG = false;\r\nLog.ENABLE_ERROR = true;\r\nLog.ENABLE_INFO = true;\r\nLog.ENABLE_WARN = true;\r\nLog.ENABLE_DEBUG = true;\r\nLog.ENABLE_VERBOSE = true;\r\n\r\nLog.ENABLE_CALLBACK = false;\r\n\r\nLog.emitter = new EventEmitter();\r\n\r\nexport default Log;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Log from './logger.js';\r\n\r\nclass LoggingControl {\r\n\r\n    static get forceGlobalTag() {\r\n        return Log.FORCE_GLOBAL_TAG;\r\n    }\r\n\r\n    static set forceGlobalTag(enable) {\r\n        Log.FORCE_GLOBAL_TAG = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get globalTag() {\r\n        return Log.GLOBAL_TAG;\r\n    }\r\n\r\n    static set globalTag(tag) {\r\n        Log.GLOBAL_TAG = tag;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableAll() {\r\n        return Log.ENABLE_VERBOSE\r\n            && Log.ENABLE_DEBUG\r\n            && Log.ENABLE_INFO\r\n            && Log.ENABLE_WARN\r\n            && Log.ENABLE_ERROR;\r\n    }\r\n\r\n    static set enableAll(enable) {\r\n        Log.ENABLE_VERBOSE = enable;\r\n        Log.ENABLE_DEBUG = enable;\r\n        Log.ENABLE_INFO = enable;\r\n        Log.ENABLE_WARN = enable;\r\n        Log.ENABLE_ERROR = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableDebug() {\r\n        return Log.ENABLE_DEBUG;\r\n    }\r\n\r\n    static set enableDebug(enable) {\r\n        Log.ENABLE_DEBUG = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableVerbose() {\r\n        return Log.ENABLE_VERBOSE;\r\n    }\r\n\r\n    static set enableVerbose(enable) {\r\n        Log.ENABLE_VERBOSE = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableInfo() {\r\n        return Log.ENABLE_INFO;\r\n    }\r\n\r\n    static set enableInfo(enable) {\r\n        Log.ENABLE_INFO = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableWarn() {\r\n        return Log.ENABLE_WARN;\r\n    }\r\n\r\n    static set enableWarn(enable) {\r\n        Log.ENABLE_WARN = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static get enableError() {\r\n        return Log.ENABLE_ERROR;\r\n    }\r\n\r\n    static set enableError(enable) {\r\n        Log.ENABLE_ERROR = enable;\r\n        LoggingControl._notifyChange();\r\n    }\r\n\r\n    static getConfig() {\r\n        return {\r\n            globalTag: Log.GLOBAL_TAG,\r\n            forceGlobalTag: Log.FORCE_GLOBAL_TAG,\r\n            enableVerbose: Log.ENABLE_VERBOSE,\r\n            enableDebug: Log.ENABLE_DEBUG,\r\n            enableInfo: Log.ENABLE_INFO,\r\n            enableWarn: Log.ENABLE_WARN,\r\n            enableError: Log.ENABLE_ERROR,\r\n            enableCallback: Log.ENABLE_CALLBACK\r\n        };\r\n    }\r\n\r\n    static applyConfig(config) {\r\n        Log.GLOBAL_TAG = config.globalTag;\r\n        Log.FORCE_GLOBAL_TAG = config.forceGlobalTag;\r\n        Log.ENABLE_VERBOSE = config.enableVerbose;\r\n        Log.ENABLE_DEBUG = config.enableDebug;\r\n        Log.ENABLE_INFO = config.enableInfo;\r\n        Log.ENABLE_WARN = config.enableWarn;\r\n        Log.ENABLE_ERROR = config.enableError;\r\n        Log.ENABLE_CALLBACK = config.enableCallback;\r\n    }\r\n\r\n    static _notifyChange() {\r\n        let emitter = LoggingControl.emitter;\r\n\r\n        if (emitter.listenerCount('change') > 0) {\r\n            let config = LoggingControl.getConfig();\r\n            emitter.emit('change', config);\r\n        }\r\n    }\r\n\r\n    static registerListener(listener) {\r\n        LoggingControl.emitter.addListener('change', listener);\r\n    }\r\n\r\n    static removeListener(listener) {\r\n        LoggingControl.emitter.removeListener('change', listener);\r\n    }\r\n\r\n    static addLogListener(listener) {\r\n        Log.emitter.addListener('log', listener);\r\n        if (Log.emitter.listenerCount('log') > 0) {\r\n            Log.ENABLE_CALLBACK = true;\r\n            LoggingControl._notifyChange();\r\n        }\r\n    }\r\n\r\n    static removeLogListener(listener) {\r\n        Log.emitter.removeListener('log', listener);\r\n        if (Log.emitter.listenerCount('log') === 0) {\r\n            Log.ENABLE_CALLBACK = false;\r\n            LoggingControl._notifyChange();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nLoggingControl.emitter = new EventEmitter();\r\n\r\nexport default LoggingControl;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass Polyfill {\r\n\r\n    static install() {\r\n        // ES6 Object.setPrototypeOf\r\n        Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {\r\n            obj.__proto__ = proto;\r\n            return obj;\r\n        };\r\n\r\n        // ES6 Object.assign\r\n        Object.assign = Object.assign || function (target) {\r\n            if (target === undefined || target === null) {\r\n                throw new TypeError('Cannot convert undefined or null to object');\r\n            }\r\n\r\n            let output = Object(target);\r\n            for (let i = 1; i < arguments.length; i++) {\r\n                let source = arguments[i];\r\n                if (source !== undefined && source !== null) {\r\n                    for (let key in source) {\r\n                        if (source.hasOwnProperty(key)) {\r\n                            output[key] = source[key];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        };\r\n\r\n        // ES6 Promise (missing support in IE11)\r\n        if (typeof self.Promise !== 'function') {\r\n            require('es6-promise').polyfill();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nPolyfill.install();\r\n\r\nexport default Polyfill;","/*\r\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\r\n *\r\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\r\n * @author zheng qian <xqq@xqq.im>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction checkContinuation(uint8array, start, checkLength) {\r\n    let array = uint8array;\r\n    if (start + checkLength < array.length) {\r\n        while (checkLength--) {\r\n            if ((array[++start] & 0xC0) !== 0x80)\r\n                return false;\r\n        }\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction decodeUTF8(uint8array) {\r\n    let out = [];\r\n    let input = uint8array;\r\n    let i = 0;\r\n    let length = uint8array.length;\r\n\r\n    while (i < length) {\r\n        if (input[i] < 0x80) {\r\n            out.push(String.fromCharCode(input[i]));\r\n            ++i;\r\n            continue;\r\n        } else if (input[i] < 0xC0) {\r\n            // fallthrough\r\n        } else if (input[i] < 0xE0) {\r\n            if (checkContinuation(input, i, 1)) {\r\n                let ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\r\n                if (ucs4 >= 0x80) {\r\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\r\n                    i += 2;\r\n                    continue;\r\n                }\r\n            }\r\n        } else if (input[i] < 0xF0) {\r\n            if (checkContinuation(input, i, 2)) {\r\n                let ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\r\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\r\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\r\n                    i += 3;\r\n                    continue;\r\n                }\r\n            }\r\n        } else if (input[i] < 0xF8) {\r\n            if (checkContinuation(input, i, 3)) {\r\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12\r\n                         | (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\r\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\r\n                    ucs4 -= 0x10000;\r\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\r\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\r\n                    i += 4;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        out.push(String.fromCharCode(0xFFFD));\r\n        ++i;\r\n    }\r\n\r\n    return out.join('');\r\n}\r\n\r\nexport default decodeUTF8;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}