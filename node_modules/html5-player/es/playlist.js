import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

//外部依赖包
import React from 'react';
import PropTypes from 'prop-types';
import isString from 'lodash/isString';
//内部依赖包
import Player from './index';
import Carousel from './view/components/carousel';

var Playlist = (_temp2 = _class = function (_React$Component) {
  _inherits(Playlist, _React$Component);

  function Playlist() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Playlist);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Playlist.__proto__ || _Object$getPrototypeOf(Playlist)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Playlist', _this.state = {
      activeItem: _this.props.activeItem || 1
    }, _this.setVideoSwitchInterval = function () {
      var _this$props = _this.props,
          playlist = _this$props.playlist,
          videoCarousel = _this$props.videoCarousel;

      if (videoCarousel) {
        clearInterval(_this.clearInterval);
        var time = 1000 * 10;
        if (!isNaN(+_JSON$stringify(videoCarousel))) {
          time = videoCarousel;
        }
        _this.clearInterval = setInterval(function () {
          if (_this.activeItem >= playlist.length) {
            _this.activeItem = 1;
          } else {
            _this.activeItem = _this.activeItem + 1;
          }
        }, time);
      }
    }, _this.setActiveItem = function (value) {
      _this.activeItem = value;
    }, _this.onPlaylistItemClick = function (index) {
      return function (e) {
        _this.setVideoSwitchInterval();
        _this.setState({ activeItem: index + 1 });
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Playlist, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        playlist: this.props.playlist,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setVideoSwitchInterval();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(this.clearInterval);
      this.clearInterval = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          gap = _props.gap,
          showCount = _props.showCount,
          _props$playlist = _props.playlist,
          playlist = _props$playlist === undefined ? [] : _props$playlist,
          other = _objectWithoutProperties(_props, ['title', 'gap', 'showCount', 'playlist']);

      var activeItem = this.state.activeItem;

      var playerProps = _extends({}, other, playlist[activeItem - 1], {
        activeItem: activeItem,
        title: React.createElement(
          'span',
          null,
          playlist[activeItem - 1].title,
          title
        )
      });
      return React.createElement(
        'span',
        null,
        React.createElement(Player, _extends({}, playerProps, { playlist: playlist })),
        playlist[0] && React.createElement(
          'div',
          { className: 'html5-player-playlist-container' },
          React.createElement(
            Carousel,
            {
              className: 'html5-player-list',
              gap: gap,
              showCount: showCount,
              activeItem: activeItem
            },
            playlist && playlist.map(function (v, k) {
              return React.createElement(
                'div',
                { key: k, onClick: _this2.onPlaylistItemClick(k) },
                React.createElement(
                  'div',
                  { className: 'html5-player-carousel-item-cover' },
                  React.isValidElement(v.cover) && v.cover,
                  isString(v.cover) && React.createElement('img', { alt: '', src: v.cover })
                ),
                React.createElement(
                  'div',
                  { className: 'html5-player-carousel-item-title' },
                  v.title
                )
              );
            })
          )
        )
      );
    }
  }, {
    key: 'activeItem',
    get: function get() {
      return this.state.activeItem;
    },
    set: function set(value) {
      this.setState({ activeItem: value });
    }
  }]);

  return Playlist;
}(React.Component), _class.propTypes = {
  playlist: PropTypes.array.isRequired,
  //当前选择播放的视频源（播放列表中的某项）
  activeItem: PropTypes.number,
  //视频走定时轮播，没有默认值
  //可以使毫秒设置轮播间隔
  videoCarousel: PropTypes.oneOfType([PropTypes.number, PropTypes.bool])
}, _class.childContextTypes = {
  playlist: PropTypes.array,
  activeItem: PropTypes.number,
  setActiveItem: PropTypes.func
}, _temp2);
export { Playlist as default };