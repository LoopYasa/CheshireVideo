import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

//外部依赖包
import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
// import classnames from 'classnames';
//内部依赖包
import addEventListener from '../../utils/dom/addEventListener';
import contains from '../../utils/dom/contains';
import { cloneElement } from '../../utils/util';

var ContextMenu = (_temp2 = _class = function (_React$Component) {
  _inherits(ContextMenu, _React$Component);

  function ContextMenu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ContextMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ContextMenu.__proto__ || _Object$getPrototypeOf(ContextMenu)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'ContextMenu', _this.state = { showMenu: false }, _this.onContextMenu = function (e) {
      e.preventDefault();
      //overflow 是否不能超出容器的边界
      var _this$props$overflow = _this.props.overflow,
          overflow = _this$props$overflow === undefined ? true : _this$props$overflow;

      var containerTarget = ReactDOM.findDOMNode(_this.refs.containerTarget);
      var menuDOM = ReactDOM.findDOMNode(_this.refs.menu);
      var body = containerTarget.ownerDocument.body;
      var containerTargetRect = containerTarget.getBoundingClientRect();
      var menuDOMRect = menuDOM.getBoundingClientRect();
      var left = parseInt('' + (e.pageX - containerTargetRect.left), 10);
      var top = parseInt('' + (e.pageY - containerTargetRect.top), 10);
      // console.log(body.clientWidth, left, e.pageX);
      if (!overflow) {
        //overflow 是否不能超出容器的边界
        if (left > containerTargetRect.width - menuDOMRect.width) {
          //超过container右边
          left = containerTargetRect.width - menuDOMRect.width;
        }
        if (top > containerTargetRect.height - menuDOMRect.height) {
          //超过container右边
          top = containerTargetRect.height - menuDOMRect.height;
        }
      } else {
        if (e.pageX > body.clientWidth - menuDOMRect.width) {
          //超过浏览器右边
          left = body.clientWidth - menuDOMRect.width - containerTargetRect.left;
        }
        if (e.pageY > body.clientHeight - menuDOMRect.height) {
          //超过浏览器底部
          top = body.clientHeight - menuDOMRect.height - containerTargetRect.top;
        }
      }
      _this.setState({
        showMenu: true,
        left: left + 'px',
        top: top + 'px'
      });
      _this.documentMousedownEvent && _this.documentMousedownEvent.remove();
      _this.documentMousedownEvent = addEventListener(containerTarget.ownerDocument, 'mousedown', function (e) {
        if (!contains(menuDOM, e.target)) {
          _this.documentMousedownEvent.remove();
          _this.setState({
            showMenu: false
          });
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ContextMenu, [{
    key: 'renderContextmenu',
    value: function renderContextmenu() {
      var content = this.props.content;
      var _state = this.state,
          showMenu = _state.showMenu,
          left = _state.left,
          top = _state.top;

      return cloneElement(content, {
        key: 'menu',
        ref: 'menu',
        style: {
          visibility: showMenu ? 'visible' : 'hidden',
          color: 'red',
          position: 'absolute',
          whiteSpace: 'nowrap',
          zIndex: 100000,
          left: left,
          top: top
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return cloneElement(children, {
        ref: 'containerTarget',
        onContextMenu: this.onContextMenu
      }, this.renderContextmenu());
    }
  }]);

  return ContextMenu;
}(React.Component), _class.propTypes = {
  content: PropTypes.element,
  //overflow 是否不能超出容器的边界，默认可以超出
  overflow: PropTypes.bool
}, _temp2);
export { ContextMenu as default };