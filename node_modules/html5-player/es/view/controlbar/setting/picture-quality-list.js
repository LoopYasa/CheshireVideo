import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _class;

//外部依赖包
import React from 'react';
import { connect } from 'react-redux';
import classnames from 'classnames';
//内部依赖包
import List from './list';
import { namespace as videoNamespace } from '../../../model/video';
import { namespace as qualityNamespace } from '../../../model/picture-quality';

var PictureQualityList = (_dec = connect(function (state) {
  return {
    qualityList: state[qualityNamespace].list,
    currentQuality: state[qualityNamespace].currentQuality
  };
}), _dec(_class = function (_List) {
  _inherits(PictureQualityList, _List);

  function PictureQualityList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PictureQualityList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PictureQualityList.__proto__ || _Object$getPrototypeOf(PictureQualityList)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'PictureQualityList', _this.onSelect = function (value) {
      return _this.onSelectEvent(value, function () {
        _this.dispatch({
          type: videoNamespace + '/switchPictureQuality',
          payload: value
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PictureQualityList, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          qualityList = _props.qualityList,
          currentQuality = _props.currentQuality;

      var locale = this.getLocale();
      return React.createElement(
        'ul',
        { className: 'html5-player-list-container' },
        this.renderBack(locale.pictureQuality),
        qualityList && qualityList.map(function (v) {
          var className = classnames({
            'html5-player-list-selected': currentQuality === v.value
          });
          return React.createElement(
            'li',
            {
              onClick: _this2.onSelect(v.value),
              key: v.value,
              className: className
            },
            v.label
          );
        }),
        React.createElement(
          'li',
          {
            onClick: this.onSelect(-1),
            key: -1,
            className: classnames({
              'html5-player-list-selected': currentQuality === -1
            })
          },
          locale.autoQuality
        )
      );
    }
  }]);

  return PictureQualityList;
}(List)) || _class);
export { PictureQualityList as default };