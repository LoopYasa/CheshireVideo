import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classnames from 'classnames';
import isString from 'lodash/isString';
//内部依赖包
import Tooltip from '../components/tooltip';
import { hms, dateFormat } from '../../utils/util';
import { namespace as timeNamespace } from '../../model/time';
import { namespace as trackerNamespace } from '../../model/track';
import { namespace as fragmentNamespace } from '../../model/fragment';

var TimeTooltip = (_dec = connect(function (state) {
  var thumbnails = state[trackerNamespace].thumbnails;
  var props = {
    duration: state[timeNamespace].secondDuration,
    fragment: state[fragmentNamespace],
    thumbnails: thumbnails
  };
  return props;
}), _dec(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(TimeTooltip, _React$Component);

  function TimeTooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TimeTooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TimeTooltip.__proto__ || _Object$getPrototypeOf(TimeTooltip)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'TimeTooltip', _this.state = {
      percent: 0.5
    }, _this.dispatch = _this.props.dispatch, _this.onChange = function (percent) {
      _this.setState({
        percent: percent
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  //这里的配置参考jw-player的api


  _createClass(TimeTooltip, [{
    key: 'renderContent',
    value: function renderContent() {
      //historyTrack是播放录像（合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频
      //但是这个视频不是整个时段的，会有断的，historyTrack就是给用户知道这段录像哪里断了）
      //一般都用不到historyTrack，如果存在historyTrack就优先使用historyTrack的duration
      var _props = this.props,
          duration = _props.duration,
          fragment = _props.fragment,
          thumbnails = _props.thumbnails,
          timeSliderShowFormat = _props.timeSliderShowFormat;
      var videoBeginDateTime = fragment.videoBeginDateTime;

      if (duration === 0) {
        return false;
      }
      if (fragment && fragment.duration) {
        duration = fragment.duration;
      }
      var _state$percent = this.state.percent,
          percent = _state$percent === undefined ? 0.5 : _state$percent;

      if (thumbnails && thumbnails[0]) {
        var position = percent * duration;
        var style = {};
        thumbnails.forEach(function (v) {
          if (position >= v.begin && position < v.end) {
            var url = '';
            if (!isString(v)) {
              //一张图片中有多张缩略图
              url = v.thumbnail[1];
              style.backgroundImage = 'url("' + url + '")';
              style.backgroundPosition = v.thumbnail[2] * -1 + 'px ' + v.thumbnail[3] * -1 + 'px';
              style.width = v.thumbnail[4] + 'px';
              style.height = v.thumbnail[5] + 'px';
            } else {
              //单张图片直接做缩略图
              url = v.thumbnail;
            }
          }
        });
        return React.createElement(
          'div',
          {
            className: classnames('html5-player-time-tooltip-content', {
              'html5-player-thumbnail-tooltip-content': thumbnails
            })
          },
          React.createElement('div', { className: 'html5-player-thumbnail', style: style }),
          React.createElement(
            'span',
            { className: 'html5-player-thumbnail-time' },
            hms(percent * duration)
          )
        );
      } else {
        return React.createElement(
          'div',
          { className: 'html5-player-time-tooltip-content' },
          (!videoBeginDateTime || timeSliderShowFormat === 'time') && hms(percent * duration),
          videoBeginDateTime && timeSliderShowFormat === 'date' && dateFormat((videoBeginDateTime + percent * duration) * 1000, 'YYYY-MM-DD HH:mm:ss')
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        Tooltip,
        {
          className: 'html5-player-time-tooltip',
          content: this.renderContent(),
          type: 'move',
          onChange: this.onChange,
          percent: this.state.percent,
          isAnimateActive: false
        },
        React.createElement('div', { className: 'html5-player-for-tooltip' })
      );
    }
  }]);

  return TimeTooltip;
}(React.Component), _class2.propTypes = {}, _temp2)) || _class);
export { TimeTooltip as default };