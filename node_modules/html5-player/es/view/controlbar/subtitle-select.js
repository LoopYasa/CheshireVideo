import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';
import { connect } from 'react-redux';
// import classnames from 'classnames';
//内部依赖包
import Tooltip from '../components/tooltip';
import clearDecorator from '../decorator/clear';
import SubtitleList from './setting/subtitle-list';
import { namespace as trackNamespace } from '../../model/track';

var SubtitleSelect = (_dec = connect(function (state) {
  return {
    subtitleList: state[trackNamespace].subtitleList,
    subtitleId: state[trackNamespace].subtitleId
  };
}), _dec2 = clearDecorator([]), _dec(_class = _dec2(_class = function (_React$Component) {
  _inherits(SubtitleSelect, _React$Component);

  function SubtitleSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SubtitleSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SubtitleSelect.__proto__ || _Object$getPrototypeOf(SubtitleSelect)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'subtitleSelect', _this.state = {}, _this.onRateSelect = function (rate) {
      _this.setState({
        tooltipKey: rate
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SubtitleSelect, [{
    key: 'renderContent',
    value: function renderContent() {
      return React.createElement(SubtitleList, { onSelect: this.onRateSelect });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          subtitleList = _props.subtitleList,
          locale = _props.locale;
      var tooltipKey = this.state.tooltipKey;

      if (!subtitleList[0]) {
        return false;
      }
      return React.createElement(
        Tooltip,
        {
          key: tooltipKey,
          trigger: 'click',
          content: this.renderContent(),
          toTargetGap: 20
        },
        React.createElement(
          'span',
          { className: 'float-right cursor-pointer html5-player-common-button html5-player-subtitle-button' },
          locale.subtitle
        )
      );
    }
  }]);

  return SubtitleSelect;
}(React.Component)) || _class) || _class);
export { SubtitleSelect as default };