import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classnames from 'classnames';
//内部依赖包
import clearDecorator from '../decorator/clear';
import { namespace as videoNamespace } from '../../model/video';
import { namespace as fullscreenStateNamespace } from '../../model/fullscreen';

/**
 * 播放器加载状态的组件
 */
var FullOffScreen = (_dec = connect(function (state) {
  return {
    isfull: state[fullscreenStateNamespace]
  };
}), _dec2 = clearDecorator([fullscreenStateNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(FullOffScreen, _React$Component);

  function FullOffScreen() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FullOffScreen);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FullOffScreen.__proto__ || _Object$getPrototypeOf(FullOffScreen)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'FullOffScreen', _this.state = {}, _this.dispatch = _this.props.dispatch, _this.onFullStateChange = function (e) {
      e.stopPropagation();
      var isfull = _this.props.isfull;

      _this.dispatch({
        type: videoNamespace + '/fullscreen',
        payload: !isfull
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  //这里的配置参考jw-player的api


  _createClass(FullOffScreen, [{
    key: 'render',
    value: function render() {
      var isfull = this.props.isfull;

      return React.createElement(
        'button',
        {
          type: 'button',
          className: 'html5-player-small-button float-right html5-player-screen-full-off-button',
          onClick: this.onFullStateChange
        },
        React.createElement(
          'svg',
          {
            className: classnames('html5-player-icon html5-player-screen-full-off-icon', {
              'html5-player-fullscreen-icon': !isfull,
              'html5-player-fullscreen-off-icon': isfull
            }),
            'aria-hidden': 'true'
          },
          React.createElement('use', {
            xlinkHref: classnames({
              '#icon-fullscreen': !isfull,
              '#icon-fullscreen-off': isfull
            })
          })
        )
      );
    }
  }]);

  return FullOffScreen;
}(React.Component), _class2.propTypes = {}, _temp2)) || _class) || _class);
export { FullOffScreen as default };