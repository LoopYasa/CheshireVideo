import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classnames from 'classnames';
//内部依赖包
import clearDecorator from '../decorator/clear';
import Tooltip from '../components/tooltip';
import Slider from '../components/slider';
import { MAX_VOLUME } from '../../utils/const';
import { namespace as volumeNamespace } from '../../model/volume';
import { namespace as mutedNamespace } from '../../model/muted';
import { namespace as videoNamespace } from '../../model/video';
import * as storage from '../../utils/storage';

/**
 * 播放器加载状态的组件
 */
var Volume = (_dec = connect(function (state) {
  return {
    volume: state[volumeNamespace],
    muted: state[mutedNamespace]
  };
}), _dec2 = clearDecorator([volumeNamespace, mutedNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(Volume, _React$Component);

  function Volume() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Volume);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Volume.__proto__ || _Object$getPrototypeOf(Volume)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Volume', _this.state = {}, _this.dispatch = _this.props.dispatch, _this.onMuteStateChange = function (e) {
      e.stopPropagation();
      var muted = _this.props.muted;

      var storage_volume = storage.get('volume');
      if (muted && storage_volume !== 0) {
        //如果是静音，解除静音后原声音值需要还原
        _this.setVolumeFromLocalStorage();
      } else if (storage_volume === 0) {
        _this.dispatch({
          type: videoNamespace + '/volume',
          //如果原声音为0，点击静音按钮，设置声音值为10
          payload: 10
        });
      }
      if (storage_volume !== 0) {
        //进行静音或者取消静音操作
        _this.dispatch({
          type: videoNamespace + '/muted',
          payload: !muted
        });
      }
    }, _this.onSliderChange = function (percent, isMove) {
      var muted = _this.props.muted;

      if (muted) {
        //如果是静音，解除静音。
        _this.dispatch({
          type: videoNamespace + '/muted',
          payload: false
        });
      }
      _this.dispatch({
        type: videoNamespace + '/volume',
        payload: percent * MAX_VOLUME
      });
      _this.isMove = isMove;
      if (!_this.isMove) {
        //为false需要触发状态，更新，为true时redux更新了所以不用使用setState
        _this.setState({ random: Math.random() });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  //这里的配置参考jw-player的api


  _createClass(Volume, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var autoMuted = this.props.autoMuted;

      if (!autoMuted) {
        setTimeout(function () {
          //之所以使用setTimeout，是因为切换视频，最外层palyer jsx没销毁，model/video init后于这个这行
          //这样dispatch就是上一个的视频控制，所以要延时执行。
          //队列比栈后执行，所以setTimeout，0就足够
          var storage_muted = storage.get('muted');
          if (storage_muted) {
            _this2.dispatch({
              type: videoNamespace + '/muted',
              payload: true
            });
          } else {
            _this2.setVolumeFromLocalStorage();
          }
        }, 0);
      }
    }
  }, {
    key: 'setVolumeFromLocalStorage',
    value: function setVolumeFromLocalStorage() {
      var volume = this.props.volume;
      //声音可能为0

      var storage_volume = storage.get('volume');
      var _volume = storage_volume || volume;
      if (storage_volume === 0) {
        //处理storage_volume为0的情况。
        _volume = 0;
      }
      this.dispatch({
        type: videoNamespace + '/volume',
        payload: _volume
      });
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var volume = this.props.volume;

      return React.createElement(
        'div',
        { className: 'html5-player-volume-slider-container' },
        React.createElement(Slider, {
          vertical: true,
          onChange: this.onSliderChange,
          percent: volume / MAX_VOLUME
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          volume = _props.volume,
          muted = _props.muted,
          living = _props.living,
          hasFragment = _props.hasFragment;

      var toTargetGap = 20;
      if (living) {
        toTargetGap = 5;
      } else if (hasFragment) {
        toTargetGap = 30;
      }
      return React.createElement(
        Tooltip,
        {
          content: this.renderContent(),
          show: this.isMove,
          toTargetGap: toTargetGap
        },
        React.createElement(
          'button',
          {
            type: 'button',
            className: 'html5-player-small-button html5-player-volume-button',
            onClick: this.onMuteStateChange
          },
          React.createElement(
            'svg',
            {
              className: classnames('html5-player-icon html5-player-volume-icon', {
                'html5-player-volume-full-icon': volume === 100 && !muted,
                'html5-player-volume-x-icon': volume === 0 || muted,
                'html5-player-volume-part-icon': volume > 0 && volume < 100 && !muted
              }),
              'aria-hidden': 'true'
            },
            React.createElement('use', {
              xlinkHref: classnames({
                '#icon-volume-full': volume === 100 && !muted,
                '#icon-volume-x': volume === 0 || muted,
                '#icon-volume-part': volume > 0 && volume < 100 && !muted
              })
            })
          )
        )
      );
    }
  }]);

  return Volume;
}(React.Component), _class2.propTypes = {}, _temp2)) || _class) || _class);
export { Volume as default };