import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
import isString from 'lodash/isString';
import { connect } from 'react-redux';
import classnames from 'classnames';
//内部依赖包
import clearDecorator from './decorator/clear';
import { namespace as loadingNamespace } from '../model/loading';
import { namespace as errorMessageNamespace } from '../model/error-message';

/**
 * 播放器加载状态的组件
 */
var Loading = (_dec = connect(function (state) {
  var _state$loadingNamespa = state[loadingNamespace],
      loading = _state$loadingNamespa.loading,
      loadingMessage = _state$loadingNamespa.message,
      retryReloadTime = _state$loadingNamespa.retryReloadTime,
      type = _state$loadingNamespa.type;

  return {
    loading: loading,
    loadingMessage: loadingMessage,
    retryReloadTime: retryReloadTime,
    type: type,
    errorInfo: state[errorMessageNamespace]
  };
}), _dec2 = clearDecorator([loadingNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(Loading, _React$Component);

  function Loading() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Loading);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Loading.__proto__ || _Object$getPrototypeOf(Loading)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Loading', _this.state = {}, _this.dispatch = _this.props.dispatch, _temp), _possibleConstructorReturn(_this, _ret);
  }
  //这里的配置参考jw-player的api


  _createClass(Loading, [{
    key: 'getClassName',
    value: function getClassName(flag) {
      var loadingMessage = this.props.loadingMessage;

      return classnames('html5-player-cover-view html5-player-loading-view', {
        'html5-player-hide': flag,
        'html5-player-loading-view-message': loadingMessage
      });
    }
  }, {
    key: 'renderLoadingMessage',
    value: function renderLoadingMessage() {
      var _props = this.props,
          loadingMessage = _props.loadingMessage,
          LoadingMessageComponent = _props.LoadingMessageComponent,
          retryReloadTime = _props.retryReloadTime,
          type = _props.type;

      var props = {
        count: retryReloadTime,
        loadingMessage: loadingMessage,
        type: type
      };
      if (LoadingMessageComponent && isString(LoadingMessageComponent.type)) {
        props = {};
      }
      return React.createElement(
        'span',
        { className: 'html5-player-loading-message' },
        loadingMessage && LoadingMessageComponent ? React.cloneElement(LoadingMessageComponent, props) : loadingMessage
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var loading = this.props.loading;
      var errorMessage = this.props.errorInfo.message;
      // console.log(loadingMessage);

      if (!loading || errorMessage) {
        //这里不return false 是为了方便单元测试判断。
        return React.createElement('div', { className: this.getClassName(true) });
      }
      return React.createElement(
        'div',
        {
          className: this.getClassName(),
          onDoubleClick: function onDoubleClick(e) {
            e.stopPropagation();
          },
          onClick: function onClick(e) {
            e.stopPropagation();
          }
        },
        React.createElement(
          'svg',
          {
            className: 'html5-player-icon html5-player-middle-button html5-player-loading-icon',
            'aria-hidden': 'true'
          },
          React.createElement('use', { xlinkHref: '#icon-loading' })
        ),
        this.renderLoadingMessage()
      );
    }
  }]);

  return Loading;
}(React.Component), _class2.propTypes = {}, _temp2)) || _class) || _class);
export { Loading as default };