import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import isNumber from 'lodash/isNumber';
import isEqual from 'lodash/isEqual';
//内部依赖包
import clearDecorator from '../decorator/clear';
import View from '../../view';
import { ASPECT_RATIO } from '../../utils/const';
import TimeSlider from './time-slider';

import { namespace as historyNamespace } from '../../model/history';

var HistoryPlayer = (_dec = connect(function (state) {
  return {
    historyState: state[historyNamespace]
  };
}), _dec2 = clearDecorator([historyNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(HistoryPlayer, _React$Component);

  function HistoryPlayer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HistoryPlayer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HistoryPlayer.__proto__ || _Object$getPrototypeOf(HistoryPlayer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.dispatch = _this.props.dispatch, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HistoryPlayer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        isHistory: true,
        historyDuration: this.duration()
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var defaultCurrentTime = this.props.defaultCurrentTime;

      this.dispatch({
        type: historyNamespace + '/set',
        payload: {
          fragments: this.fragments(),
          duration: this.duration(),
          defaultCurrentTime: defaultCurrentTime
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!isEqual(nextProps.historyList, this.props.historyList)) {
        //historyList不一样，需要进行更新
        var defaultCurrentTime = nextProps.defaultCurrentTime;

        this.dispatch({
          type: historyNamespace + '/clear'
        });
        this.dispatch({
          type: historyNamespace + '/set',
          payload: {
            fragments: this.fragments(nextProps),
            duration: this.duration(nextProps),
            defaultCurrentTime: defaultCurrentTime
          }
        });
      }
    }
  }, {
    key: 'fragments',
    value: function fragments(props) {
      var _ref2 = props || this.props,
          historyList = _ref2.historyList;

      var fragments = historyList && historyList.fragments && historyList.fragments;
      return fragments || [];
    }
  }, {
    key: 'duration',
    value: function duration(props) {
      var _ref3 = props || this.props,
          historyList = _ref3.historyList;

      return historyList && historyList.duration || 0;
    }
  }, {
    key: 'renderSlider',
    value: function renderSlider() {
      var beginDate = this.props.historyList.beginDate;

      return React.createElement(TimeSlider, {
        fragments: this.fragments(),
        duration: this.duration(),
        beginDateTime: +new Date(beginDate.replace(/-/g, '/')) / 1000
      });
    }
  }, {
    key: 'getAspectratioNumber',
    value: function getAspectratioNumber(aspectratio) {
      var ratio = aspectratio.split(':');
      if (ratio.length !== 2 || isNaN(ratio[0]) || isNaN(ratio[1])) {
        console.warn('Config error:', 'Aspectratio format is wrong,aspectratio format should be "x:y".');
        aspectratio = ASPECT_RATIO;
        ratio = aspectratio.split(':');
      }
      return {
        x: parseInt(ratio[0], 10),
        y: parseInt(ratio[1], 10)
      };
    }
  }, {
    key: 'getContainerStyle',
    value: function getContainerStyle() {
      var _props = this.props,
          _props$aspectratio = _props.aspectratio,
          aspectratio = _props$aspectratio === undefined ? ASPECT_RATIO : _props$aspectratio,
          height = _props.height,
          width = _props.width,
          style = _props.style;

      var containerStyle = {};
      if (width) {
        containerStyle.width = width;
      }
      if (height) {
        containerStyle.height = height;
      }
      if (width && !height && this.playerConainerDOM) {
        //第二次渲染，执行在计算height之前
        width = this.playerConainerDOM.clientWidth;
      }
      if (isNumber(width) && !height) {
        //width是数字是才计算
        var ratio = this.getAspectratioNumber(aspectratio);
        containerStyle.height = width * ratio.y / ratio.x;
      }
      if (style) {
        containerStyle = _extends({}, containerStyle, style);
      }
      return containerStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          noneVideoComponent = _props2.noneVideoComponent,
          autoplay = _props2.autoplay,
          controls = _props2.controls,
          historyList = _props2.historyList,
          _props2$historyState = _props2.historyState,
          file = _props2$historyState.file,
          defaultCurrentVideoTime = _props2$historyState.defaultCurrentVideoTime,
          other = _objectWithoutProperties(_props2, ['noneVideoComponent', 'autoplay', 'controls', 'historyList', 'historyState']);
      //单个视频，也有defaultCurrentTime


      delete other.defaultCurrentTime;
      var containerStyle = this.getContainerStyle();
      if (!this.fragments()) {
        return React.createElement(
          'div',
          { className: 'html5-player-container', style: containerStyle },
          React.createElement(
            'div',
            { className: 'html5-player-error-message-container' },
            !noneVideoComponent && '请选择有视频的时间段',
            noneVideoComponent
          )
        );
      }
      if (!file) {
        return false;
      }
      return React.createElement(View, _extends({}, other, {
        file: file,
        controls: _extends({}, controls, { timeSlider: false, time: false }),
        customTimeSlider: this.renderSlider(),
        autoplay: true,
        defaultCurrentTime: defaultCurrentVideoTime
      }));
    }
  }]);

  return HistoryPlayer;
}(React.Component), _class2.displayName = 'HistoryPlayer ', _class2.propTypes = {
  historyList: PropTypes.oneOfType([PropTypes.object.isRequired, PropTypes.bool.isRequired]),
  noneVideoComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),
  defaultCurrentTime: PropTypes.number
}, _class2.childContextTypes = {
  isHistory: PropTypes.bool,
  historyDuration: PropTypes.number
}, _temp2)) || _class) || _class);
export { HistoryPlayer as default };