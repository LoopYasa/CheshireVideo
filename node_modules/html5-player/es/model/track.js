import _regeneratorRuntime from 'babel-runtime/regenerator';
import { standardReducer } from '../utils/util';
import fetch from '../utils/fetch';
import srtParser from '../utils/srt';

//请求取消函数
var cancel = void 0;

function fetchTrack(url, params) {
  var cancelSource = fetch.getCancelSource();
  cancel = cancelSource.cancel;
  return fetch.get(url, { responseType: 'text', params: params, cancelToken: cancelSource.token }).catch(function (error) {
    return false;
  });
}

export var namespace = 'track';
export default function () {
  //存放subtitle的cues
  var cuesList = [];
  return {
    namespace: namespace,
    state: {
      subtitleId: -1,
      subtitleList: [],
      subtitleCues: null,
      thumbnails: null
    },
    reducers: {
      trackReducer: standardReducer,
      clear: function clear(state, _ref) {
        var payload = _ref.payload;

        cancel && cancel();
        return this.state;
      }
    },
    sagas: {
      subtitleListSaga: /*#__PURE__*/_regeneratorRuntime.mark(function subtitleListSaga(_ref2, _ref3) {
        var _ref2$payload = _ref2.payload,
            subtitleList = _ref2$payload.subtitleList,
            subtitleId = _ref2$payload.subtitleId;
        var put = _ref3.put,
            call = _ref3.call;
        var data;
        return _regeneratorRuntime.wrap(function subtitleListSaga$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = {
                  subtitleId: subtitleId
                };

                if (subtitleList) {
                  data.subtitleList = subtitleList;
                }
                _context.next = 4;
                return put({
                  type: 'trackReducer',
                  payload: data
                });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, subtitleListSaga, this);
      }),
      hlsSubtitleCuesSaga: /*#__PURE__*/_regeneratorRuntime.mark(function hlsSubtitleCuesSaga(_ref4, _ref5) {
        var payload = _ref4.payload;
        var put = _ref5.put,
            call = _ref5.call;
        return _regeneratorRuntime.wrap(function hlsSubtitleCuesSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return put({
                  type: 'trackReducer',
                  payload: {
                    subtitleCues: payload
                  }
                });

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, hlsSubtitleCuesSaga, this);
      }),
      subtitleCuesSaga: /*#__PURE__*/_regeneratorRuntime.mark(function subtitleCuesSaga(_ref6, _ref7) {
        var payload = _ref6.payload;
        var put = _ref7.put,
            call = _ref7.call;
        var data, vtt;
        return _regeneratorRuntime.wrap(function subtitleCuesSaga$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                data = void 0;

                if (!(payload.subtitleId === -1)) {
                  _context3.next = 5;
                  break;
                }

                //关闭字幕
                data = [];
                _context3.next = 15;
                break;

              case 5:
                if (cuesList[payload.subtitleId]) {
                  _context3.next = 14;
                  break;
                }

                _context3.next = 8;
                return call(fetchTrack, payload.file);

              case 8:
                vtt = _context3.sent;

                if (vtt) {
                  _context3.next = 11;
                  break;
                }

                return _context3.abrupt('return');

              case 11:
                data = srtParser(vtt);
                _context3.next = 15;
                break;

              case 14:
                data = cuesList[payload.subtitleId];

              case 15:
                if (data) {
                  cuesList[payload.subtitleId] = data;
                }
                _context3.next = 18;
                return put({
                  type: 'trackReducer',
                  payload: {
                    subtitleCues: data
                  }
                });

              case 18:
              case 'end':
                return _context3.stop();
            }
          }
        }, subtitleCuesSaga, this);
      }),
      thumbnailSaga: /*#__PURE__*/_regeneratorRuntime.mark(function thumbnailSaga(_ref8, _ref9) {
        var payload = _ref8.payload;
        var put = _ref9.put,
            call = _ref9.call;
        var vtt, data;
        return _regeneratorRuntime.wrap(function thumbnailSaga$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return call(fetchTrack, payload.file);

              case 2:
                vtt = _context4.sent;

                if (vtt) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt('return');

              case 5:
                data = srtParser(vtt);

                data.forEach(function (v) {
                  var url = payload.file.split('?')[0].split('/').slice(0, -1).join('/');
                  if (~v.text.indexOf('://')) {
                    url = v.text;
                  } else {
                    url += '/' + v.text;
                  }
                  if (~url.indexOf('#xywh')) {
                    //一张图片中有多张缩略图
                    var matched = /(.+)#xywh=(\d+),(\d+),(\d+),(\d+)/.exec(url);
                    v.thumbnail = matched;
                  } else {
                    //单张图片直接做缩略图
                    v.thumbnail = url;
                  }
                });
                _context4.next = 9;
                return put({
                  type: 'trackReducer',
                  payload: {
                    thumbnails: data
                  }
                });

              case 9:
              case 'end':
                return _context4.stop();
            }
          }
        }, thumbnailSaga, this);
      })
    }
  };
}