import _regeneratorRuntime from 'babel-runtime/regenerator';
import { standardReducer } from '../utils/util';

export var namespace = 'time-slider';
export default function () {
  return {
    namespace: namespace,
    state: {
      //最大值为1
      position: 0,
      buffer: 0,
      duration: 0
    },
    reducers: {
      timeReducer: standardReducer,
      clear: function clear(state, _ref) {
        var payload = _ref.payload;

        return this.state;
      }
    },
    sagas: {
      timeSaga: /*#__PURE__*/_regeneratorRuntime.mark(function timeSaga(_ref2, _ref3) {
        var _ref2$payload = _ref2.payload,
            currentTime = _ref2$payload.currentTime,
            _ref2$payload$duratio = _ref2$payload.duration,
            duration = _ref2$payload$duratio === undefined ? 0 : _ref2$payload$duratio,
            buffer = _ref2$payload.buffer;
        var put = _ref3.put;
        var percent;
        return _regeneratorRuntime.wrap(function timeSaga$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                percent = currentTime / duration;
                // console.log(percent, currentTime, duration);

                if (percent > 1) {
                  percent = 1;
                }
                if (isNaN(percent)) {
                  percent = 0;
                }
                if (isNaN(duration)) {
                  duration = 0;
                }
                _context.next = 6;
                return put({
                  type: 'timeReducer',
                  payload: {
                    percent: percent,
                    buffer: buffer / duration,
                    duration: duration
                  }
                });

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, timeSaga, this);
      })
    }
  };
}