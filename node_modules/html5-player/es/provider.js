import _Promise from 'babel-runtime/core-js/promise';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

//外部依赖包
import React from 'react';
import PropTypes from 'prop-types';
//内部依赖包
import './version';
import Provider from './libs/provider/saga-model-provider';
import modelList from './model-list';
//icon的js
import './assets/icon/iconfont';

var ModelRegister = (_temp2 = _class = function (_React$Component) {
  _inherits(ModelRegister, _React$Component);

  function ModelRegister() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ModelRegister);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModelRegister.__proto__ || _Object$getPrototypeOf(ModelRegister)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'ModelRegister', _this.state = {}, _this.registerModel = function (register) {
      var allModelPromise = modelList.map(function (modelId) {
        var model = require('./model/' + modelId + '.js').default;
        return model;
      });
      return _Promise.all(allModelPromise).then(function (models) {
        models.forEach(function (m) {
          register(m);
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModelRegister, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.registerModel(this.context.sagaStore.register).then(function () {
        _this2.setState({
          canBeRendered: true
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      if (this.state.canBeRendered) {
        return React.createElement(
          'span',
          null,
          children
        );
      } else {
        return false;
      }
    }
  }]);

  return ModelRegister;
}(React.Component), _class.contextTypes = {
  sagaStore: PropTypes.object
}, _temp2);

export default function player(props) {
  return React.createElement(
    Provider,
    {
      production: process.env.NODE_ENV === 'production',
      plugins: [{
        onError: function onError(error, dispatch) {
          console.error(error);
        }
      }]
    },
    React.createElement(
      ModelRegister,
      null,
      props.children
    )
  );
}