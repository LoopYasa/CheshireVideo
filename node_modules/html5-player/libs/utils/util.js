'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.standardReducer = standardReducer;
exports.isM3u8File = isM3u8File;
exports.shouldUseHlsjs = shouldUseHlsjs;
exports.isFlvFile = isFlvFile;
exports.shouldUseFlvjs = shouldUseFlvjs;
exports.isH5VideoSupported = isH5VideoSupported;
exports.isNotTouchEvent = isNotTouchEvent;
exports.trim = trim;
exports.hms = hms;
exports.pad = pad;
exports.seconds = seconds;
exports.joinUrlParams = joinUrlParams;
exports.delay = delay;
exports.randomKey = randomKey;
exports.getChildProps = getChildProps;
exports.getChildName = getChildName;
exports.cloneElement = cloneElement;
exports.dateFormat = dateFormat;
exports.urlProtocolAdapter = urlProtocolAdapter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isNaN = require('lodash/isNaN');

var _isNaN2 = _interopRequireDefault(_isNaN);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _queryString = require('../libs/query-string');

var queryString = _interopRequireWildcard(_queryString);

var _video = require('./video');

var _video2 = _interopRequireDefault(_video);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  标准reducer处理，根据payload进行处理。
 *  action的格式{
 *    type: '',
 *    payload: {}
 *  }
 */
function standardReducer(state, _ref) {
  var payload = _ref.payload;

  return (0, _extends3.default)({}, state, payload);
}
//根据.m3u判断
function isM3u8File() {
  var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  return !!~file.indexOf('.m3u');
}
//是否应该使用hls.js
function shouldUseHlsjs(file) {
  var forceOpenHls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var hlsjs = false;
  if (forceOpenHls || isM3u8File(file) && !_video2.default.canPlayType('application/vnd.apple.mpegurl')) {
    hlsjs = true;
  }
  return hlsjs;
}
//根据.m3u判断
function isFlvFile() {
  var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  return !!~file.indexOf('.flv');
}
//是否应该使用flv.js
function shouldUseFlvjs(file) {
  var flvjs = false;
  if (isFlvFile(file) && !_video2.default.canPlayType('video/x-flv')) {
    flvjs = true;
  }
  return flvjs;
}
//当前浏览器视频支持视频播放
function isH5VideoSupported(file) {
  var match = file.match(/.*\.(.*)$/);
  var suffix = match && match[1];
  if (!suffix) {
    //无后缀名的直接通过。
    return true;
  }
  //以下视频容器格式都是chrome支持的
  var container = {
    mp4: 'video/mp4',
    f4v: 'video/mp4',
    m4v: 'video/mp4',
    mov: 'video/mp4',
    ogv: 'video/ogg',
    ogg: 'video/ogg',
    oga: 'video/ogg',
    vorbis: 'video/ogg',
    webm: 'video/webm',
    m3u8: 'application/vnd.apple.mpegurl',
    m3u: 'application/vnd.apple.mpegurl',
    hls: 'application/vnd.apple.mpegurl'
  };
  if (!_video2.default.canPlayType) {
    //如果canPlayType不存在，返回true，做兼容。
    //测试中PhantomJS不支持canPlayType。
    return true;
  }
  return !!_video2.default.canPlayType(container[suffix]);
}
//是否是手机触摸事件
function isNotTouchEvent(e) {
  return e.touches.length > 1 || e.type.toLowerCase() === 'touchend' && e.touches.length > 0;
}

function trim(inputString) {
  return inputString.replace(/^\s+|\s+$/g, '');
}
//秒转时间格式，根据时间自动判段（mm:ss || HH:mm:ss）
function hms(secondsNumber) {
  var h = Math.floor(secondsNumber / 3600);
  var m = Math.floor(secondsNumber / 60) % 60;
  var s = secondsNumber % 60;
  if ((0, _isNaN2.default)(h) || (0, _isNaN2.default)(m) || (0, _isNaN2.default)(s)) {
    h = 0;
    m = 0;
    s = 0;
  }
  if (h === 0) {
    return pad(m, 2) + ':' + pad(s.toFixed(0), 2);
  }
  return pad(h, 2) + ':' + pad(m, 2) + ':' + pad(s.toFixed(0), 2);
}
//根据提供的长度和字符串长度，向右填充指定字符
function pad(str, length, padder) {
  str = '' + str;
  padder = padder || '0';
  while (str.length < length) {
    str = padder + str;
  }
  return str;
}

// Convert a time-representing string to a number
function seconds(str, frameRate) {
  if (!str) {
    return 0;
  }
  if ((0, _isNumber2.default)(str) && !(0, _isNaN2.default)(str)) {
    return str;
  }

  str = str.replace(',', '.');
  var arr = str.split(':');
  var arrLength = arr.length;
  var sec = 0;
  if (str.slice(-1) === 's') {
    sec = parseFloat(str);
  } else if (str.slice(-1) === 'm') {
    sec = parseFloat(str) * 60;
  } else if (str.slice(-1) === 'h') {
    sec = parseFloat(str) * 3600;
  } else if (arrLength > 1) {
    var secIndex = arrLength - 1;
    if (arrLength === 4) {
      // if frame is included in the string, calculate seconds by dividing by frameRate
      if (frameRate) {
        sec = parseFloat(arr[secIndex]) / frameRate;
      }
      secIndex -= 1;
    }
    sec += parseFloat(arr[secIndex]);
    sec += parseFloat(arr[secIndex - 1]) * 60;
    if (arrLength >= 3) {
      sec += parseFloat(arr[secIndex - 2]) * 3600;
    }
  } else {
    sec = parseFloat(str);
  }
  if ((0, _isNaN2.default)(sec)) {
    return 0;
  }
  return sec;
}

function joinUrlParams(url, newQueryParams, options) {
  return queryString.joinUrlParams(url, newQueryParams, options);
}

function delay(ms) {
  if ((0, _isNaN2.default)(ms)) {
    console.error('请输入正确的毫秒！');
    return;
  }

  var timeoutId = 0;
  var promise = new _promise2.default(function (resolve) {
    timeoutId = setTimeout(function () {
      return resolve(true);
    }, ms);
  });
  promise.clearTimeout = function () {
    clearTimeout(timeoutId);
  };
  return promise;
}

function randomKey() {
  return Math.random().toString(36).substring(7).split('').join('');
}
/**
 * getChildProps 获取react children props，如果children是数组，取第一个。
 * @param  {object} children react children
 * @return {object}          返回children props。
 */
function getChildProps(children) {
  //preact生成环境下children只有一个也变成数组;
  var childProps = (children[0] || children).attributes;
  if (!childProps) {
    childProps = (children[0] || children).props;
  }
  return childProps;
}
//原生html标签才生效
function getChildName(children) {
  //preact生成环境下children只有一个也变成数组;
  var childName = (children[0] || children).nodeName;
  if (!childName) {
    childName = (children[0] || children).type;
  }
  return childName;
}
/**
 * clone单个的chidren，多个的暂不支持。
 */
function cloneElement(element, props, children) {
  var elementProps = getChildProps(element);
  return _react2.default.createElement(getChildName(element), (0, _extends3.default)({}, elementProps, props), [elementProps.children, children]);
}

/**
 *  日期格式转换
 *@param {String||Int} time 时间戳（毫秒级）或 其他的日期的各种格式
 *@param { String } fmt 格式如 YYYY-MM-DD HH:mm:ss.S ==> 2016-07-02 08:09:04.423,可自定义
 *@return 返回自定义的时间格式
 */
function dateFormat(time, fmt) {
  var date = new Date(time);
  var o = {
    'M+': date.getMonth() + 1, //月份
    'D+': date.getDate(), //日
    'H+': date.getHours(), //小时
    'm+': date.getMinutes(), //分
    's+': date.getSeconds(), //秒
    'q+': Math.floor((date.getMonth() + 3) / 3), //季度
    S: date.getMilliseconds() //毫秒
  };
  if (/(Y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  for (var k in o) {
    if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
  }return fmt;
}
/**
 * 视频url的协议类型，如果传进来的是`//www.test.com/xxxx`
 * @param {string} url url参数
 */
function urlProtocolAdapter(url) {
  if (url.trim().indexOf('//') === 0) {
    return '' + location.protocol + url;
  } else {
    return url;
  }
}