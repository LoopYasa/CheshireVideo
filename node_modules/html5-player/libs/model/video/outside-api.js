'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.default = function (payload, sagas) {
  return new OutsideApi(payload, sagas);
};

var _index = require('./index');

var _selection = require('../selection');

var _history = require('../history');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//忽略的saga名，不忽略的saga名注意不要跟下面的properties重复
var outSideSagas = ['play', 'pause', 'volume', 'muted', 'replay', 'seeking', 'fullscreen', 'controlbar', 'errorMessage', 'playbackRate'];

var oustSidePropertyList = ['playing', 'ended', 'loading', 'bufferTime', 'seekingState', 'currentTime', 'duration', 'isError'];

var OutsideApi = function () {
  // eslint-disable-next-line
  function OutsideApi(payload, sagas) {
    var _this = this;

    (0, _classCallCheck3.default)(this, OutsideApi);

    this.api = payload.api;
    this.dispatch = payload.dispatch;
    this.config = payload.config;
    this.autoplay = payload.config.autoplay;
    this.sagas = sagas;
    var api = payload.api;
    //begin--对外提供的借口
    var outSideApi = {
      on: api.on.bind(api),
      off: api.off.bind(api),
      setCurrentTime: function setCurrentTime(currentTime) {
        _this.api.currentTime = currentTime;
      }
    };
    this.getSagaFunction(outSideApi);
    this.getProperty(outSideApi);
    payload.videoCallback && payload.videoCallback(outSideApi);
    return outSideApi;
  }

  (0, _createClass3.default)(OutsideApi, [{
    key: 'getSagaFunction',
    value: function getSagaFunction(outSideApi) {
      var _this2 = this;

      var dispatch = this.dispatch;

      var _loop = function _loop(k) {
        var sagaName = k.replace(_index.namespace + '/', '');
        if (!!~outSideSagas.indexOf(sagaName)) {
          var funcName = void 0;
          switch (sagaName) {
            case 'volume':
              funcName = 'setVolume';
              break;
            case 'muted':
              funcName = 'setMuted';
              break;
            case 'seeking':
              funcName = 'setSeeking';
              break;
            case 'errorMessage':
              funcName = 'showErrorMessage';
              break;
            case 'playbackRate':
              funcName = 'setPlaybackRate';
              break;
            default:
              funcName = sagaName;
          }
          // eslint-disable-next-line
          outSideApi[funcName] = function () {
            var action = {
              type: k
            };
            switch (sagaName) {
              case 'seeking':
                if (_this2.config.isHistory) {
                  action = {
                    type: _history.namespace + '/setSliderPercent',
                    payload: {
                      percent: arguments.length <= 0 ? undefined : arguments[0]
                    }
                  };
                  dispatch = function dispatch() {
                    _this2.dispatch({
                      type: _index.namespace + '/seekingState',
                      payload: true
                    });
                    _this2.dispatch.apply(_this2, arguments);
                    _this2.dispatch({
                      type: _index.namespace + '/seekingState',
                      payload: false
                    });
                  };
                } else {
                  action.payload = { percent: arguments.length <= 0 ? undefined : arguments[0], pause: true };
                }
                break;
              case 'controlbar':
                action.payload = arguments.length <= 0 ? undefined : arguments[0];
                action.delayTime = arguments.length <= 1 ? undefined : arguments[1];
                action.onControlbarEnter = arguments.length <= 2 ? undefined : arguments[2];
                break;
              case 'errorMessage':
                action.payload = { message: arguments.length <= 0 ? undefined : arguments[0] };
                break;
              default:
                if (arguments.length <= 0 ? undefined : arguments[0]) {
                  action.payload = arguments.length <= 0 ? undefined : arguments[0];
                }
            }
            dispatch(action);
          };
        }
      };

      for (var k in this.sagas) {
        _loop(k);
      }
      outSideApi['setSelection'] = function (payload) {
        var action = {
          type: _selection.namespace + '/dataReducer',
          payload: payload
        };
        dispatch(action);
        //对外提供selection事件
        _this2.api.trigger('selection', action.payload);
      };
    }
  }, {
    key: 'getProperty',
    value: function getProperty(outSideApi) {
      var _this3 = this;

      oustSidePropertyList.forEach(function (v) {
        var key = v;
        if (v === 'seekingState') {
          key = 'seeking';
        }
        (0, _defineProperty2.default)(outSideApi, key, {
          get: function get() {
            if (key === 'duration' && _this3.config.historyDuration) {
              return _this3.config.historyDuration;
            }
            if (key === 'currentTime') {
              return _this3.api.historyCurrentTime;
            }
            return _this3.api[v];
          },
          set: function set() {
            throw new Error(v + ' is read only!');
          },
          enumerable: true
        });
      });
    }
  }]);
  return OutsideApi;
}();