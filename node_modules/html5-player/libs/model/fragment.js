'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.namespace = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = function () {
  return {
    namespace: namespace,
    state: {
      percent: null,
      duration: null,
      timeDuration: null,
      data: null
    },
    reducers: {
      fragmentReducer: _util.standardReducer,
      //合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频
      //但是这个视频不是整个时段的，会有断的，为了给用户知道这段录像哪里断了，需要而外处理
      //sldierReducer这里是为了算出播放中，遇到断片的情况，进行一些跳过处理
      sliderReducer: _util.standardReducer,
      clear: function clear(state, _ref) {
        var payload = _ref.payload;

        cancel && cancel();
        return this.state;
      }
    },
    sagas: {
      fragmentSaga: /*#__PURE__*/_regenerator2.default.mark(function fragmentSaga(_ref2, _ref3) {
        var payload = _ref2.payload;
        var put = _ref3.put,
            call = _ref3.call;

        var data, _data, total, fragments, total_begin, total_end, dataAfterAdapter, duration, gaps, fragmentData;

        return _regenerator2.default.wrap(function fragmentSaga$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = void 0;

                if (!(0, _isString2.default)(payload)) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return call(fetchFragment, payload);

              case 4:
                data = _context.sent;
                _context.next = 8;
                break;

              case 7:
                //防止源数据被改动
                data = payload;

              case 8:
                if (data) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt('return');

              case 10:
                _data = data, total = _data.total, fragments = _data.fragments;

                if (!(!total || !fragments)) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt('return');

              case 13:
                //需要做safari的日期格式兼容。
                total_begin = +new Date(total.begin.replace(/-/g, '/')) / 1000;
                total_end = +new Date(total.end.replace(/-/g, '/')) / 1000;
                dataAfterAdapter = [];
                duration = total_end - total_begin;
                gaps = 0;

                fragments.forEach(function (obj) {
                  if (!obj.begin || !obj.end) {
                    return;
                  }
                  var obj_begin = +new Date(obj.begin.replace(/-/g, '/')) / 1000;
                  var obj_end = +new Date(obj.end.replace(/-/g, '/')) / 1000;
                  // duration中无视频的开始结束的时间，按秒算
                  var begin = obj_begin - total_begin;
                  var end = obj_end - total_begin;
                  // duration 无视频的大小，按秒算
                  var gap = obj_end - obj_begin;
                  gaps += gap;
                  dataAfterAdapter.push({
                    gap: gap,
                    //包括前面的gap
                    gaps: gaps,
                    begin: begin,
                    end: end
                  });
                });
                fragmentData = {};

                if (dataAfterAdapter.length > 0) {
                  fragmentData = {
                    duration: duration,
                    timeDuration: (0, _util.hms)(duration),
                    data: dataAfterAdapter
                  };
                }
                fragmentData.videoBeginDateTime = total_begin;
                _context.next = 24;
                return put({
                  type: 'fragmentReducer',
                  payload: fragmentData
                });

              case 24:
              case 'end':
                return _context.stop();
            }
          }
        }, fragmentSaga, this);
      })
    }
  };
};

var _util = require('../utils/util');

var _fetch = require('../utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//请求取消函数
var cancel = void 0;

function fetchFragment(url, params) {
  var cancelSource = _fetch2.default.getCancelSource();
  cancel = cancelSource.cancel;
  return _fetch2.default.get(url, { params: params, cancelToken: cancelSource.token }).catch(function (error) {
    return false;
  });
}

var namespace = exports.namespace = 'fragment';