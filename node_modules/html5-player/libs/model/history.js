'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.namespace = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = function () {
  var state = {
    fragments: null,
    currentVideoIndex: null,
    file: null,
    percent: 0,
    defaultCurrentVideoTime: undefined
  };
  return {
    namespace: namespace,
    state: (0, _extends3.default)({}, state),
    reducers: {
      setState: _util.standardReducer,
      clear: function clear() {
        return state;
      }
    },
    sagas: {
      time: /*#__PURE__*/_regenerator2.default.mark(function time(_ref, _ref2) {
        var payload = _ref.payload;
        var put = _ref2.put,
            select = _ref2.select;

        var currentVideoTime, _ref3, fragments, currentVideoIndex, historyDuration, totalHistoryTimeBefore, historyCurrentTime;

        return _regenerator2.default.wrap(function time$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                currentVideoTime = payload.currentTime;
                _context.next = 3;
                return select(function (state) {
                  return state[namespace];
                });

              case 3:
                _ref3 = _context.sent;
                fragments = _ref3.fragments;
                currentVideoIndex = _ref3.currentVideoIndex;
                historyDuration = _ref3.duration;
                totalHistoryTimeBefore = getTotalHistoryTimeBeforeByIndex(currentVideoIndex, fragments);
                historyCurrentTime = totalHistoryTimeBefore + currentVideoTime;
                _context.next = 11;
                return put({
                  type: 'setSliderPercent',
                  payload: {
                    percent: historyCurrentTime / historyDuration,
                    shouldNotSeek: true
                  }
                });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, time, this);
      }),
      playNextVideo: /*#__PURE__*/_regenerator2.default.mark(function playNextVideo(_ref4, _ref5) {
        var payload = _ref4.payload;
        var put = _ref5.put,
            select = _ref5.select;

        var _ref6, fragments, currentVideoIndex, historyDuration, nextVideoIndex, totalHistoryTimeBefore, percent;

        return _regenerator2.default.wrap(function playNextVideo$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return select(function (state) {
                  return state[namespace];
                });

              case 2:
                _ref6 = _context2.sent;
                fragments = _ref6.fragments;
                currentVideoIndex = _ref6.currentVideoIndex;
                historyDuration = _ref6.duration;
                nextVideoIndex = currentVideoIndex + 1;
                totalHistoryTimeBefore = getTotalHistoryTimeBeforeByIndex(nextVideoIndex, fragments);
                percent = totalHistoryTimeBefore / historyDuration;
                _context2.next = 11;
                return put({
                  type: 'setSliderPercent',
                  payload: {
                    selectedIndex: nextVideoIndex,
                    percent: percent
                  }
                });

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, playNextVideo, this);
      }),
      setSliderPercent: /*#__PURE__*/_regenerator2.default.mark(function setSliderPercent(_ref7, _ref8) {
        var payload = _ref7.payload;
        var put = _ref8.put,
            select = _ref8.select;

        var percent, selectedIndex, _payload$shouldNotSee, shouldNotSeek, hasDefaultCurrentTime, _ref9, fragments, historyDuration, prevVideoIndex, currentVideoIndex, currentVideoTime, isNoVideo, totalHistoryTimeBefore, _ref10, _ref10$duration, currentVideoDuration, defaultCurrentVideoTime, currentVideoPercent;

        return _regenerator2.default.wrap(function setSliderPercent$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                percent = payload.percent, selectedIndex = payload.selectedIndex, _payload$shouldNotSee = payload.shouldNotSeek, shouldNotSeek = _payload$shouldNotSee === undefined ? false : _payload$shouldNotSee, hasDefaultCurrentTime = payload.hasDefaultCurrentTime;
                _context3.next = 3;
                return select(function (state) {
                  return state[namespace];
                });

              case 3:
                _ref9 = _context3.sent;
                fragments = _ref9.fragments;
                historyDuration = _ref9.duration;
                prevVideoIndex = _ref9.currentVideoIndex;

                if (!selectedIndex) {
                  selectedIndex = getVideoIndexBySliderPercent(percent, historyDuration, fragments);
                }
                currentVideoIndex = getValidCurrentVideoIndex(selectedIndex, fragments);
                currentVideoTime = getVideoCurrentTime(currentVideoIndex, historyDuration * percent, fragments);
                isNoVideo = isNoVideoToBePlayed(selectedIndex, fragments);

                if (isNoVideo) {
                  //没有可继续播放是视频，需要重头播放
                  totalHistoryTimeBefore = getTotalHistoryTimeBeforeByIndex(currentVideoIndex, fragments);

                  percent = totalHistoryTimeBefore / historyDuration;
                }
                _context3.next = 14;
                return select(function (state) {
                  return state[_timeSlider.namespace];
                });

              case 14:
                _ref10 = _context3.sent;
                _ref10$duration = _ref10.duration;
                currentVideoDuration = _ref10$duration === undefined ? 0 : _ref10$duration;
                defaultCurrentVideoTime = void 0;

                if (prevVideoIndex !== currentVideoIndex || hasDefaultCurrentTime) {
                  defaultCurrentVideoTime = currentVideoTime;
                }
                _context3.next = 21;
                return put({
                  type: 'setState',
                  payload: {
                    percent: percent,
                    currentVideoIndex: currentVideoIndex,
                    file: fragments[currentVideoIndex].file,
                    defaultCurrentVideoTime: defaultCurrentVideoTime
                  }
                });

              case 21:
                if (!(currentVideoDuration !== 0 &&
                //index 不一样需要播放下一个视频
                //无需seeking，使用 defaultCurrentVideoTime
                prevVideoIndex === currentVideoIndex)) {
                  _context3.next = 27;
                  break;
                }

                currentVideoPercent = currentVideoTime / currentVideoDuration;

                if (isNoVideo) {
                  //没有可继续播放是视频，需要重头播放
                  currentVideoPercent = 0;
                }

                if (shouldNotSeek) {
                  _context3.next = 27;
                  break;
                }

                _context3.next = 27;
                return put({
                  type: _video.namespace + '/seeking',
                  payload: {
                    percent: currentVideoPercent
                  }
                });

              case 27:
                _context3.next = 29;
                return put({
                  type: _video.namespace + '/setHistoryCurrentTime',
                  payload: {
                    historyCurrentTime: percent * historyDuration
                  }
                });

              case 29:
              case 'end':
                return _context3.stop();
            }
          }
        }, setSliderPercent, this);
      }),
      set: /*#__PURE__*/_regenerator2.default.mark(function set(_ref11, _ref12) {
        var payload = _ref11.payload;
        var put = _ref12.put;
        var fragments, historyDuration, defaultCurrentTime, currentVideoIndex;
        return _regenerator2.default.wrap(function set$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                fragments = payload.fragments, historyDuration = payload.duration, defaultCurrentTime = payload.defaultCurrentTime;
                currentVideoIndex = getValidCurrentVideoIndex(0, fragments);
                _context4.next = 4;
                return put({
                  type: 'setState',
                  payload: {
                    fragments: fragments,
                    currentVideoIndex: currentVideoIndex,
                    file: fragments[currentVideoIndex].file,
                    duration: historyDuration
                  }
                });

              case 4:
                if (defaultCurrentTime > historyDuration) {
                  console.error('The defaultCurrentTime is greater than the duration.');
                  defaultCurrentTime = historyDuration;
                }

                if (!defaultCurrentTime) {
                  _context4.next = 8;
                  break;
                }

                _context4.next = 8;
                return put({
                  type: 'setSliderPercent',
                  payload: {
                    percent: defaultCurrentTime / historyDuration,
                    hasDefaultCurrentTime: true
                  }
                });

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, set, this);
      })
    }
  };
};

var _video = require('./video');

var _timeSlider = require('./time-slider');

var _util = require('../utils/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var namespace = exports.namespace = 'history';


function getValidCurrentVideoIndex(index, fragments) {
  var k = 0;
  while (!fragments[index] || !fragments[index].file) {
    if (index >= fragments.length - 1) {
      index = 0;
    } else {
      index++;
    }
    if (k > fragments.length) {
      //防止死循环
      break;
    }
    k++;
  }

  return index;
}
/**
 * 通过 silder 当前的百分比获取 videoIndex
 * @param {Number} sliderPercent
 * @param {Number} duration history duration
 * @param {Array} fragments historyList fragments
 * @returns {Number} fragments videoIndex
 */
function getVideoIndexBySliderPercent(sliderPercent, historyDuration, fragments) {
  var videoIndex = 0;
  var currentTime = sliderPercent * historyDuration;
  for (var k = 0; k < fragments.length; k++) {
    var v = fragments[k];
    // 左闭右合
    if (v.begin <= currentTime && v.end > currentTime) {
      videoIndex = k;
      break;
    }
  }
  return videoIndex;
}
/**
 * 获取 指定视频段 前面所有视频 所占用的时间，即小于 index 的视频时间
 * @param {Number} index
 * @param {Array} fragments
 * @returns
 */
function getTotalHistoryTimeBeforeByIndex(index, fragments) {
  var historyTime = 0;
  for (var k = 0; k < fragments.length; k++) {
    var v = fragments[k];
    var gaps = v.end - v.begin;
    if (index > k) {
      historyTime += gaps;
    } else {
      break;
    }
  }
  return historyTime;
}
function getVideoCurrentTime(currentVideoIndex, historyCurrentTime, fragments) {
  var currentVideoTime = historyCurrentTime;
  for (var k = 0; k < fragments.length; k++) {
    var v = fragments[k];
    var gaps = v.end - v.begin;
    if (currentVideoIndex > k) {
      currentVideoTime -= gaps;
    } else {
      break;
    }
  }
  if (currentVideoTime < 0) {
    //点击到无视频的位置，才会有负数。
    currentVideoTime = 0;
  }

  return currentVideoTime;
}

/**
 * 视频播放完成，需要重头播放
 * @returns {Boolean}
 */
function isNoVideoToBePlayed(selectedIndex, fragments) {
  var index = getValidCurrentVideoIndex(selectedIndex, fragments);
  if (selectedIndex > index) {
    return true;
  }
}