'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2; //外部依赖包

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _carousel = require('./view/components/carousel');

var _carousel2 = _interopRequireDefault(_carousel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Playlist = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(Playlist, _React$Component);

  function Playlist() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Playlist);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Playlist.__proto__ || (0, _getPrototypeOf2.default)(Playlist)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Playlist', _this.state = {
      activeItem: _this.props.activeItem || 1
    }, _this.setVideoSwitchInterval = function () {
      var _this$props = _this.props,
          playlist = _this$props.playlist,
          videoCarousel = _this$props.videoCarousel;

      if (videoCarousel) {
        clearInterval(_this.clearInterval);
        var time = 1000 * 10;
        if (!isNaN(+(0, _stringify2.default)(videoCarousel))) {
          time = videoCarousel;
        }
        _this.clearInterval = setInterval(function () {
          if (_this.activeItem >= playlist.length) {
            _this.activeItem = 1;
          } else {
            _this.activeItem = _this.activeItem + 1;
          }
        }, time);
      }
    }, _this.setActiveItem = function (value) {
      _this.activeItem = value;
    }, _this.onPlaylistItemClick = function (index) {
      return function (e) {
        _this.setVideoSwitchInterval();
        _this.setState({ activeItem: index + 1 });
      };
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Playlist, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        playlist: this.props.playlist,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setVideoSwitchInterval();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(this.clearInterval);
      this.clearInterval = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          gap = _props.gap,
          showCount = _props.showCount,
          _props$playlist = _props.playlist,
          playlist = _props$playlist === undefined ? [] : _props$playlist,
          other = (0, _objectWithoutProperties3.default)(_props, ['title', 'gap', 'showCount', 'playlist']);
      var activeItem = this.state.activeItem;

      var playerProps = (0, _extends3.default)({}, other, playlist[activeItem - 1], {
        activeItem: activeItem,
        title: _react2.default.createElement(
          'span',
          null,
          playlist[activeItem - 1].title,
          title
        )
      });
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(_index2.default, (0, _extends3.default)({}, playerProps, { playlist: playlist })),
        playlist[0] && _react2.default.createElement(
          'div',
          { className: 'html5-player-playlist-container' },
          _react2.default.createElement(
            _carousel2.default,
            {
              className: 'html5-player-list',
              gap: gap,
              showCount: showCount,
              activeItem: activeItem
            },
            playlist && playlist.map(function (v, k) {
              return _react2.default.createElement(
                'div',
                { key: k, onClick: _this2.onPlaylistItemClick(k) },
                _react2.default.createElement(
                  'div',
                  { className: 'html5-player-carousel-item-cover' },
                  _react2.default.isValidElement(v.cover) && v.cover,
                  (0, _isString2.default)(v.cover) && _react2.default.createElement('img', { alt: '', src: v.cover })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'html5-player-carousel-item-title' },
                  v.title
                )
              );
            })
          )
        )
      );
    }
  }, {
    key: 'activeItem',
    get: function get() {
      return this.state.activeItem;
    },
    set: function set(value) {
      this.setState({ activeItem: value });
    }
  }]);
  return Playlist;
}(_react2.default.Component), _class.propTypes = {
  playlist: _propTypes2.default.array.isRequired,
  //当前选择播放的视频源（播放列表中的某项）
  activeItem: _propTypes2.default.number,
  //视频走定时轮播，没有默认值
  //可以使毫秒设置轮播间隔
  videoCarousel: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool])
}, _class.childContextTypes = {
  playlist: _propTypes2.default.array,
  activeItem: _propTypes2.default.number,
  setActiveItem: _propTypes2.default.func
}, _temp2);
exports.default = Playlist;