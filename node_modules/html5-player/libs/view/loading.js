'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _class, _class2, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _reactRedux = require('react-redux');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clear = require('./decorator/clear');

var _clear2 = _interopRequireDefault(_clear);

var _loading = require('../model/loading');

var _errorMessage = require('../model/error-message');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 播放器加载状态的组件
 */
var Loading = (_dec = (0, _reactRedux.connect)(function (state) {
  var _state$loadingNamespa = state[_loading.namespace],
      loading = _state$loadingNamespa.loading,
      loadingMessage = _state$loadingNamespa.message,
      retryReloadTime = _state$loadingNamespa.retryReloadTime,
      type = _state$loadingNamespa.type;

  return {
    loading: loading,
    loadingMessage: loadingMessage,
    retryReloadTime: retryReloadTime,
    type: type,
    errorInfo: state[_errorMessage.namespace]
  };
}), _dec2 = (0, _clear2.default)([_loading.namespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Loading, _React$Component);

  function Loading() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Loading);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Loading.__proto__ || (0, _getPrototypeOf2.default)(Loading)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Loading', _this.state = {}, _this.dispatch = _this.props.dispatch, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  //这里的配置参考jw-player的api


  (0, _createClass3.default)(Loading, [{
    key: 'getClassName',
    value: function getClassName(flag) {
      var loadingMessage = this.props.loadingMessage;

      return (0, _classnames2.default)('html5-player-cover-view html5-player-loading-view', {
        'html5-player-hide': flag,
        'html5-player-loading-view-message': loadingMessage
      });
    }
  }, {
    key: 'renderLoadingMessage',
    value: function renderLoadingMessage() {
      var _props = this.props,
          loadingMessage = _props.loadingMessage,
          LoadingMessageComponent = _props.LoadingMessageComponent,
          retryReloadTime = _props.retryReloadTime,
          type = _props.type;

      var props = {
        count: retryReloadTime,
        loadingMessage: loadingMessage,
        type: type
      };
      if (LoadingMessageComponent && (0, _isString2.default)(LoadingMessageComponent.type)) {
        props = {};
      }
      return _react2.default.createElement(
        'span',
        { className: 'html5-player-loading-message' },
        loadingMessage && LoadingMessageComponent ? _react2.default.cloneElement(LoadingMessageComponent, props) : loadingMessage
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var loading = this.props.loading;
      var errorMessage = this.props.errorInfo.message;
      // console.log(loadingMessage);

      if (!loading || errorMessage) {
        //这里不return false 是为了方便单元测试判断。
        return _react2.default.createElement('div', { className: this.getClassName(true) });
      }
      return _react2.default.createElement(
        'div',
        {
          className: this.getClassName(),
          onDoubleClick: function onDoubleClick(e) {
            e.stopPropagation();
          },
          onClick: function onClick(e) {
            e.stopPropagation();
          }
        },
        _react2.default.createElement(
          'svg',
          {
            className: 'html5-player-icon html5-player-middle-button html5-player-loading-icon',
            'aria-hidden': 'true'
          },
          _react2.default.createElement('use', { xlinkHref: '#icon-loading' })
        ),
        this.renderLoadingMessage()
      );
    }
  }]);
  return Loading;
}(_react2.default.Component), _class2.propTypes = {}, _temp2)) || _class) || _class);
exports.default = Loading;