'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _class, _class2, _temp2; //外部依赖包

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clear = require('../../decorator/clear');

var _clear2 = _interopRequireDefault(_clear);

var _slider = require('../../components/slider');

var _slider2 = _interopRequireDefault(_slider);

var _timeTooltip = require('./time-tooltip');

var _timeTooltip2 = _interopRequireDefault(_timeTooltip);

var _selection = require('./selection');

var _selection2 = _interopRequireDefault(_selection);

var _video = require('../../../model/video');

var _timeSlider = require('../../../model/time-slider');

var _selection3 = require('../../../model/selection');

var _errorMessage = require('../../../model/error-message');

var _history = require('../../../model/history');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 播放器加载状态的组件
 */
var TimeSlider = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    sliderModel: state[_timeSlider.namespace],
    selection: state[_selection3.namespace],
    isError: !!state[_errorMessage.namespace].message,
    historyState: state[_history.namespace]
  };
}), _dec2 = (0, _clear2.default)([_timeSlider.namespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(TimeSlider, _React$Component);

  function TimeSlider() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, TimeSlider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TimeSlider.__proto__ || (0, _getPrototypeOf2.default)(TimeSlider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.dispatch = _this.props.dispatch, _this.onSliderChange = function (percent) {
      if (_this.isSeekingDisabled) {
        return;
      }
      _this.dispatch({
        type: _history.namespace + '/setSliderPercent',
        payload: {
          percent: percent
        }
      });
    }, _this.onMouseDown = function (e) {
      if (_this.isSeekingDisabled) {
        return;
      }
      _this.dispatch({
        type: _video.namespace + '/seekingState',
        payload: true
      });
    }, _this.onMouseUp = function (e) {
      if (_this.isSeekingDisabled) {
        return;
      }
      _this.dispatch({
        type: _video.namespace + '/seekingState',
        payload: false
      });
    }, _this.onLeftSelectionBlur = function (percent) {
      _this.dispatch({
        type: _video.namespace + '/selection',
        payload: {
          type: 'left-blur',
          percent: percent,
          duration: _this.duration
        }
      });
    }, _this.onLeftSelectionChange = function (percent) {
      _this.dispatch({
        type: _video.namespace + '/selection',
        payload: {
          type: 'left-change',
          percent: percent,
          duration: _this.duration
        }
      });
    }, _this.onRightSelectionChange = function (percent) {
      _this.dispatch({
        type: _video.namespace + '/selection',
        payload: {
          type: 'right-change',
          percent: percent,
          duration: _this.duration
        }
      });
    }, _this.onRightSelectionBlur = function (percent) {
      _this.dispatch({
        type: _video.namespace + '/selection',
        payload: {
          type: 'right-blur',
          percent: percent,
          duration: _this.duration
        }
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(TimeSlider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        timeSliderDOM: this.timeSliderDOM
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.timeSliderDOM = _reactDom2.default.findDOMNode(this.refs.slider);
    }
  }, {
    key: 'renderSelection',

    /**
     * 在有fragment的前提下，渲染可以选择播放的操作按钮
     */
    value: function renderSelection() {
      var selection = this.props.selection;

      if (!selection) {
        return false;
      }
      var begin = selection.begin,
          end = selection.end;

      var duration = this.duration;
      if (end > duration) {
        end = duration;
      }
      var leftPercent = begin / duration;
      var rightPercent = end / duration;
      return _react2.default.createElement(
        'span',
        { className: 'html5-player-selection-container' },
        _react2.default.createElement(
          _selection2.default,
          {
            className: 'html5-player-selection-left',
            percent: leftPercent,
            onBlur: this.onLeftSelectionBlur,
            onChange: this.onLeftSelectionChange
          },
          this.context.leftSelectionComponent
        ),
        _react2.default.createElement(
          _selection2.default,
          {
            percent: rightPercent,
            className: 'html5-player-selection-right',
            onChange: this.onRightSelectionChange,
            onBlur: this.onRightSelectionBlur
          },
          this.context.rightSelectionComponent
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          fragments = _props.fragments,
          beginDateTime = _props.beginDateTime,
          selection = _props.selection,
          isError = _props.isError,
          percent = _props.historyState.percent;

      var duration = this.duration;
      return _react2.default.createElement(
        _slider2.default,
        {
          ref: 'slider',
          onChange: this.onSliderChange,
          percent: percent,
          padding: '0 10px',
          className: (0, _classnames2.default)('html5-player-time-slider', 'html5-player-track-history-slider', {
            'html5-player-hide': isError
          }),
          onMouseDown: this.onMouseDown,
          onMouseUp: this.onMouseUp,
          onlyShowCircleOnEnter: true
        },
        selection && this.renderSelection(),
        _react2.default.createElement(
          'div',
          {
            style: {
              overflow: 'hidden',
              position: 'absolute',
              height: '100%',
              width: '100%'
            }
          },
          fragments && fragments.map(function (v, k) {
            var gap = v.end - v.begin;

            var width = gap / duration * 100 + '%';
            if (fragments.length === k + 1) {
              //这样才会覆盖整个slider
              width = (gap / duration + 0.1) * 100 + '%';
            }
            var left = v.begin / duration * 100 + '%';
            var style = {
              left: left,
              width: width
            };
            return _react2.default.createElement('div', {
              key: k,
              className: (0, _classnames2.default)({
                'html5-player-broken': !v.file,
                'html5-player-hasvideo': v.file
              }),
              style: style
            });
          })
        ),
        _react2.default.createElement(_timeTooltip2.default, { duration: duration, beginDateTime: beginDateTime })
      );
    }
  }, {
    key: 'isSeekingDisabled',
    get: function get() {
      var selection = this.props.selection;

      if (selection && selection.seekingDisabled) {
        return true;
      }
      return false;
    }
  }, {
    key: 'duration',
    get: function get() {
      var _props2 = this.props,
          duration = _props2.duration,
          sliderModel = _props2.sliderModel;
      var _sliderModel$duration = sliderModel.duration,
          currentVideoDuration = _sliderModel$duration === undefined ? 0 : _sliderModel$duration;

      if (currentVideoDuration > duration) {
        //只有一个视频的时候，会存在误差
        duration = currentVideoDuration;
      }
      return duration;
    }
  }]);
  return TimeSlider;
}(_react2.default.Component), _class2.propTypes = {}, _class2.displayName = 'TimeSlider', _class2.contextTypes = {
  leftSelectionComponent: _propTypes2.default.element,
  rightSelectionComponent: _propTypes2.default.element
}, _class2.childContextTypes = {
  timeSliderDOM: _propTypes2.default.object
}, _temp2)) || _class) || _class);
exports.default = TimeSlider;