'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _class, _class2, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';

//import classnames from 'classnames';
//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _clear = require('./decorator/clear');

var _clear2 = _interopRequireDefault(_clear);

var _fragment = require('../model/fragment');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * fragment是video断片处理
 * 合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频
 * 但是这个视频不是整个时段的，会有断的，为了给用户知道这段录像哪里断了，需要而外处理
 */
var Fragment = (_dec = (0, _reactRedux.connect)(function (state) {
  return {};
}), _dec2 = (0, _clear2.default)([_fragment.namespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Fragment, _React$Component);

  function Fragment() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Fragment);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Fragment.__proto__ || (0, _getPrototypeOf2.default)(Fragment)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Fragment', _this.dispatch = _this.props.dispatch, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Fragment, [{
    key: 'getData',
    value: function getData() {
      var url = this.props.url;

      this.dispatch({
        type: _fragment.namespace + '/fragmentSaga',
        payload: url
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.getData();
    }
  }, {
    key: 'render',
    value: function render() {
      return false;
    }
  }]);
  return Fragment;
}(_react2.default.Component), _class2.propTypes = {
  //现在支持传对象进来
  url: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
}, _temp2)) || _class) || _class);
exports.default = Fragment;