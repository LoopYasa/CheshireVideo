'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _class, _class2, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clear = require('../decorator/clear');

var _clear2 = _interopRequireDefault(_clear);

var _tooltip = require('../components/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _slider = require('../components/slider');

var _slider2 = _interopRequireDefault(_slider);

var _const = require('../../utils/const');

var _volume2 = require('../../model/volume');

var _muted = require('../../model/muted');

var _video = require('../../model/video');

var _storage = require('../../utils/storage');

var storage = _interopRequireWildcard(_storage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 播放器加载状态的组件
 */
var Volume = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    volume: state[_volume2.namespace],
    muted: state[_muted.namespace]
  };
}), _dec2 = (0, _clear2.default)([_volume2.namespace, _muted.namespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Volume, _React$Component);

  function Volume() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Volume);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Volume.__proto__ || (0, _getPrototypeOf2.default)(Volume)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Volume', _this.state = {}, _this.dispatch = _this.props.dispatch, _this.onMuteStateChange = function (e) {
      e.stopPropagation();
      var muted = _this.props.muted;

      var storage_volume = storage.get('volume');
      if (muted && storage_volume !== 0) {
        //如果是静音，解除静音后原声音值需要还原
        _this.setVolumeFromLocalStorage();
      } else if (storage_volume === 0) {
        _this.dispatch({
          type: _video.namespace + '/volume',
          //如果原声音为0，点击静音按钮，设置声音值为10
          payload: 10
        });
      }
      if (storage_volume !== 0) {
        //进行静音或者取消静音操作
        _this.dispatch({
          type: _video.namespace + '/muted',
          payload: !muted
        });
      }
    }, _this.onSliderChange = function (percent, isMove) {
      var muted = _this.props.muted;

      if (muted) {
        //如果是静音，解除静音。
        _this.dispatch({
          type: _video.namespace + '/muted',
          payload: false
        });
      }
      _this.dispatch({
        type: _video.namespace + '/volume',
        payload: percent * _const.MAX_VOLUME
      });
      _this.isMove = isMove;
      if (!_this.isMove) {
        //为false需要触发状态，更新，为true时redux更新了所以不用使用setState
        _this.setState({ random: Math.random() });
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  //这里的配置参考jw-player的api


  (0, _createClass3.default)(Volume, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var autoMuted = this.props.autoMuted;

      if (!autoMuted) {
        setTimeout(function () {
          //之所以使用setTimeout，是因为切换视频，最外层palyer jsx没销毁，model/video init后于这个这行
          //这样dispatch就是上一个的视频控制，所以要延时执行。
          //队列比栈后执行，所以setTimeout，0就足够
          var storage_muted = storage.get('muted');
          if (storage_muted) {
            _this2.dispatch({
              type: _video.namespace + '/muted',
              payload: true
            });
          } else {
            _this2.setVolumeFromLocalStorage();
          }
        }, 0);
      }
    }
  }, {
    key: 'setVolumeFromLocalStorage',
    value: function setVolumeFromLocalStorage() {
      var volume = this.props.volume;
      //声音可能为0

      var storage_volume = storage.get('volume');
      var _volume = storage_volume || volume;
      if (storage_volume === 0) {
        //处理storage_volume为0的情况。
        _volume = 0;
      }
      this.dispatch({
        type: _video.namespace + '/volume',
        payload: _volume
      });
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var volume = this.props.volume;

      return _react2.default.createElement(
        'div',
        { className: 'html5-player-volume-slider-container' },
        _react2.default.createElement(_slider2.default, {
          vertical: true,
          onChange: this.onSliderChange,
          percent: volume / _const.MAX_VOLUME
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          volume = _props.volume,
          muted = _props.muted,
          living = _props.living,
          hasFragment = _props.hasFragment;

      var toTargetGap = 20;
      if (living) {
        toTargetGap = 5;
      } else if (hasFragment) {
        toTargetGap = 30;
      }
      return _react2.default.createElement(
        _tooltip2.default,
        {
          content: this.renderContent(),
          show: this.isMove,
          toTargetGap: toTargetGap
        },
        _react2.default.createElement(
          'button',
          {
            type: 'button',
            className: 'html5-player-small-button html5-player-volume-button',
            onClick: this.onMuteStateChange
          },
          _react2.default.createElement(
            'svg',
            {
              className: (0, _classnames2.default)('html5-player-icon html5-player-volume-icon', {
                'html5-player-volume-full-icon': volume === 100 && !muted,
                'html5-player-volume-x-icon': volume === 0 || muted,
                'html5-player-volume-part-icon': volume > 0 && volume < 100 && !muted
              }),
              'aria-hidden': 'true'
            },
            _react2.default.createElement('use', {
              xlinkHref: (0, _classnames2.default)({
                '#icon-volume-full': volume === 100 && !muted,
                '#icon-volume-x': volume === 0 || muted,
                '#icon-volume-part': volume > 0 && volume < 100 && !muted
              })
            })
          )
        )
      );
    }
  }]);
  return Volume;
}(_react2.default.Component), _class2.propTypes = {}, _temp2)) || _class) || _class);
exports.default = Volume;