'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _addEventListener = require('../../utils/dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Slider = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(Slider, _React$Component);

  function Slider() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Slider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Slider.__proto__ || (0, _getPrototypeOf2.default)(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Slider', _this.state = {}, _this.dispatch = _this.props.dispatch, _this.percent = 0, _this.events = [], _this.eventsAfterMouseDown = [], _this.onEnd = function (e) {
      e.stopPropagation();
      _this.removeEventsAfterMouseDown();
      //结束设置isMove为false
      _this.onChange(_this.percent, false);
      //document和time-line的mouseup都要触发
      var onMouseUp = _this.props.onMouseUp;

      onMouseUp && onMouseUp(e);
    }, _this.onChange = function (percent, isMove) {
      var onChange = _this.props.onChange;

      onChange && onChange(percent, isMove);
    }, _this.onMouseDown = function (e) {
      e.stopPropagation();
      var _this$props = _this.props,
          vertical = _this$props.vertical,
          onMouseDown = _this$props.onMouseDown;

      var position = _this.getMousePosition(vertical, e);
      _this.removeEventsAfterMouseDown();
      _this.onStart(position);
      _this.bindEventsAfterMouseDown();
      onMouseDown && onMouseDown(e);
    }, _this.onMouseUp = function (e) {
      e.stopPropagation();
      _this.onEnd(e);
    }, _this.onMouseMove = function (e) {
      e.stopPropagation();
      var vertical = _this.props.vertical;

      var position = _this.getMousePosition(vertical, e);
      _this.onStart(position, true);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.sliderDOM = this.refs.slider;
      this.sliderContainerDOM = this.refs['slider-container'];
      this.bindEvents();
      this.document = this.sliderDOM.ownerDocument;
      var _props = this.props,
          percent = _props.percent,
          defaultPercent = _props.defaultPercent;

      if (percent !== undefined || defaultPercent !== undefined) {
        this.setSliderValueByPercent(percent || defaultPercent);
        this.setState({ random: Math.random() });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextPercent = nextProps.percent;
      var thisPercent = this.props.percent;

      if (thisPercent || thisPercent === 0) {
        if (nextPercent !== thisPercent) {
          this.setSliderValueByPercent(nextPercent);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeEvents();
      this.removeEventsAfterMouseDown();
    }
  }, {
    key: 'removeEvents',
    value: function removeEvents() {
      //移除事件
      this.events.forEach(function (v) {
        v.remove && v.remove();
      });
    }
  }, {
    key: 'bindEvents',
    value: function bindEvents() {
      //像mousemove、mousedown、mouseup等事件，直接使用jsx绑定方式，在高德地图上的tooltip会失效。
      this.events.push((0, _addEventListener2.default)(this.sliderContainerDOM, 'mousedown', this.onMouseDown));
      this.events.push((0, _addEventListener2.default)(this.sliderContainerDOM, 'mouseup', this.onMouseUp));
    }
  }, {
    key: 'setSliderValueByPercent',
    value: function setSliderValueByPercent() {
      var percent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      this.percent = percent;
    }
  }, {
    key: 'bindEventsAfterMouseDown',
    value: function bindEventsAfterMouseDown() {
      this.eventsAfterMouseDown.push((0, _addEventListener2.default)(this.document, 'mousemove', this.onMouseMove));
      this.eventsAfterMouseDown.push((0, _addEventListener2.default)(this.document, 'mouseup', this.onEnd));
      this.eventsAfterMouseDown.push((0, _addEventListener2.default)(this.sliderContainerDOM, 'mousemove', this.onMouseMove));
    }
  }, {
    key: 'removeEventsAfterMouseDown',
    value: function removeEventsAfterMouseDown() {
      //移除事件
      this.eventsAfterMouseDown.forEach(function (v) {
        v.remove && v.remove();
      });
    }
  }, {
    key: 'getSliderLength',
    value: function getSliderLength() {
      var slider = this.sliderDOM;
      if (!slider) {
        return 0;
      }
      var coords = slider.getBoundingClientRect();
      return this.props.vertical ? coords.height : coords.width;
    }
  }, {
    key: 'getSliderStart',
    value: function getSliderStart() {
      var slider = this.sliderDOM;
      var rect = slider.getBoundingClientRect();
      if (rect.left < slider.offsetLeft || rect.top < slider.offsetTop) {
        return this.props.vertical ? slider.offsetTop : slider.offsetLeft;
      }
      return this.props.vertical ? rect.top : rect.left;
    }
  }, {
    key: 'calcValueByPos',
    value: function calcValueByPos(position) {
      var pixelOffset = position - this.getSliderStart();
      return pixelOffset;
    }
  }, {
    key: 'getMousePosition',
    value: function getMousePosition(vertical, e) {
      return vertical ? e.clientY : e.pageX;
    }
  }, {
    key: 'onStart',
    value: function onStart(position, isMove) {
      var value = this.calcValueByPos(position);
      var sliderLength = this.getSliderLength();
      if (value < 0) {
        value = 0;
      }
      if (value > sliderLength) {
        value = sliderLength;
      }
      var percent = value / sliderLength;
      var _props2 = this.props,
          defaultPercent = _props2.defaultPercent,
          vertical = _props2.vertical;

      if (vertical) {
        percent = 1 - percent;
      }
      if (defaultPercent || defaultPercent === 0) {
        this.percent = percent;
        this.setState({ random: Math.random() });
      }
      this.onChange(percent, isMove);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          children = _props3.children,
          vertical = _props3.vertical,
          width = _props3.width,
          height = _props3.height,
          padding = _props3.padding,
          onlyShowCircleOnEnter = _props3.onlyShowCircleOnEnter,
          className = _props3.className;

      var containerStyle = {};
      if (width) {
        containerStyle.width = width;
      }
      if (width) {
        containerStyle.height = height;
      }
      if (padding) {
        containerStyle.padding = padding;
      }
      var circleStyle = {};
      var trackStyle = {};
      if (vertical) {
        circleStyle.top = (1 - this.percent) * 100 + '%';
        trackStyle.height = this.percent * 100 + '%';
      } else {
        circleStyle.left = this.percent * 100 + '%';
        trackStyle.width = this.percent * 100 + '%';
      }
      return _react2.default.createElement(
        'div',
        {
          ref: 'slider-container',
          style: containerStyle,
          className: (0, _classnames2.default)('html5-player-slider-container', {
            'html5-player-slider-vertical-container': vertical,
            'html5-player-slider-horizontal-container': !vertical
          }, className),
          onClick: function onClick(e) {
            e.stopPropagation();
          },
          onDoubleClick: function onDoubleClick(e) {
            e.stopPropagation();
          }
        },
        _react2.default.createElement(
          'div',
          {
            ref: 'slider',
            className: (0, _classnames2.default)('html5-player-slider-rail', {
              'html5-player-slider-vertical-rail': vertical,
              'html5-player-slider-horizontal-rail': !vertical,
              'html5-player-slider-onenter-rail': onlyShowCircleOnEnter
            })
          },
          children,
          _react2.default.createElement('div', {
            style: trackStyle,
            className: (0, _classnames2.default)('html5-player-slider-track', {
              'html5-player-slider-vertical-track': vertical,
              'html5-player-slider-horizontal-track': !vertical
            })
          }),
          _react2.default.createElement('div', {
            style: circleStyle,
            className: (0, _classnames2.default)('html5-player-slider-circle', {
              'html5-player-slider-vertical-circle': vertical,
              'html5-player-slider-horizontal-circle': !vertical
            })
          })
        )
      );
    }
  }]);
  return Slider;
}(_react2.default.Component), _class.propTypes = {
  //是否是垂直的
  vertical: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  //跟input的一样有default的percent，最大值为1
  percent: _propTypes2.default.number,
  defaultPercent: _propTypes2.default.number,
  //只在移上去的时候显示圆点。
  onlyShowCircleOnEnter: _propTypes2.default.bool
}, _temp2);
exports.default = Slider;