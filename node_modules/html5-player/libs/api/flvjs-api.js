'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _api = require('./api');

var _api2 = _interopRequireDefault(_api);

var _logger = require('../utils/logger');

var logger = _interopRequireWildcard(_logger);

var _const = require('../utils//const');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var flvAPI = function (_API) {
  (0, _inherits3.default)(flvAPI, _API);

  function flvAPI(videoDOM, file, flvjs) {
    var _this2, _ret;

    var flvConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    (0, _classCallCheck3.default)(this, flvAPI);

    var _this = (_this2 = (0, _possibleConstructorReturn3.default)(this, (flvAPI.__proto__ || (0, _getPrototypeOf2.default)(flvAPI)).call(this, videoDOM, file)), _this2);
    _this2.flvConfig = flvConfig;
    if (flvjs.isSupported()) {
      flvjs.LoggingControl.enableDebug = false;
      flvjs.LoggingControl.enableVerbose = false;
      flvjs.LoggingControl.enableWarn = false;
      _this2.flvjs = flvjs;
    }
    return _ret = _this, (0, _possibleConstructorReturn3.default)(_this2, _ret);
  }

  (0, _createClass3.default)(flvAPI, [{
    key: 'detachMedia',
    value: function detachMedia() {
      var player = this.flvPlayer;
      if (player) {
        this.pause();
        this.detachEvent();
        player.unload();
        player.detachMediaElement();
        player.destroy();
        this.flvPlayer = null;
        logger.success('Detach Media:', 'detach media for flv.js sucessfully.');
      }
      this.videoDOM.src = '';
    }
    //载入视频源，这里不可以用箭头函数

  }, {
    key: 'loadSource',
    value: function loadSource(file) {
      var flvjs = this.flvjs;
      if (flvjs) {
        var flvPlayer = flvjs.createPlayer({
          type: 'flv',
          url: file
        }, (0, _extends3.default)({}, this.flvConfig));
        this.flvPlayer = flvPlayer;
        flvPlayer.attachMediaElement(this);
        flvPlayer.load();
        logger.info('Source Loading :', 'loading flv video.');
        //flv的log事件是全局的，这是个坑
        this.attachEvent();
      }
    }
  }, {
    key: 'detachEvent',
    value: function detachEvent() {
      if (this.LoggingControlListener && _const.DEBUG) {
        this.flvjs.LoggingControl.removeLogListener(this.LoggingControlListener);
      }
    }
  }, {
    key: 'attachEvent',
    value: function attachEvent() {
      if (!_const.DEBUG) {
        return;
      }
      // const locale = this.localization;
      var errorTitle = 'Flv.js Error,';
      if (this.flvjs) {
        this.LoggingControlListener = function (type, str) {
          if (type === 'error') {
            // let message;
            if (~str.indexOf('IOController')) {
              logger.error(errorTitle, 'load error');
              // message = locale.fileCouldNotPlay;
              // //一般trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。
              // //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。
              // this.event.trigger('error', {
              //   data: str,
              //   message,
              //   type,
              // });
            }
          }
        };

        this.flvjs.LoggingControl.addLogListener(this.LoggingControlListener);
      }
    }
  }]);
  return flvAPI;
}(_api2.default);

exports.default = flvAPI;