'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.chunkLoadErrorHandler = chunkLoadErrorHandler;
exports.default = selectBundle;

var _logger = require('./utils/logger');

var logger = _interopRequireWildcard(_logger);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function chunkLoadErrorHandler(error) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'h5';

  // Webpack require.ensure error: "Loading chunk 3 failed"
  logger.error('Module Loaded:', 'relative module loaded failed.');
  throw error;
}
//通过配置判断载入的文件
function selectBundle() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var bundle = void 0;
  if (config.hlsjs) {
    bundle = loadHlsJsBundle(config);
  } else if (config.flvjs) {
    bundle = loadFlvJsBundle(config);
  } else {
    bundle = loadHtml5Bundle(config);
  }
  return bundle;
}

function loadFlvJsBundle(config) {
  return new _promise2.default(function (resolve) {
    require.ensure(['flv.ly.js/dist/flv.js', './api/flvjs-api'], function (require) {
      var flvjs = require('flv.ly.js/dist/flv.js');
      logger.success('Module Loaded:', 'relative flv.js module loaded sucessfully.');
      var apiClass = require('./api/flvjs-api').default;
      apiClass.prototype.localization = config.localization;
      if (config.flvConfig && config.flvConfig.enableWorker) {
        //worker，多线程多线程转换流，减少延时（2秒左右）
        config.flvConfig = (0, _extends3.default)({}, config.flvConfig, {
          enableWorker: true,
          // lazyLoad: false,
          //Indicates how many seconds of data to be kept for lazyLoad.
          // lazyLoadMaxDuration: 0,
          // autoCleanupMaxBackwardDuration: 3,
          // autoCleanupMinBackwardDuration: 2,
          // autoCleanupSourceBuffer: true,
          enableStashBuffer: false,
          stashInitialSize: 128,
          isLive: true
        });
      }
      var api = new apiClass(config.videoDOM, config.file, flvjs, config.flvConfig);
      resolve({
        flvjs: flvjs,
        api: api
      });
    }, chunkLoadErrorHandler, 'provider.flvjs');
  });
}

function loadHlsJsBundle(config) {
  return new _promise2.default(function (resolve) {
    require.ensure(['hls.js', './api/hlsjs-api', './model/video/events/hlsjs'], function (require) {
      var hlsjs = require('hls.js');
      logger.success('Module Loaded:', 'relative hls.js module loaded sucessfully.');
      var apiClass = require('./api/hlsjs-api').default;
      apiClass.prototype.localization = config.localization;
      var api = new apiClass(config.videoDOM, config.file, hlsjs);
      var hlsjsEvents = require('./model/video/events/hlsjs').default;
      resolve({
        hlsjs: hlsjs,
        api: api,
        hlsjsEvents: hlsjsEvents
      });
    }, chunkLoadErrorHandler, 'provider.hlsjs');
  });
}

function loadHtml5Bundle(config) {
  return new _promise2.default(function (resolve) {
    var apiClass = require('./api/html5-api').default;
    apiClass.prototype.localization = config.localization;
    var api = new apiClass(config.videoDOM, config.file);
    resolve({
      api: api
    });
  });
}