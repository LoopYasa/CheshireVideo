'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reduxProvider = require('./redux-provider');

var _reduxProvider2 = _interopRequireDefault(_reduxProvider);

var _sagaModel = require('./saga-model');

var _sagaModel2 = _interopRequireDefault(_sagaModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @prop { array } middlewares redux middlewares
 * @prop { array } enhancers redux enhancers
 * @prop { object } reducers redux reducers (传进来后会被combineReducers)
 * @prop { any } preloadedState redux preloadedState
 * @prop { boolean } production 是否是生产环境，默认为true
 */
var ModelProvider = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(ModelProvider, _React$Component);

  function ModelProvider() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ModelProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ModelProvider.__proto__ || (0, _getPrototypeOf2.default)(ModelProvider)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'SagaModelProvider', _this.state = {}, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ModelProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        sagaStore: this.store,
        prefix: this.props.prefix
      };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.store = null;
    }
  }, {
    key: 'getStore',
    value: function getStore() {
      var _props = this.props,
          reducers = _props.reducers,
          preloadedState = _props.preloadedState,
          _props$models = _props.models,
          models = _props$models === undefined ? [] : _props$models,
          _props$middlewares = _props.middlewares,
          middlewares = _props$middlewares === undefined ? [] : _props$middlewares,
          _props$plugins = _props.plugins,
          plugins = _props$plugins === undefined ? [] : _props$plugins,
          _props$production = _props.production,
          production = _props$production === undefined ? true : _props$production;

      var sagaModel = (0, _sagaModel2.default)(reducers, preloadedState, models, middlewares, plugins, !production);
      var store = sagaModel.store();
      return store;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          production = _props2.production;

      if (!this.store) {
        this.store = this.getStore();
      }
      return _react2.default.createElement(
        _reduxProvider2.default,
        { store: this.store, production: production },
        children
      );
    }
  }]);
  return ModelProvider;
}(_react2.default.Component), _class.propTypes = {
  middlewares: _propTypes2.default.array,
  preloadedState: _propTypes2.default.any,
  enhancers: _propTypes2.default.array,
  reducers: _propTypes2.default.object,
  production: _propTypes2.default.bool
}, _class.childContextTypes = {
  sagaStore: _propTypes2.default.object,
  prefix: _propTypes2.default.string
}, _temp2);
exports.default = ModelProvider;