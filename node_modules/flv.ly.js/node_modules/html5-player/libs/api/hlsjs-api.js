'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _api = require('./api');

var _api2 = _interopRequireDefault(_api);

var _logger = require('../utils/logger');

var logger = _interopRequireWildcard(_logger);

var _errorCode = require('../utils/error-code');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hlsAPI = function (_API) {
  (0, _inherits3.default)(hlsAPI, _API);

  function hlsAPI(videoDOM, file, Hls) {
    var _temp, _this2, _ret;

    (0, _classCallCheck3.default)(this, hlsAPI);

    var _this = (_temp = (_this2 = (0, _possibleConstructorReturn3.default)(this, (hlsAPI.__proto__ || (0, _getPrototypeOf2.default)(hlsAPI)).call(this, videoDOM, file)), _this2), _this2.first = true, _temp);
    _this2.file = file;
    if (Hls.isSupported()) {
      _this2.Hls = Hls;
      _this2.hlsObj = new Hls({
        liveDurationInfinity: true,
        levelLoadingTimeOut: 15000,
        fragLoadingTimeOut: 25000,
        enableWorker: true
      });
      //设置默认分辨率根据bandwidth自动选择
      _this2.hlsObj.startLevel = -1;
    }
    return _ret = _this, (0, _possibleConstructorReturn3.default)(_this2, _ret);
  }
  //首次运行


  (0, _createClass3.default)(hlsAPI, [{
    key: 'detachMedia',
    value: function detachMedia() {
      var hls = this.hlsObj;
      if (hls) {
        hls.stopLoad();
        hls.destroy();
        logger.success('Detach Media:', 'detach media for hls.js sucessfully.');
      }
    }
    //载入视频源，这里不可以用箭头函数

  }, {
    key: 'loadSource',
    value: function loadSource(file) {
      var Hls = this.Hls;
      if (Hls) {
        //如果已经有了实例化的播放器，先detach
        var hls = this.hlsObj;
        hls.detachMedia();
        hls.loadSource(file);
        hls.attachMedia(this.videoDOM);
        logger.info('Source Loading :', 'loading hls video.');
        if (this.first) {
          this.first = false;
          this.attachEvent();
        }
      }
    }
  }, {
    key: 'attachEvent',
    value: function attachEvent() {
      var _this3 = this;

      var hlsObj = this.hlsObj;
      var Hls = this.Hls;
      var locale = this.localization;
      if (!hlsObj) {
        return;
      }
      var message = void 0;
      var type = void 0;
      logger.info('Listening:', 'listening on hls.js events.');
      var errorTitle = 'Hls.js Error,';
      var beginDateStamp = 0;
      var endDateStamp = 0;
      var fragmentRequestTime = 0;
      hlsObj.on(Hls.Events.FRAG_LOADING, function () {
        beginDateStamp = +new Date();
      });
      hlsObj.on(Hls.Events.FRAG_LOADED, function (event, data) {
        endDateStamp = +new Date();
        fragmentRequestTime = endDateStamp - beginDateStamp;
        var info = {
          requestTime: fragmentRequestTime,
          duration: data.frag.duration,
          fileSize: data.frag.loaded
          // file: this.file,
        };
        _this3.event.trigger('hlsFragmentInfo', info);
      });
      hlsObj.on(Hls.Events.ERROR, function (event, data) {
        switch (data.details) {
          case Hls.ErrorDetails.MANIFEST_LOAD_ERROR:
            message = locale.fileCouldNotPlay;
            logger.error(errorTitle, 'cannot Load ' + data.context.url);
            type = _errorCode.LOAD_ERROR;
            if (data.response !== undefined) {
              logger.error(errorTitle, 'HTTP response code: ' + data.response.code + ' ' + data.response.text);
              if (data.response.code === 0) {
                message = locale.fileCouldNotPlay;
                logger.error(errorTitle, 'this might be a CORS issue, consider installing https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi Allow-Control-Allow-Origin Chrome Extension');
              }
            }
            break;
          case Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT:
            logger.error(errorTitle, 'timeout while loading manifest');
            message = locale.timeout;
            type = _errorCode.TIMEOUT_ERROR;
            break;
          case Hls.ErrorDetails.MANIFEST_PARSING_ERROR:
            logger.error(errorTitle, 'error while parsing manifest');
            message = locale.fileCouldNotPlay;
            type = _errorCode.CONTENT_PARSING_ERROR;
            break;
          case Hls.ErrorDetails.LEVEL_LOAD_ERROR:
            logger.error(errorTitle, 'error while loading level playlist');
            message = locale.fileCouldNotPlay;
            type = _errorCode.LOAD_ERROR;
            break;
          case Hls.ErrorDetails.LEVEL_LOAD_TIMEOUT:
            message = locale.timeout;
            type = _errorCode.TIMEOUT_ERROR;
            logger.error(errorTitle, 'level load timeout');
            break;
          case Hls.ErrorDetails.LEVEL_SWITCH_ERROR:
            logger.error(errorTitle, 'error while trying to switch to level ' + data.level);
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            break;
          //case Hls.ErrorDetails.FRAG_LOAD_ERROR:
          //console.error('error while loading fragment ' + data.frag.url);
          //message = locale.unknownError;
          //type = UNKNOWN_ERROR;
          //break;
          case Hls.ErrorDetails.FRAG_LOAD_TIMEOUT:
            logger.error(errorTitle, 'timeout while loading fragment ' + data.frag.url);
            message = locale.timeout;
            type = _errorCode.TIMEOUT_ERROR;
            break;
          case Hls.ErrorDetails.FRAG_LOOP_LOADING_ERROR:
            logger.error(errorTitle, 'Frag Loop Loading Error');
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            break;
          case Hls.ErrorDetails.FRAG_DECRYPT_ERROR:
            logger.error(errorTitle, 'Decrypting Error:' + data.reason);
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            break;
          case Hls.ErrorDetails.FRAG_PARSING_ERROR:
            logger.error(errorTitle, 'Parsing Error:' + data.reason);
            message = locale.fileCouldNotPlay;
            type = _errorCode.CONTENT_PARSING_ERROR;
            break;
          case Hls.ErrorDetails.KEY_LOAD_ERROR:
            logger.error(errorTitle, 'error while loading key ' + data.frag.decryptdata.uri);
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            break;
          case Hls.ErrorDetails.KEY_LOAD_TIMEOUT:
            logger.error(errorTitle, 'timeout while loading key ' + data.frag.decryptdata.uri);
            message = locale.timeout;
            type = _errorCode.TIMEOUT_ERROR;
            break;
          case Hls.ErrorDetails.BUFFER_APPEND_ERROR:
            logger.error(errorTitle, 'Buffer Append Error');
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            break;
          case Hls.ErrorDetails.BUFFER_ADD_CODEC_ERROR:
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            logger.error(errorTitle, 'Buffer Add Codec Error for ' + data.mimeType + ':' + data.err.message);
            break;
          case Hls.ErrorDetails.BUFFER_APPENDING_ERROR:
            message = locale.unknownError;
            type = _errorCode.UNKNOWN_ERROR;
            logger.error(errorTitle, 'Buffer Append Error');
            break;
          //case 'fragLoadError':
          //message = locale.fileCouldNotPlay;
          //type = LOAD_ERROR;
          //console.error('fragLoadError Error');
          //break;
          default:
            break;
        }
        if (message) {
          //像buffer错误不用报错
          _this3.event.trigger('error', {
            //一般trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。
            //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。
            data: data,
            message: message,
            type: type
          });
        }
        if (data.fatal) {
          switch (data.type) {
            case Hls.ErrorTypes.MEDIA_ERROR:
              logger.error(errorTitle, 'media error:', data.details);
              break;
            case Hls.ErrorTypes.NETWORK_ERROR:
              logger.error(errorTitle, 'network error:', data.details);
              break;
            default:
              logger.error(errorTitle, 'fatal error:', data.details);
              message = locale.unknownError;
              type = _errorCode.FATAL_ERROR;
              _this3.event.trigger('error', {
                //一般trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。
                //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。
                data: data,
                message: message,
                type: type
              });
              hlsObj.destroy();
              break;
          }
        }
      });
    }
  }]);
  return hlsAPI;
}(_api2.default);

exports.default = hlsAPI;