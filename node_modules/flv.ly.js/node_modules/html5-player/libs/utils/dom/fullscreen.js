'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (elementContext, documentContext, changeCallback) {
  var _requestFullscreen = elementContext.requestFullscreen || elementContext.webkitRequestFullscreen || elementContext.webkitRequestFullScreen || elementContext.mozRequestFullScreen || elementContext.msRequestFullscreen;

  var _exitFullscreen = documentContext.exitFullscreen || documentContext.webkitExitFullscreen || documentContext.webkitCancelFullScreen || documentContext.mozCancelFullScreen || documentContext.msExitFullscreen;

  var _supportsDomFullscreen = !!(_requestFullscreen && _exitFullscreen);

  for (var i = DOCUMENT_FULLSCREEN_EVENTS.length; i--;) {
    documentContext.addEventListener(DOCUMENT_FULLSCREEN_EVENTS[i], changeCallback);
  }

  return {
    events: DOCUMENT_FULLSCREEN_EVENTS,
    supportsDomFullscreen: function supportsDomFullscreen() {
      return _supportsDomFullscreen;
    },
    requestFullscreen: function requestFullscreen() {
      _requestFullscreen.apply(elementContext);
    },
    exitFullscreen: function exitFullscreen() {
      _exitFullscreen.apply(documentContext);
    },
    fullscreenElement: function fullscreenElement() {
      return documentContext.fullscreenElement || documentContext.webkitCurrentFullScreenElement || documentContext.mozFullScreenElement || documentContext.msFullscreenElement;
    },
    remove: function remove() {
      for (var _i = DOCUMENT_FULLSCREEN_EVENTS.length; _i--;) {
        documentContext.removeEventListener(DOCUMENT_FULLSCREEN_EVENTS[_i], changeCallback);
      }
    }
  };
};

var DOCUMENT_FULLSCREEN_EVENTS = ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'];