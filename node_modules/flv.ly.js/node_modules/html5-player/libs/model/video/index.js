'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.namespace = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = function () {
  //model支持方法，也支持纯对象，由于存在多个播放器，有作用域问题
  //需要用到函数，函数返回的是纯对象，_api继承了整个video dom的对象，请参考src/api/api.js的说明。
  var _api = void 0;
  var _dispatch = void 0;
  var _config = void 0;
  //controlbar 隐藏定时器
  var _controlbarClearTimeout = void 0;
  var fullscreenObj = void 0;
  var loadingTimeout = void 0;
  var showLoadingLazyTime = _const.SHOW_LOADING_LAZY_TIME;
  var errorMessageTimeout = void 0;
  var showErrorMessageLazyTime = _const.SHOW_ERROR_MESSAGE_LAZY_TIME;
  var _videoEvents = void 0;
  var subtitleList = void 0;
  var lastCurrentTime = 0;
  //后续存放公共的一些state
  var _state = {
    retryReloadTime: 0
  };
  //init运行一次
  var isFirstRun = true;
  function getTracks() {
    var _config2 = _config,
        tracks = _config2.tracks;

    subtitleList = [];
    //字幕，缩略图等
    if (tracks) {
      var i = 0;
      tracks.forEach(function (v, k) {
        if (v.kind === 'subtitle') {
          subtitleList.push((0, _extends3.default)({}, v, {
            name: v.label,
            id: i
          }));
          i++;
        } else if (v.kind === 'thumbnail') {
          _dispatch({
            type: _track.namespace + '/thumbnailSaga',
            payload: v
          });
        }
      });
      _dispatch({
        type: namespace + '/subtitleList',
        payload: {
          subtitleList: subtitleList,
          subtitleId: -1
        }
      });
    }
  }
  return {
    namespace: namespace,
    state: {
      historyPercent: 0
    },
    reducers: {
      clear: function clear(state, _ref) {
        var payload = _ref.payload;

        _videoEvents && _videoEvents.reset();
        if (_api) {
          _api.pause();
          //移除事件监控
          _api.off();
          _api.detachMedia && _api.detachMedia();
          //重置
          _api.reset();
        }
        return this.state || {};
      }
    },
    sagas: {
      loading: /*#__PURE__*/_regenerator2.default.mark(function loading(_ref2, _ref3) {
        var payload = _ref2.payload;
        var put = _ref3.put;
        return _regenerator2.default.wrap(function loading$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _api.loading = payload;

                if (!(payload && _api.isError)) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return');

              case 3:
                clearTimeout(loadingTimeout);

                if (!payload) {
                  _context.next = 8;
                  break;
                }

                loadingTimeout = setTimeout(function () {
                  //使用setTimeout是为了防止视频很快就可以播放的情况，就不用展示loading。
                  //否则就会对用户造成卡顿假像。
                  _dispatch({
                    type: _loading.namespace + '/setLoadingStateSaga',
                    payload: payload
                  });
                  logger.info('Loading Video:', 'video is not enough to be played');
                  _api.trigger('loading', payload);
                }, showLoadingLazyTime);
                _context.next = 12;
                break;

              case 8:
                _context.next = 10;
                return put({
                  type: _loading.namespace + '/setLoadingStateSaga',
                  payload: payload
                });

              case 10:
                logger.info('Hide Loading:', 'video is enough to be played');
                _api.trigger('loading', payload);

              case 12:
                if (!_api.isError) {
                  _context.next = 15;
                  break;
                }

                _context.next = 15;
                return {
                  type: namespace + '/errorMessage',
                  payload: {
                    message: null
                  }
                };

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, loading, this);
      }),
      playAfterNotAutoplay: /*#__PURE__*/_regenerator2.default.mark(function playAfterNotAutoplay(_ref4, _ref5) {
        var payload = _ref4.payload;
        var put = _ref5.put;
        return _regenerator2.default.wrap(function playAfterNotAutoplay$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_api.playing) {
                  _context2.next = 6;
                  break;
                }

                if (!_config.preload) {
                  //autoplay=false,preload=false
                  _api.loadSource(_config.file);
                  //isLiving强制设置为直播状态。safari中flv无法获取直播状态，所以需要设置这个。
                  if ((!_api.living || _config.isLiving) && lastCurrentTime) {
                    //播放中途出错，重载需要载入上一个播放进度
                    _api.currentTime = lastCurrentTime;
                  }
                  getTracks();
                }
                _context2.next = 4;
                return put({
                  type: 'controlbar',
                  payload: true
                });

              case 4:
                _context2.next = 6;
                return put({
                  type: 'play'
                });

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, playAfterNotAutoplay, this);
      }),
      hideNotAutoPlayView: /*#__PURE__*/_regenerator2.default.mark(function hideNotAutoPlayView(_ref6, _ref7) {
        var payload = _ref6.payload;
        var put = _ref7.put;
        return _regenerator2.default.wrap(function hideNotAutoPlayView$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.info('Hide Not Auto Play View');
                _context3.next = 3;
                return put({
                  type: _notAutoplay.namespace + '/notAutoPlayStateSaga',
                  payload: false
                });

              case 3:
                _api.notAutoPlayViewHide = true;

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, hideNotAutoPlayView, this);
      }),
      play: /*#__PURE__*/_regenerator2.default.mark(function play(_ref8, _ref9) {
        var payload = _ref8.payload;
        var put = _ref9.put;
        return _regenerator2.default.wrap(function play$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!_api.isError) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt('return');

              case 2:
                if (_api.notAutoPlayViewHide) {
                  _context4.next = 5;
                  break;
                }

                _context4.next = 5;
                return put({
                  type: 'hideNotAutoPlayView'
                });

              case 5:
                if (!_api.ended) {
                  _context4.next = 12;
                  break;
                }

                //重新播放
                //重置
                _api.reset();
                //如果已经播放结束，重新播放需要隐藏重新播放按钮
                _context4.next = 9;
                return put({
                  type: 'end',
                  payload: false
                });

              case 9:
                _context4.next = 11;
                return put({
                  type: 'time',
                  payload: {
                    currentTime: 0,
                    duration: _api.duration
                  }
                });

              case 11:
                _api.trigger('replay');

              case 12:
                _api.play();
                logger.info('Play Action', 'start playing');
                _context4.next = 16;
                return put({
                  type: _playPause.namespace + '/playPauseSaga',
                  payload: true
                });

              case 16:
                if (_api.bufferTime) {
                  _context4.next = 21;
                  break;
                }

                _context4.next = 19;
                return put({
                  type: 'loading',
                  payload: true
                });

              case 19:
                _context4.next = 24;
                break;

              case 21:
                if (!(!_api.loading && _api.bufferTime < _api.currentTime ||
                //readyState < 3代表视频就绪状态不足以播放。
                _api.readyState < 3)) {
                  _context4.next = 24;
                  break;
                }

                _context4.next = 24;
                return put({
                  type: 'loading',
                  payload: true
                });

              case 24:
                if (!(!payload || payload && !payload.noControlbarAction)) {
                  _context4.next = 29;
                  break;
                }

                _context4.next = 27;
                return put({
                  type: 'controlbarClearTimeout'
                });

              case 27:
                _context4.next = 29;
                return put({
                  type: 'controlbar',
                  payload: false,
                  delayTime: _config.controlbarHideTime
                });

              case 29:
              case 'end':
                return _context4.stop();
            }
          }
        }, play, this);
      }),
      pause: /*#__PURE__*/_regenerator2.default.mark(function pause(_ref10, _ref11) {
        var payload = _ref10.payload;
        var put = _ref11.put;
        return _regenerator2.default.wrap(function pause$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!_api.isError) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt('return');

              case 2:
                logger.info('Pause Action', 'start pause');
                _api.pause();

                if (_api.playing) {
                  _context5.next = 14;
                  break;
                }

                _context5.next = 7;
                return put({
                  type: _playPause.namespace + '/playPauseSaga',
                  payload: false
                });

              case 7:
                if (!_api.loading) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 10;
                return put({
                  type: 'loading',
                  payload: false
                });

              case 10:
                _context5.next = 12;
                return put({
                  type: 'controlbarClearTimeout'
                });

              case 12:
                _context5.next = 14;
                return put({
                  type: 'controlbar',
                  payload: true
                });

              case 14:
              case 'end':
                return _context5.stop();
            }
          }
        }, pause, this);
      }),
      volume: /*#__PURE__*/_regenerator2.default.mark(function volume(_ref12, _ref13) {
        var _ref12$payload = _ref12.payload,
            payload = _ref12$payload === undefined ? 0 : _ref12$payload;
        var put = _ref13.put;
        var volume, realVideoVolume;
        return _regenerator2.default.wrap(function volume$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                volume = payload;

                if (isNaN(volume)) {
                  //错误兼容处理
                  volume = 0;
                }
                storage.set('volume', volume);
                //转换成真实的video声音值，原生的video声音范围为[0,1]。
                realVideoVolume = volume / _const.MAX_VOLUME * 1;

                _api.setVolume(realVideoVolume);
                _context6.next = 7;
                return put({
                  type: _volume.namespace + '/dataSaga',
                  payload: payload
                });

              case 7:
                _api.trigger('volume', volume);
                logger.info('Set Volume', 'set volume to ' + volume.toFixed(2) + ',the max volume is 100.');

              case 9:
              case 'end':
                return _context6.stop();
            }
          }
        }, volume, this);
      }),
      muted: /*#__PURE__*/_regenerator2.default.mark(function muted(_ref14, _ref15) {
        var _ref14$payload = _ref14.payload,
            payload = _ref14$payload === undefined ? false : _ref14$payload,
            _ref14$autoMuted = _ref14.autoMuted,
            autoMuted = _ref14$autoMuted === undefined ? false : _ref14$autoMuted;
        var put = _ref15.put;
        var muted;
        return _regenerator2.default.wrap(function muted$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                muted = payload;

                if (!autoMuted) {
                  storage.set('muted', muted);
                }
                _api.muted = muted;
                _context7.next = 5;
                return put({
                  type: _muted.namespace + '/dataSaga',
                  payload: payload
                });

              case 5:
                if (!muted) {
                  _context7.next = 8;
                  break;
                }

                _context7.next = 8;
                return put({
                  type: _volume.namespace + '/dataSaga',
                  payload: 0
                });

              case 8:
                _api.trigger('muted', muted);
                if (muted) {
                  logger.info('Set Muted', 'set video muted ');
                } else {
                  logger.info('Cancel Muted', 'cancel video muted ');
                }

              case 10:
              case 'end':
                return _context7.stop();
            }
          }
        }, muted, this);
      }),
      end: /*#__PURE__*/_regenerator2.default.mark(function end(_ref16, _ref17) {
        var payload = _ref16.payload;
        var put = _ref17.put;
        return _regenerator2.default.wrap(function end$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return put({
                  type: 'pause'
                });

              case 2:
                if (!_api.loading) {
                  _context8.next = 5;
                  break;
                }

                _context8.next = 5;
                return put({
                  type: 'loading',
                  payload: false
                });

              case 5:
                _context8.next = 7;
                return put({
                  type: _end3.namespace + '/endStateSaga',
                  payload: payload
                });

              case 7:
                _context8.next = 9;
                return put({
                  type: 'controlbar',
                  payload: true,
                  onControlbarEnter: false
                });

              case 9:
                _context8.next = 11;
                return put({
                  type: 'time',
                  payload: {
                    currentTime: _api.ended ? _api.duration : _api.currentTime,
                    duration: _api.duration
                  }
                });

              case 11:
              case 'end':
                return _context8.stop();
            }
          }
        }, end, this);
      }),
      replay: /*#__PURE__*/_regenerator2.default.mark(function replay(_ref18, _ref19) {
        var payload = _ref18.payload;
        var put = _ref19.put;
        return _regenerator2.default.wrap(function replay$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return put({
                  type: 'time',
                  payload: {
                    currentTime: 0,
                    duration: 0
                  }
                });

              case 2:
                _context9.next = 4;
                return put({
                  type: 'end',
                  payload: false
                });

              case 4:
                _context9.next = 6;
                return put({
                  type: 'play'
                });

              case 6:
                logger.info('Replay', 'replay video when video is ended.');

              case 7:
              case 'end':
                return _context9.stop();
            }
          }
        }, replay, this);
      }),
      time: /*#__PURE__*/_regenerator2.default.mark(function time(_ref20, _ref21) {
        var payload = _ref20.payload;
        var put = _ref21.put,
            select = _ref21.select;
        var reduxStore, fragment;
        return _regenerator2.default.wrap(function time$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (!(_api.isError && !_api.living)) {
                  _context10.next = 5;
                  break;
                }

                _context10.next = 3;
                return put({
                  type: 'errorMessage',
                  payload: {
                    message: null
                  }
                });

              case 3:
                _context10.next = 5;
                return put({
                  type: 'play'
                });

              case 5:
                _context10.next = 7;
                return select();

              case 7:
                reduxStore = _context10.sent;
                fragment = reduxStore.fragment;
                _context10.next = 11;
                return put({
                  type: _time.namespace + '/timeSaga',
                  payload: (0, _extends3.default)({}, payload, {
                    duration: fragment && fragment.duration || payload.duration,
                    currentTime: payload.currentTime + (payload.currentTime === 0 ? 0 : _api.videoGaps)
                  })
                });

              case 11:
                if (!(!fragment || !fragment.data)) {
                  _context10.next = 16;
                  break;
                }

                _context10.next = 14;
                return put({
                  type: _timeSlider.namespace + '/timeSaga',
                  payload: (0, _extends3.default)({
                    buffer: _api.bufferTime
                  }, payload)
                });

              case 14:
                _context10.next = 18;
                break;

              case 16:
                _context10.next = 18;
                return put({
                  type: 'fragment'
                });

              case 18:
              case 'end':
                return _context10.stop();
            }
          }
        }, time, this);
      }),

      //合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频
      //但是这个视频不是整个时段的，会有断的，为了给用户知道这段录像哪里断了，需要而外处理
      //这里是为了算出播放中，遇到断片的情况，进行一些跳过处理
      fragment: /*#__PURE__*/_regenerator2.default.mark(function fragment(_ref22, _ref23) {
        var _ref22$payload = _ref22.payload,
            payload = _ref22$payload === undefined ? {} : _ref22$payload;
        var put = _ref23.put,
            select = _ref23.select;
        var reduxStore, fragment, fragmentDuration, fragmentData, selection, selectionBeginPercent, sliderPercent, seeking, percent, position, gapPosition;
        return _regenerator2.default.wrap(function fragment$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return select();

              case 2:
                reduxStore = _context11.sent;
                fragment = reduxStore.fragment;

                if (!(!fragment || !fragment.data)) {
                  _context11.next = 6;
                  break;
                }

                return _context11.abrupt('return');

              case 6:
                _api.fragmentDuration = fragment.duration;
                if (_api.currentTime === 0) {
                  //循环播放会重头放，需要重置
                  _api.videoGaps = 0;
                }
                fragmentDuration = fragment.duration, fragmentData = fragment.data;
                //begin----处理selection

                selection = reduxStore.selection;
                selectionBeginPercent = void 0;

                if (!(_config.selection && !_config.isHistory)) {
                  _context11.next = 18;
                  break;
                }

                //history是fragment的另一版本，多个视频，fragment是一个视频
                if (selection.end > fragment.duration) {
                  selection.end = fragment.duration;
                }

                if (!(_api.currentTime + _api.videoGaps < selection.begin || _api.currentTime + _api.videoGaps > selection.end)) {
                  _context11.next = 18;
                  break;
                }

                if (!(_api.notAutoPlayViewHide && !_config.autoplay)) {
                  _context11.next = 17;
                  break;
                }

                _context11.next = 17;
                return put({
                  type: 'loading',
                  payload: true
                });

              case 17:
                selectionBeginPercent = selection.begin / fragment.duration;

              case 18:
                //end----处理selection
                sliderPercent = 0;
                seeking = payload.seeking, percent = payload.percent;

                if (seeking || selectionBeginPercent) {
                  position = (selectionBeginPercent || percent) * fragmentDuration;
                  //如果是点击、拖拽

                  _api.videoGaps = 0;
                  fragmentData.forEach(function (v) {
                    if (position >= v.begin) {
                      _api.videoGaps = v.gaps;
                    }
                    if (position >= v.begin && position < v.end) {
                      position = v.begin + v.gap;
                    }
                  });
                  sliderPercent = selectionBeginPercent || percent;
                  this.tempCurrentTime = position - _api.videoGaps;
                } else {
                  gapPosition = _api.currentTime + _api.videoGaps;

                  fragmentData.forEach(function (v, k) {
                    if (gapPosition >= v.begin && gapPosition < v.end) {
                      for (var i = 0; i <= k; i++) {
                        _api.videoGaps = fragmentData[i].gaps;
                      }
                    }
                  });
                  sliderPercent = (_api.currentTime + _api.videoGaps) / fragmentDuration;
                }
                if (sliderPercent > 1 || _api.ended) {
                  sliderPercent = 1;
                }
                _context11.next = 24;
                return put({
                  type: _fragment.namespace + '/sliderReducer',
                  payload: {
                    percent: sliderPercent
                  }
                });

              case 24:
              case 'end':
                return _context11.stop();
            }
          }
        }, fragment, this);
      }),

      //是否在seeking
      seekingState: /*#__PURE__*/_regenerator2.default.mark(function seekingState(_ref24, _ref25) {
        var payload = _ref24.payload;
        var put = _ref25.put,
            select = _ref25.select;
        return _regenerator2.default.wrap(function seekingState$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!_api.ended) {
                  _context12.next = 2;
                  break;
                }

                return _context12.abrupt('return');

              case 2:
                if (payload) {
                  logger.info('Start seeking');
                } else {
                  logger.info('Stop seeking');
                }
                _api.seekingState = payload;
                if (payload && _api.playing) {
                  _api.pause();
                }

                if (payload) {
                  _context12.next = 13;
                  break;
                }

                if (this.tempCurrentTime !== undefined) {
                  _api.currentTime = this.tempCurrentTime;
                }
                //seeking结束后，都播放视频。

                if (_api.playing) {
                  _context12.next = 12;
                  break;
                }

                _context12.next = 10;
                return put({ type: 'play' });

              case 10:
                _context12.next = 13;
                break;

              case 12:
                _api.play();

              case 13:
              case 'end':
                return _context12.stop();
            }
          }
        }, seekingState, this);
      }),
      seeking: /*#__PURE__*/_regenerator2.default.mark(function seeking(_ref26, _ref27) {
        var _ref26$payload = _ref26.payload,
            _ref26$payload$percen = _ref26$payload.percent,
            percent = _ref26$payload$percen === undefined ? 0 : _ref26$payload$percen,
            pause = _ref26$payload.pause;
        var put = _ref27.put,
            select = _ref27.select;
        var reduxStore, fragment;
        return _regenerator2.default.wrap(function seeking$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (!(_api.readyState < 1)) {
                  _context13.next = 2;
                  break;
                }

                return _context13.abrupt('return');

              case 2:
                if (!_api.ended) {
                  _context13.next = 5;
                  break;
                }

                _context13.next = 5;
                return put({
                  type: 'end',
                  payload: false
                });

              case 5:
                _context13.next = 7;
                return select();

              case 7:
                reduxStore = _context13.sent;
                fragment = reduxStore.fragment;

                if (!(!fragment || !fragment.data)) {
                  _context13.next = 15;
                  break;
                }

                this.tempCurrentTime = _api.duration * percent;
                _context13.next = 13;
                return put({
                  type: _timeSlider.namespace + '/timeSaga',
                  payload: {
                    buffer: _api.bufferTime,
                    currentTime: _api.duration * percent,
                    duration: _api.duration
                  }
                });

              case 13:
                _context13.next = 17;
                break;

              case 15:
                _context13.next = 17;
                return put({
                  type: 'fragment',
                  payload: {
                    seeking: true,
                    percent: percent
                  }
                });

              case 17:
                _api.trigger('seek', percent);

              case 18:
              case 'end':
                return _context13.stop();
            }
          }
        }, seeking, this);
      }),
      selection: /*#__PURE__*/_regenerator2.default.mark(function selection(_ref28, _ref29) {
        var _ref28$payload = _ref28.payload,
            percent = _ref28$payload.percent,
            type = _ref28$payload.type,
            duration = _ref28$payload.duration;
        var put = _ref29.put,
            select = _ref29.select;

        var reduxStore, fragment, selection, begin, _begin, _end, _end2;

        return _regenerator2.default.wrap(function selection$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return select();

              case 2:
                reduxStore = _context14.sent;
                fragment = reduxStore.fragment;
                selection = reduxStore.selection;

                if (!duration) {
                  duration = fragment.duration;
                }
                if (selection.end > duration) {
                  selection.end = duration;
                }

                if (!(type === 'left-blur')) {
                  _context14.next = 15;
                  break;
                }

                if (_config.isHistory) {
                  _context14.next = 11;
                  break;
                }

                _context14.next = 11;
                return put({
                  type: 'seeking',
                  payload: {
                    percent: percent
                  }
                });

              case 11:
                begin = percent * duration;
                //对外提供selection事件

                _api.trigger('selection', (0, _extends3.default)({}, selection, {
                  begin: begin
                }));
                _context14.next = 32;
                break;

              case 15:
                if (!(type === 'left-change')) {
                  _context14.next = 23;
                  break;
                }

                _begin = percent * duration;

                if (_begin > selection.end - selection.minGap) {
                  _begin = selection.end - selection.minGap;
                  if (selection.end < selection.minGap) {
                    _begin = 0;
                  }
                }
                if (selection.end - _begin > selection.maxGap) {
                  _begin = selection.end - selection.maxGap;
                }
                _context14.next = 21;
                return put({
                  type: _selection.namespace + '/dataReducer',
                  payload: (0, _extends3.default)({}, selection, {
                    begin: _begin
                  })
                });

              case 21:
                _context14.next = 32;
                break;

              case 23:
                if (!(type === 'right-change')) {
                  _context14.next = 31;
                  break;
                }

                _end = percent * duration;

                if (selection.begin > _end - selection.minGap) {
                  _end = selection.begin + selection.minGap;
                  if (selection.end < selection.minGap) {
                    _end = duration;
                  }
                }
                if (_end - selection.begin > selection.maxGap) {
                  _end = selection.maxGap + selection.begin;
                }
                _context14.next = 29;
                return put({
                  type: _selection.namespace + '/dataReducer',
                  payload: (0, _extends3.default)({}, selection, {
                    end: _end
                  })
                });

              case 29:
                _context14.next = 32;
                break;

              case 31:
                if (type === 'right-blur') {
                  _end2 = percent * duration;
                  //对外提供selection事件

                  _api.trigger('selection', (0, _extends3.default)({}, selection, {
                    end: _end2
                  }));
                }

              case 32:
              case 'end':
                return _context14.stop();
            }
          }
        }, selection, this);
      }),
      fullscreen: /*#__PURE__*/_regenerator2.default.mark(function fullscreen(_ref30, _ref31) {
        var payload = _ref30.payload;
        var put = _ref31.put;
        var fullscreenDom;
        return _regenerator2.default.wrap(function fullscreen$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (fullscreenObj) {
                  fullscreenObj.remove();
                }
                fullscreenDom = _api.parentNode.parentNode;

                fullscreenObj = new _fullscreen3.default(fullscreenDom, _api.ownerDocument, function () {
                  var isFull = fullscreenObj.fullscreenElement();
                  if (isFull) {
                    fullscreenDom.style.width = '100%';
                    fullscreenDom.style.display = 'block';
                    fullscreenDom.style.height = '100%';
                  } else {
                    fullscreenDom.style.width = '';
                    fullscreenDom.style.display = '';
                    fullscreenDom.style.height = '';
                  }
                  _api.trigger('fullscreen', !!isFull);
                  if (isFull) {
                    logger.info('Fullscreen');
                  } else {
                    logger.info('Fullscreen exited');
                  }
                  _dispatch({
                    type: _fullscreen.namespace + '/fullscreenSaga',
                    payload: !!isFull
                  });
                  if (!isFull) {
                    //非全屏，移除监听器。
                    fullscreenObj.remove();
                    fullscreenObj = null;
                  }
                });
                if (fullscreenObj.supportsDomFullscreen) {
                  if (payload) {
                    fullscreenObj.requestFullscreen();
                  } else {
                    fullscreenObj.exitFullscreen();
                  }
                } else {
                  //异常处理
                }

                if (!_api.playing) {
                  _context15.next = 7;
                  break;
                }

                _context15.next = 7;
                return put({
                  type: 'controlbar',
                  payload: false,
                  delayTime: _config.controlbarHideTime,
                  onControlbarEnter: false
                });

              case 7:
              case 'end':
                return _context15.stop();
            }
          }
        }, fullscreen, this);
      }),
      controlbarClearTimeout: function controlbarClearTimeout(_ref32) {
        var payload = _ref32.payload;

        if (payload && payload.onControlbarEnter !== undefined) {
          _api.onControlbarEnter = payload.onControlbarEnter;
        }
        _controlbarClearTimeout && _controlbarClearTimeout();
      },
      controlbar: /*#__PURE__*/_regenerator2.default.mark(function controlbar(_ref33, _ref34) {
        var payload = _ref33.payload,
            delayTime = _ref33.delayTime,
            onControlbarEnter = _ref33.onControlbarEnter;
        var put = _ref34.put;
        var flag, delayPromise;
        return _regenerator2.default.wrap(function controlbar$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return put({
                  type: 'controlbarClearTimeout'
                });

              case 2:
                if (!(_api.isError && !payload)) {
                  _context16.next = 4;
                  break;
                }

                return _context16.abrupt('return');

              case 4:
                if (onControlbarEnter !== undefined) {
                  _api.onControlbarEnter = onControlbarEnter;
                }
                if (_api.onControlbarEnter) {
                  //如果正在controlbar上，强制controlbar显示
                  payload = true;
                }
                flag = true;
                //controlbar隐藏时，delay才有效，显示controlbar是立刻显示

                if (!(delayTime && !payload)) {
                  _context16.next = 13;
                  break;
                }

                delayPromise = util.delay(delayTime);

                _controlbarClearTimeout = delayPromise.clearTimeout;
                _context16.next = 12;
                return delayPromise;

              case 12:
                flag = _context16.sent;

              case 13:
                if (!flag) {
                  _context16.next = 18;
                  break;
                }

                if (payload) {
                  _api.controlbarShow = true;
                  logger.info('Controlbar show');
                } else {
                  _api.controlbarShow = false;
                  logger.info('Controlbar hide');
                }
                _context16.next = 17;
                return put({
                  type: _controlbar.namespace + '/controlbarSaga',
                  payload: payload
                });

              case 17:
                //对外提供controlbar事件
                _api.trigger('controlbar', payload);

              case 18:
              case 'end':
                return _context16.stop();
            }
          }
        }, controlbar, this);
      }),
      errorMessage: function errorMessage(_ref35, _ref36) {
        var payload = _ref35.payload;
        var put = _ref36.put;

        clearTimeout(errorMessageTimeout);
        if (_api.ended) {
          return;
        }
        var error = function error() {
          //先清除，可能遗留的
          _dispatch({
            type: namespace + '/controlbarClearTimeout'
          });
          if (!_api.controlbarShow) {
            _dispatch({
              type: namespace + '/controlbar',
              payload: true,
              onControlbarEnter: false
            });
          }
          if (!_api.notAutoPlayViewHide) {
            //如果not-autoplay页面没关闭
            _dispatch({
              type: namespace + '/hideNotAutoPlayView'
            });
          }
          _dispatch({
            type: _errorMessage.namespace + '/errorMessageSaga',
            payload: payload
          });
          // 把播放暂停显示按钮显示为暂停。
          _dispatch({
            type: _playPause.namespace + '/playPauseSaga',
            payload: false
          });
        };
        if (payload.message) {
          errorMessageTimeout = setTimeout(function () {
            _api.isError = true;
            //使用setTimeout是为了防止视频很快就可以播放的情况，就不用展示loading。
            //否则就会对用户造成卡顿假像。
            logger.info('Error message show');
            if (_api.loading) {
              //如果还有loading，需要隐藏
              _dispatch({
                type: namespace + '/loading',
                payload: false
              });
            }
            _dispatch({
              type: namespace + '/pause'
            });
            error();
          }, showErrorMessageLazyTime);
        } else {
          logger.info('Error message hide');
          error();
          //如果非错误，需要设置_api.isError为false
          _api.isError = false;
        }
      },
      reload: /*#__PURE__*/_regenerator2.default.mark(function reload(_ref37, _ref38) {
        var payload = _ref37.payload;
        var put = _ref38.put;
        return _regenerator2.default.wrap(function reload$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                logger.info('Reload Video');
                _api.trigger('reload');
                //重置
                _api.reset();
                _api.detachMedia && _api.detachMedia();
                _videoEvents && _videoEvents.reset();
                //报错保存之前的播放进度
                lastCurrentTime = _api.currentTime;
                _context17.next = 8;
                return put({
                  type: 'errorMessage',
                  payload: {
                    message: null
                  }
                });

              case 8:
                _context17.next = 10;
                return put({
                  type: 'loading',
                  payload: true
                });

              case 10:
                _config.reload(function () {
                  _api.reloading = true;
                  _api.isError = false;
                });

              case 11:
              case 'end':
                return _context17.stop();
            }
          }
        }, reload, this);
      }),
      living: /*#__PURE__*/_regenerator2.default.mark(function living(_ref39, _ref40) {
        var duration = _ref39.payload.duration;
        var put = _ref40.put;
        var living;
        return _regenerator2.default.wrap(function living$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                living = false;

                if (duration === Infinity || isNaN(duration)) {
                  living = true;
                }
                if (living) {
                  logger.info('Living', 'the video is a living video.');
                }
                _api.living = living;
                _context18.next = 6;
                return put({
                  type: _living.namespace + '/setLivingSaga',
                  payload: living
                });

              case 6:
              case 'end':
                return _context18.stop();
            }
          }
        }, living, this);
      }),
      playbackRate: /*#__PURE__*/_regenerator2.default.mark(function playbackRate(_ref41, _ref42) {
        var _playbackRate = _ref41.payload;
        var put = _ref42.put;
        return _regenerator2.default.wrap(function playbackRate$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                logger.info('PlaybackRate switched');
                _api.playbackRate = _playbackRate;
                _context19.next = 4;
                return put({
                  type: _playbackRate2.namespace + '/setPlaybackRateSaga',
                  payload: _playbackRate
                });

              case 4:
              case 'end':
                return _context19.stop();
            }
          }
        }, playbackRate, this);
      }),
      subtitleList: /*#__PURE__*/_regenerator2.default.mark(function subtitleList(_ref43, _ref44) {
        var payload = _ref43.payload;
        var put = _ref44.put;
        return _regenerator2.default.wrap(function subtitleList$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                logger.info('Subtitle List showed');
                _context20.next = 3;
                return put({
                  type: _track.namespace + '/subtitleListSaga',
                  payload: payload
                });

              case 3:
              case 'end':
                return _context20.stop();
            }
          }
        }, subtitleList, this);
      }),
      switchSubtitle: /*#__PURE__*/_regenerator2.default.mark(function switchSubtitle(_ref45, _ref46) {
        var payload = _ref45.payload;
        var put = _ref46.put;
        var i;
        return _regenerator2.default.wrap(function switchSubtitle$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                //存储状态
                _api.currentSubtitleTrack = payload;
                //end----textTracks状态处理

                if (!_api.hlsObj) {
                  _context21.next = 5;
                  break;
                }

                //hls.js解析的hls自带字幕
                //hls.js切换方式就是这样。
                _api.hlsObj.subtitleTrack = payload;
                _context21.next = 17;
                break;

              case 5:
                if (!(_api.textTracks.length > 0)) {
                  _context21.next = 10;
                  break;
                }

                //浏览器原生解析的hls自带字幕
                //begin----textTracks状态处理
                for (i = 0; i < _api.textTracks.length; i++) {
                  _api.textTracks[i].mode = 'disabled';
                }
                if (_api.textTracks[payload]) {
                  //关闭不用处理
                  _api.textTracks[payload].mode = 'hidden';
                }
                _context21.next = 17;
                break;

              case 10:
                if (!(subtitleList && subtitleList[payload])) {
                  _context21.next = 15;
                  break;
                }

                _context21.next = 13;
                return put({
                  type: _track.namespace + '/subtitleCuesSaga',
                  payload: {
                    subtitleId: payload,
                    file: subtitleList[payload].file
                  }
                });

              case 13:
                _context21.next = 17;
                break;

              case 15:
                _context21.next = 17;
                return put({
                  type: _track.namespace + '/subtitleCuesSaga',
                  payload: {
                    subtitleId: payload
                  }
                });

              case 17:
                _context21.next = 19;
                return put({
                  type: _track.namespace + '/subtitleListSaga',
                  payload: {
                    subtitleId: payload
                  }
                });

              case 19:
              case 'end':
                return _context21.stop();
            }
          }
        }, switchSubtitle, this);
      }),
      hlsSubtitleCues: /*#__PURE__*/_regenerator2.default.mark(function hlsSubtitleCues(_ref47, _ref48) {
        var payload = _ref47.payload;
        var put = _ref48.put;
        var cues, k, v;
        return _regenerator2.default.wrap(function hlsSubtitleCues$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                cues = [];

                for (k = 0; k < payload.length; k++) {
                  v = payload[k];

                  cues.push({
                    begin: v.startTime,
                    end: v.endTime,
                    text: v.text
                  });
                }
                _context22.next = 4;
                return put({
                  type: _track.namespace + '/hlsSubtitleCuesSaga',
                  payload: cues
                });

              case 4:
              case 'end':
                return _context22.stop();
            }
          }
        }, hlsSubtitleCues, this);
      }),
      pictureQualityList: /*#__PURE__*/_regenerator2.default.mark(function pictureQualityList(_ref49, _ref50) {
        var payload = _ref49.payload;
        var put = _ref50.put;
        return _regenerator2.default.wrap(function pictureQualityList$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return put({
                  type: _pictureQuality.namespace + '/dataSaga',
                  payload: payload
                });

              case 2:
              case 'end':
                return _context23.stop();
            }
          }
        }, pictureQualityList, this);
      }),
      switchPictureQuality: /*#__PURE__*/_regenerator2.default.mark(function switchPictureQuality(_ref51, _ref52) {
        var payload = _ref51.payload;
        var put = _ref52.put;
        return _regenerator2.default.wrap(function switchPictureQuality$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                if (_api.hlsObj) {
                  //hls.js切换画质
                  _api.hlsObj.nextLevel = payload;
                }
                _context24.next = 3;
                return put({
                  type: _pictureQuality.namespace + '/dataSaga',
                  payload: {
                    currentQuality: payload
                  }
                });

              case 3:
              case 'end':
                return _context24.stop();
            }
          }
        }, switchPictureQuality, this);
      }),
      rotate: /*#__PURE__*/_regenerator2.default.mark(function rotate(_ref53, _ref54) {
        var payload = _ref53.payload;
        var put = _ref54.put;
        var width, height;
        return _regenerator2.default.wrap(function rotate$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return put({
                  type: _rotate.namespace + '/dataSaga',
                  payload: payload
                });

              case 2:
                width = _api.clientWidth;
                height = _api.clientHeight;

                _api.style.transform = 'rotate(-' + payload + 'deg)';
                if (payload === 90 || payload === 270) {
                  _api.style.width = height + 'px';
                  _api.style.marginLeft = width / 2 - height / 2 + 'px';
                } else {
                  _api.style.width = '';
                  _api.style.marginLeft = '';
                }

              case 6:
              case 'end':
                return _context25.stop();
            }
          }
        }, rotate, this);
      }),
      setHistoryCurrentTime: function setHistoryCurrentTime(_ref55, _ref56) {
        var historyCurrentTime = _ref55.payload.historyCurrentTime;
        var put = _ref56.put;

        _api.historyCurrentTime = historyCurrentTime;
      },

      //注意，回调函数中用不了put，改用dispatch，如果使用dispatch就需要绑上namespace
      init: /*#__PURE__*/_regenerator2.default.mark(function init(_ref57, _ref58) {
        var payload = _ref57.payload,
            initOverCallback = _ref57.initOverCallback;
        var put = _ref58.put;

        var dispatch, api, hlsjsEvents, config, autoplay, loadingLazyTime, errorMessageLazyTime, file, _config$preload, preload, muted, _payload, _outSideApi;

        return _regenerator2.default.wrap(function init$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                dispatch = payload.dispatch, api = payload.api, hlsjsEvents = payload.hlsjsEvents, config = payload.config;
                autoplay = config.autoplay, loadingLazyTime = config.showLoadingLazyTime, errorMessageLazyTime = config.showErrorMessageLazyTime, file = config.file, _config$preload = config.preload, preload = _config$preload === undefined ? true : _config$preload, muted = config.muted;


                if (loadingLazyTime) {
                  showLoadingLazyTime = loadingLazyTime;
                }
                if (errorMessageLazyTime) {
                  showErrorMessageLazyTime = errorMessageLazyTime;
                }
                _api = api;
                _dispatch = dispatch;
                _config = config;
                //初始化loading状态

                if (!autoplay) {
                  _context26.next = 23;
                  break;
                }

                _api.loadSource(file);
                //isLiving强制设置为直播状态。safari中flv无法获取直播状态，所以需要设置这个。
                if ((!_api.living || _config.isLiving) && lastCurrentTime) {
                  //播放中途出错，重载需要载入上一个播放进度
                  _api.currentTime = lastCurrentTime;
                }
                getTracks();
                logger.info('Autoplay:', 'set the video to play automatically');
                _api.autoplay = autoplay;
                _api.notAutoPlayViewHide = true;
                _context26.next = 16;
                return put({
                  type: 'loading',
                  payload: true
                });

              case 16:
                _context26.next = 18;
                return put({
                  type: _playPause.namespace + '/playPauseSaga',
                  payload: true
                });

              case 18:
                _context26.next = 20;
                return put({
                  type: 'controlbar',
                  payload: true
                });

              case 20:
                //当autoplay=true初始化controlbar默认为显示
                _api.trigger('controlbar', true);
                _context26.next = 26;
                break;

              case 23:
                if (preload) {
                  _api.loadSource(file);
                  getTracks();
                }
                _api.trigger('loading', false);
                _api.loading = false;

              case 26:
                if (!muted) {
                  _context26.next = 29;
                  break;
                }

                _context26.next = 29;
                return put({
                  type: 'muted',
                  payload: true,
                  autoMuted: true
                });

              case 29:
                if (!(_config.selection && isFirstRun)) {
                  _context26.next = 33;
                  break;
                }

                _payload = (0, _extends3.default)({
                  begin: 0,
                  //5分钟
                  end: 5 * 60
                }, _config.selection);
                _context26.next = 33;
                return put({
                  type: _selection.namespace + '/dataReducer',
                  payload: _payload
                });

              case 33:
                //防止事件没移除
                _api.off();
                //等待video运行起来后运行，对外提供接口
                _outSideApi = (0, _outsideApi2.default)(payload, this.sagas);

                initOverCallback && initOverCallback(_outSideApi);
                //----begin 事件处理
                //需要再 initOverCallback之后执行
                _videoEvents = (0, _events2.default)(payload, isFirstRun, _state);
                if (hlsjsEvents) {
                  hlsjsEvents(payload);
                }
                //----end 事件处理
                isFirstRun = false;

              case 39:
              case 'end':
                return _context26.stop();
            }
          }
        }, init, this);
      })
    }
  };
};

var _loading = require('../loading');

var _end3 = require('../end');

var _playPause = require('../play-pause');

var _volume = require('../volume');

var _muted = require('../muted');

var _time = require('../time');

var _fullscreen = require('../fullscreen');

var _notAutoplay = require('../not-autoplay');

var _controlbar = require('../controlbar');

var _timeSlider = require('../time-slider');

var _errorMessage = require('../error-message');

var _track = require('../track');

var _fragment = require('../fragment');

var _selection = require('../selection');

var _living = require('../living');

var _playbackRate2 = require('../playback-rate');

var _pictureQuality = require('../picture-quality');

var _rotate = require('../rotate');

var _const = require('../../utils/const');

var _fullscreen2 = require('../../utils/dom/fullscreen');

var _fullscreen3 = _interopRequireDefault(_fullscreen2);

var _storage = require('../../utils/storage');

var storage = _interopRequireWildcard(_storage);

var _util = require('../../utils/util');

var util = _interopRequireWildcard(_util);

var _logger = require('../../utils/logger');

var logger = _interopRequireWildcard(_logger);

var _events = require('./events');

var _events2 = _interopRequireDefault(_events);

var _outsideApi = require('./outside-api');

var _outsideApi2 = _interopRequireDefault(_outsideApi);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var namespace = exports.namespace = 'video'; //涉及api的功能只会也只能在次model进行处理
//这个model的state不会在页面上用到，这个model是个指挥中心
//触发各种状态然后通知各种model处理页面上的状态