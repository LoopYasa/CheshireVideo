'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _class, _class2, _temp; //外部依赖包

//import classnames from 'classnames';
//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _clear = require('./decorator/clear');

var _clear2 = _interopRequireDefault(_clear);

var _loader = require('../loader');

var _loader2 = _interopRequireDefault(_loader);

var _util = require('../utils/util');

var util = _interopRequireWildcard(_util);

var _logger = require('../utils/logger');

var logger = _interopRequireWildcard(_logger);

var _addEventListener = require('../utils/dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _default = require('../i18n/default');

var _default2 = _interopRequireDefault(_default);

var _contextmenu = require('./components/contextmenu');

var _contextmenu2 = _interopRequireDefault(_contextmenu);

var _contextmenu3 = require('./contextmenu');

var _contextmenu4 = _interopRequireDefault(_contextmenu3);

var _loading = require('./loading');

var _loading2 = _interopRequireDefault(_loading);

var _end = require('./end');

var _end2 = _interopRequireDefault(_end);

var _notAutoplay = require('./not-autoplay');

var _notAutoplay2 = _interopRequireDefault(_notAutoplay);

var _controlbar = require('./controlbar');

var _controlbar2 = _interopRequireDefault(_controlbar);

var _errorMessage = require('./error-message');

var _errorMessage2 = _interopRequireDefault(_errorMessage);

var _subtitle = require('./track/subtitle');

var _subtitle2 = _interopRequireDefault(_subtitle);

var _title = require('./title');

var _title2 = _interopRequireDefault(_title);

var _fragment = require('./fragment');

var _fragment2 = _interopRequireDefault(_fragment);

var _const = require('../utils/const');

var _video = require('../model/video');

var _fullscreen = require('../model/fullscreen');

var _playPause = require('../model/play-pause');

var _controlbar3 = require('../model/controlbar');

var _living = require('../model/living');

var _ready = require('../model/ready');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    living: state[_living.namespace],
    isFull: state[_fullscreen.namespace],
    playing: state[_playPause.namespace],
    //controlbar的显示与否，代表了用户是否活跃
    userActive: state[_controlbar3.namespace]
  };
}), _dec2 = (0, _clear2.default)([_video.namespace, _ready.namespace]), _dec(_class = _dec2(_class = (_temp = _class2 = function (_React$Component) {
  (0, _inherits3.default)(View, _React$Component);

  function View(props) {
    (0, _classCallCheck3.default)(this, View);

    var _this = (0, _possibleConstructorReturn3.default)(this, (View.__proto__ || (0, _getPrototypeOf2.default)(View)).call(this, props));

    _this.outSideApi = {};
    _this.state = {
      //是否准备好，准备好就可以开始处理video的属性问题，就可以开始播放了
      ready: false
    };
    _this.dispatch = _this.props.dispatch;

    _this.onDoubleClick = function (e) {
      e.stopPropagation();
      var _this$props = _this.props,
          isFull = _this$props.isFull,
          onDoubleClick = _this$props.onDoubleClick;

      var flag = true;
      if (onDoubleClick) {
        var reFlag = onDoubleClick(e);
        if (reFlag === false) {
          //如果返回的是false，则处理flag，否则正常执行。
          flag = false;
        }
      }
      if (flag) {
        _this.dispatch({
          type: _video.namespace + '/fullscreen',
          payload: !isFull
        });
      }
    };

    _this.onClick = function (e) {
      e.stopPropagation();
      var living = _this.props.living;

      if (living) {
        //直播不跟暂停播放
        return;
      }
      var _this$props2 = _this.props,
          playing = _this$props2.playing,
          onClick = _this$props2.onClick;

      var flag = true;
      if (onClick) {
        var reFlag = onClick(e);
        if (reFlag === false) {
          //如果返回的是false，则处理flag，否则正常执行。
          flag = false;
        }
      }
      //如果flag不为true，不执行下面的操作
      if (flag) {
        if (playing) {
          _this.dispatch({
            type: _video.namespace + '/pause'
          });
        } else {
          _this.dispatch({
            type: _video.namespace + '/play'
          });
        }
      }
    };

    _this.onMouseMove = function (e) {
      var _this$props3 = _this.props,
          _this$props3$controls = _this$props3.controls,
          controls = _this$props3$controls === undefined ? true : _this$props3$controls,
          playing = _this$props3.playing,
          userActive = _this$props3.userActive,
          _this$props3$controlb = _this$props3.controlbarHideTime,
          controlbarHideTime = _this$props3$controlb === undefined ? _const.CONTROLBAR_HIDE_TIME : _this$props3$controlb;

      if (controls && playing) {
        //清理定时器，其他组件操作也可以处理当前组件的定时器，和video model中的定时器
        _this.dispatch({
          type: _video.namespace + '/controlbarClearTimeout'
        });
        _this.dispatchControlbar(false, controlbarHideTime);
        if (!userActive) {
          _this.dispatchControlbar(true);
        }
      }
    };

    _this.locale = (0, _extends3.default)({}, _default2.default, props.localization);
    return _this;
  }
  //这里的配置参考jw-player的api


  (0, _createClass3.default)(View, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        api: this.api,
        playerConainerDOM: this.playerConainerDOM,
        localization: this.locale,
        player: this.outSideApi,
        playerDOM: _reactDom2.default.findDOMNode(this.refs.video),
        controlbarHideTime: this.props.controlbarHideTime || _const.CONTROLBAR_HIDE_TIME,
        leftSelectionComponent: this.props.leftSelectionComponent,
        rightSelectionComponent: this.props.rightSelectionComponent
      };
    }
  }, {
    key: 'init',
    value: function init(callback) {
      var _this2 = this;

      var videoDOM = _reactDom2.default.findDOMNode(this.refs.video);
      this.videoDOM = videoDOM;
      var _props = this.props,
          _props$forceOpenHls = _props.forceOpenHls,
          forceOpenHls = _props$forceOpenHls === undefined ? false : _props$forceOpenHls,
          file = _props.file,
          videoCallback = _props.videoCallback,
          _props$preload = _props.preload,
          preload = _props$preload === undefined ? true : _props$preload,
          _props$spaceAction = _props.spaceAction,
          spaceAction = _props$spaceAction === undefined ? true : _props$spaceAction,
          _props$controlbarHide = _props.controlbarHideTime,
          controlbarHideTime = _props$controlbarHide === undefined ? _const.CONTROLBAR_HIDE_TIME : _props$controlbarHide,
          selection = _props.selection,
          other = (0, _objectWithoutProperties3.default)(_props, ['forceOpenHls', 'file', 'videoCallback', 'preload', 'spaceAction', 'controlbarHideTime', 'selection']);


      if (selection === true) {
        selection = {};
      }
      if (!(0, _isString2.default)(file)) {
        file = '';
      }
      file = util.urlProtocolAdapter(file);
      var hlsjs = util.shouldUseHlsjs(file, forceOpenHls);
      var flvjs = util.shouldUseFlvjs(file);
      var videoNotSupport = false;
      if (!hlsjs && !flvjs && !util.isH5VideoSupported(file)) {
        //通过后缀名判断，没有后缀名不作处理，如果不支持原生的浏览器video格式，需要提示。
        videoNotSupport = true;
      }
      (0, _loader2.default)((0, _extends3.default)({
        hlsjs: hlsjs,
        flvjs: flvjs,
        videoDOM: videoDOM,
        file: file,
        localization: this.locale
      }, other)).then(function (provider) {
        //首先统一清理，可能会存在上一个的播放状态。
        _this2.dispatch({
          type: _video.namespace + '/clear'
        });
        if ((0, _isPlainObject2.default)(other.controls) && other.controls.capture) {
          //屏幕截图功能需要设置crossorigin，safari和edge才不会报安全问题。
          //但是有一个缺点，播放链接响应请求头必须设置跨域。
          provider.api.setAttribute('crossorigin', 'anonymous');
        }
        _this2.api = provider.api;
        _this2.dispatch({
          type: _video.namespace + '/init',
          payload: {
            dispatch: _this2.dispatch,
            config: (0, _extends3.default)({
              isHls: util.isM3u8File(file),
              isFlv: util.isFlvFile(file),
              videoNotSupport: videoNotSupport,
              file: file,
              selection: selection,
              preload: preload,
              controlbarHideTime: controlbarHideTime,
              localization: _this2.locale,
              spaceAction: spaceAction,
              isHistory: _this2.context.isHistory,
              setActiveItem: _this2.context.setActiveItem,
              playlist: _this2.context.playlist,
              historyDuration: _this2.context.historyDuration,
              activeItem: _this2.context.activeItem,
              reload: function reload(callback) {
                _this2.initWithEvent(function () {
                  callback && callback();
                  _this2.setState({
                    randomKey: util.randomKey()
                  });
                });
              }
            }, other),
            api: provider.api,
            hlsjsEvents: provider.hlsjsEvents,
            videoCallback: videoCallback
          },
          initOverCallback: function initOverCallback(outSideApi) {
            logger.success('Init Over:', 'initialized sucessfully,video is now playing(or can be played).');
            _this2.outSideApi = outSideApi;
            _this2.setState({
              ready: true
            });
            callback && callback();
          }
        });
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.initWithEvent();
    }
  }, {
    key: 'initWithEvent',
    value: function initWithEvent() {
      if (this.palyerMousemoveEvent) {
        this.palyerMousemoveEvent.remove();
      }
      this.playerConainerDOM = _reactDom2.default.findDOMNode(this.refs['player-container']);
      //react jsx直接绑定事件在高德地图上mousemove失效，而下面的这种绑定方式不失效。
      this.palyerMousemoveEvent = (0, _addEventListener2.default)(this.playerConainerDOM, 'mousemove', this.onMouseMove);
      this.init();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.file !== prevProps.file) {
        this.initWithEvent();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.palyerMousemoveEvent.remove();
    }
  }, {
    key: 'dispatchControlbar',
    value: function dispatchControlbar(payload, controlbarHideTime) {
      this.dispatch({
        type: _video.namespace + '/controlbar',
        payload: payload,
        delayTime: controlbarHideTime
      });
    }
  }, {
    key: 'getAspectratioNumber',
    value: function getAspectratioNumber(aspectratio) {
      var ratio = aspectratio.split(':');
      if (ratio.length !== 2 || isNaN(ratio[0]) || isNaN(ratio[1])) {
        logger.warn('Config error:', 'Aspectratio format is wrong,aspectratio format should be "x:y".');
        aspectratio = _const.ASPECT_RATIO;
        ratio = aspectratio.split(':');
      }
      return {
        x: parseInt(ratio[0], 10),
        y: parseInt(ratio[1], 10)
      };
    }
  }, {
    key: 'getContainerStyle',
    value: function getContainerStyle() {
      var _props2 = this.props,
          _props2$aspectratio = _props2.aspectratio,
          aspectratio = _props2$aspectratio === undefined ? _const.ASPECT_RATIO : _props2$aspectratio,
          isFull = _props2.isFull,
          height = _props2.height,
          width = _props2.width,
          style = _props2.style;

      var containerStyle = {};
      if (!isFull) {
        if (width) {
          containerStyle.width = width;
        }
        if (height) {
          containerStyle.height = height;
        }
        if (width && !height && this.playerConainerDOM) {
          //第二次渲染，执行在计算height之前
          width = this.playerConainerDOM.clientWidth;
        }
        if ((0, _isNumber2.default)(width) && !height) {
          //width是数字是才计算
          var ratio = this.getAspectratioNumber(aspectratio);
          containerStyle.height = width * ratio.y / ratio.x;
        }
        if (style) {
          containerStyle = (0, _extends3.default)({}, containerStyle, style);
        }
      }
      return containerStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          ready = _state.ready,
          randomKey = _state.randomKey;
      var _props3 = this.props,
          file = _props3.file,
          autoplay = _props3.autoplay,
          muted = _props3.muted,
          _props3$controls = _props3.controls,
          controls = _props3$controls === undefined ? true : _props3$controls,
          poster = _props3.poster,
          userActive = _props3.userActive,
          _props3$tracks = _props3.tracks,
          tracks = _props3$tracks === undefined ? [] : _props3$tracks,
          className = _props3.className,
          title = _props3.title,
          playbackRates = _props3.playbackRates,
          playbackRateControls = _props3.playbackRateControls,
          logo = _props3.logo,
          loop = _props3.loop,
          _props3$contextMenu = _props3.contextMenu,
          contextMenu = _props3$contextMenu === undefined ? true : _props3$contextMenu,
          fragment = _props3.fragment,
          isLiving = _props3.isLiving,
          _props3$timeSliderSho = _props3.timeSliderShowFormat,
          timeSliderShowFormat = _props3$timeSliderSho === undefined ? 'date' : _props3$timeSliderSho,
          living = _props3.living,
          _props3$stretching = _props3.stretching,
          stretching = _props3$stretching === undefined ? 'uniform' : _props3$stretching,
          selection = _props3.selection,
          customTimeSlider = _props3.customTimeSlider,
          children = _props3.children;

      if (selection && !this.context.isHistory) {
        loop = true;
      }
      var locale = this.locale;
      var containerStyle = this.getContainerStyle();
      var videoProps = {};
      if (ready) {
        videoProps = {
          onDoubleClick: this.onDoubleClick,
          onClick: this.onClick,
          poster: poster
        };
      }
      return _react2.default.createElement(
        _contextmenu2.default,
        {
          key: file + randomKey,
          ref: 'player-container',
          overflow: false,
          content: _react2.default.createElement(_contextmenu4.default, { content: contextMenu })
        },
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames3.default)('html5-player-container', className, {
              'cursor-none': !userActive
            }),
            style: containerStyle
          },
          !ready && _react2.default.createElement(
            'span',
            { className: 'html5-player-init-text' },
            locale.loadingPlayerText
          ),
          _react2.default.createElement('video', (0, _extends3.default)({
            loop: loop,
            className: (0, _classnames3.default)('html5-player-tag', (0, _defineProperty3.default)({
              'cursor-none': !userActive,
              'cursor-pointer': !(isLiving || living)
            }, 'html5-player-tag-stretching-' + stretching, true)),
            ref: 'video'
          }, videoProps)),
          _react2.default.createElement('div', {
            //视频保护色，纯白的需要保护色
            className: 'html5-player-pretect-bg'
          }),
          ready && _react2.default.createElement(
            'span',
            null,
            (0, _isString2.default)(logo) && _react2.default.createElement('img', {
              className: 'html5-player-logo-container',
              alt: '',
              src: logo
            }),
            _react2.default.isValidElement(logo) && _react2.default.createElement(
              'div',
              { className: 'html5-player-logo-container' },
              logo
            ),
            (0, _isPlainObject2.default)(logo) && _react2.default.createElement(
              'a',
              {
                className: 'html5-player-logo-container',
                href: logo.link || '',
                target: logo.target || '__blank'
              },
              _react2.default.createElement('img', { alt: '', src: logo.image })
            ),
            _react2.default.createElement(
              'span',
              null,
              title && _react2.default.createElement(_title2.default, { title: title }),
              _react2.default.createElement(_loading2.default, null),
              _react2.default.createElement(_end2.default, null),
              _react2.default.createElement(_errorMessage2.default, null),
              !autoplay && _react2.default.createElement(_notAutoplay2.default, null),
              controls && _react2.default.createElement(_controlbar2.default, {
                tracks: tracks,
                playbackRates: playbackRates,
                playbackRateControls: playbackRateControls,
                muted: muted,
                controls: controls,
                isLiving: isLiving,
                timeSliderShowFormat: timeSliderShowFormat,
                hasFragment: !!fragment,
                customTimeSlider: customTimeSlider
              }),
              _react2.default.createElement(_subtitle2.default, { userActive: userActive }),
              fragment && _react2.default.createElement(_fragment2.default, { url: fragment })
            ),
            children
          )
        )
      );
    }
  }]);
  return View;
}(_react2.default.Component), _class2.propTypes = {
  //播放的文件
  file: _propTypes2.default.string.isRequired,
  //播放开始之前要显示的海报图像的URL
  poster: _propTypes2.default.string,
  //播放器纵横比，默认为16:9，只有设置了宽度的情况下才会生效。
  //格式为x:y
  aspectratio: _propTypes2.default.string,
  stretching: _propTypes2.default.string,
  /**---begin Behavior**/
  //静音
  muted: _propTypes2.default.bool,
  //preload=true，提前加载视频，false为不提前加载视频
  //默认preload=true
  //autoplay优先与preload
  preload: _propTypes2.default.bool,
  //自动播放
  autoplay: _propTypes2.default.bool,
  //设置默认开始播放的时间
  defaultCurrentTime: _propTypes2.default.number,
  //播完重复播放
  loop: _propTypes2.default.bool,
  //是否开启space按键暂停播放功能，默认开启
  spaceAction: _propTypes2.default.bool,
  //强制定义为直播
  isLiving: _propTypes2.default.bool,
  showLoadingLazyTime: _propTypes2.default.number,
  //直播最大buffer
  livingMaxBuffer: _propTypes2.default.number,
  //自定义timeout时间
  timeout: _propTypes2.default.number,
  //尝试重连次数
  retryTimes: _propTypes2.default.number,
  //默认为time
  timeSliderShowFormat: _propTypes2.default.string,
  /**---end Behavior**/
  /**---begin Appearance**/
  //多语言
  localization: _propTypes2.default.object,
  //controlbar无操作后，多少毫秒隐藏时间
  controlbarHideTime: _propTypes2.default.number,
  controls: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),
  fragment: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  selection: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),
  leftSelectionComponent: _propTypes2.default.element,
  rightSelectionComponent: _propTypes2.default.element,
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**---end Appearance**/
  tracks: _propTypes2.default.array,
  playbackRates: _propTypes2.default.array,
  playbackRateControls: _propTypes2.default.bool,
  logo: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.element])
}, _class2.childContextTypes = {
  api: _propTypes2.default.object,
  playerConainerDOM: _propTypes2.default.object,
  localization: _propTypes2.default.object,
  //实例化后的player，可直接调用对外api，给使用者调用。
  player: _propTypes2.default.object,
  playerDOM: _propTypes2.default.object,
  controlbarHideTime: _propTypes2.default.number,
  leftSelectionComponent: _propTypes2.default.element,
  rightSelectionComponent: _propTypes2.default.element
}, _class2.contextTypes = {
  isHistory: _propTypes2.default.bool,
  setActiveItem: _propTypes2.default.func,
  playlist: _propTypes2.default.array,
  historyDuration: _propTypes2.default.number,
  activeItem: _propTypes2.default.number
}, _temp)) || _class) || _class);
exports.default = View;