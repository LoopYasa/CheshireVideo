'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';

//内部依赖包
// import addEventListener from '../../utils/dom/addEventListener';


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _util = require('../../utils/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultGap = 10;
var defaultShowScrollCount = 4;

var Carousel = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(Carousel, _React$Component);

  function Carousel() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Carousel);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Carousel.__proto__ || (0, _getPrototypeOf2.default)(Carousel)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Carousel', _this.state = {
      innerContainerLeft: 0
    }, _this.scrollCount = 0, _this.arrowRightClick = function (e) {
      e.stopPropagation();
      if (_this.scrollCount >= _this.maxScrollCount) {
        //右边最大。
        return;
      }
      _this.scrollCount++;
      _this.setState({
        //触发更新，这里的状态数据，不使用
        innerContainerLeft: _this.innerContainerLeft
      });
    }, _this.arrowLeftClick = function (e) {
      e.stopPropagation();
      if (_this.scrollCount <= 0) {
        //左边到尽头了
        return;
      }
      _this.scrollCount--;
      _this.setState({
        //触发更新，这里的状态数据，不使用
        innerContainerLeft: _this.innerContainerLeft
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Carousel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var children = this.props.children;

      if (!children) {
        return;
      }
      var containerDOM = _reactDom2.default.findDOMNode(this.refs['carousel-container']);
      this.containerInnerDOM = _reactDom2.default.findDOMNode(this.refs['carousel-inner-container']);
      this.carouselWidth = containerDOM.clientWidth;
      this.setState({
        carouselWidth: containerDOM.clientWidth
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props,
          _props$showScrollCoun = _props.showScrollCount,
          showScrollCount = _props$showScrollCoun === undefined ? defaultShowScrollCount : _props$showScrollCoun,
          _props$children = _props.children,
          children = _props$children === undefined ? [] : _props$children;

      if (nextProps.activeItem <= children.length && nextProps.activeItem !== this.props.activeItem) {
        this.scrollCount = Math.ceil(nextProps.activeItem / showScrollCount) - 1;
      }
    }
    //记录向左向右滚动的次数，左减一，右加一。

  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          _props2$gap = _props2.gap,
          gap = _props2$gap === undefined ? defaultGap : _props2$gap,
          _props2$showScrollCou = _props2.showScrollCount,
          showScrollCount = _props2$showScrollCou === undefined ? defaultShowScrollCount : _props2$showScrollCou,
          _props2$children = _props2.children,
          children = _props2$children === undefined ? [] : _props2$children,
          activeItem = _props2.activeItem;

      if (!children[0]) {
        return false;
      }
      var percent = 1 / showScrollCount;
      var carouselWidth = this.state.carouselWidth;

      var arrowLeftDisable = this.scrollCount === 0;
      var arrowRightDisable = this.scrollCount >= this.maxScrollCount;
      return _react2.default.createElement(
        'div',
        { className: 'relative' },
        _react2.default.createElement(
          'div',
          {
            className: 'html5-player-carousel-arrow-left',
            onClick: this.arrowLeftClick
          },
          _react2.default.createElement(
            'svg',
            {
              className: (0, _classnames2.default)('html5-player-icon html5-player-arrow-left-icon', {
                'html5-player-icon-disable': arrowLeftDisable
              }),
              'aria-hidden': 'true'
            },
            _react2.default.createElement('use', { xlinkHref: '#icon-arrow-left' })
          )
        ),
        _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('html5-player-carousel', className),
            ref: 'carousel-container'
          },
          carouselWidth && _react2.default.createElement(
            'div',
            {
              className: 'html5-player-carousel-inner-contianer html5-player-carousel-transition',
              ref: 'carousel-inner-container',
              style: { left: this.innerContainerLeft }
            },
            children && children.map(function (v, k) {
              var marginLeft = gap + 'px';
              if (k === 0) {
                marginLeft = 0;
              }
              //container宽度 - 间距
              var itemWidth = carouselWidth * percent - gap + gap * percent;
              var childProps = (0, _util.getChildProps)(v);
              return (0, _util.cloneElement)(v, {
                style: {
                  width: itemWidth + 'px',
                  marginLeft: marginLeft
                },
                className: (0, _classnames2.default)('html5-player-carousel-item', childProps.className, {
                  'html5-player-carousel-item-active': k + 1 === activeItem
                }),
                key: k
              }, null);
            })
          )
        ),
        _react2.default.createElement(
          'div',
          {
            className: 'html5-player-carousel-arrow-right',
            onClick: this.arrowRightClick
          },
          _react2.default.createElement(
            'svg',
            {
              className: (0, _classnames2.default)('html5-player-icon html5-player-arrow-left-icon', {
                'html5-player-icon-disable': arrowRightDisable
              }),
              'aria-hidden': 'true'
            },
            _react2.default.createElement('use', { xlinkHref: '#icon-arrow-right' })
          )
        )
      );
    }
  }, {
    key: 'maxScrollCount',
    get: function get() {
      var _props3 = this.props,
          _props3$showScrollCou = _props3.showScrollCount,
          showScrollCount = _props3$showScrollCou === undefined ? defaultShowScrollCount : _props3$showScrollCou,
          _props3$children = _props3.children,
          children = _props3$children === undefined ? [] : _props3$children;

      return Math.ceil(children.length / showScrollCount) - 1;
    }
  }, {
    key: 'innerContainerLeft',
    get: function get() {
      var _props4 = this.props,
          _props4$gap = _props4.gap,
          gap = _props4$gap === undefined ? defaultGap : _props4$gap,
          _props4$children = _props4.children,
          children = _props4$children === undefined ? [] : _props4$children,
          _props4$showScrollCou = _props4.showScrollCount,
          showScrollCount = _props4$showScrollCou === undefined ? defaultShowScrollCount : _props4$showScrollCou;

      var remainder = children.length % showScrollCount;
      var left = -(this.carouselWidth + gap) * this.scrollCount;
      if (this.maxScrollCount !== 0 && this.maxScrollCount === this.scrollCount && remainder !== 0) {
        left = -(this.carouselWidth + gap) * (this.maxScrollCount - 1) - remainder / showScrollCount * this.carouselWidth - gap;
      }
      return left;
    }
  }]);
  return Carousel;
}(_react2.default.Component), _class.propTypes = {
  //图片直接的间距
  gap: _propTypes2.default.number,
  //默认可见局域，展示的图片个数
  defaultShowScrollCount: _propTypes2.default.number,
  //当前激活的item
  activeItem: _propTypes2.default.number
}, _temp2);
exports.default = Carousel;