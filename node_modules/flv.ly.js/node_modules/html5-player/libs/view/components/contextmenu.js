'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2; //外部依赖包

// import classnames from 'classnames';
//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addEventListener = require('../../utils/dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _contains = require('../../utils/dom/contains');

var _contains2 = _interopRequireDefault(_contains);

var _util = require('../../utils/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ContextMenu = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(ContextMenu, _React$Component);

  function ContextMenu() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ContextMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContextMenu.__proto__ || (0, _getPrototypeOf2.default)(ContextMenu)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'ContextMenu', _this.state = { showMenu: false }, _this.onContextMenu = function (e) {
      e.preventDefault();
      //overflow 是否不能超出容器的边界
      var _this$props$overflow = _this.props.overflow,
          overflow = _this$props$overflow === undefined ? true : _this$props$overflow;

      var containerTarget = _reactDom2.default.findDOMNode(_this.refs.containerTarget);
      var menuDOM = _reactDom2.default.findDOMNode(_this.refs.menu);
      var body = containerTarget.ownerDocument.body;
      var containerTargetRect = containerTarget.getBoundingClientRect();
      var menuDOMRect = menuDOM.getBoundingClientRect();
      var left = parseInt('' + (e.pageX - containerTargetRect.left), 10);
      var top = parseInt('' + (e.pageY - containerTargetRect.top), 10);
      // console.log(body.clientWidth, left, e.pageX);
      if (!overflow) {
        //overflow 是否不能超出容器的边界
        if (left > containerTargetRect.width - menuDOMRect.width) {
          //超过container右边
          left = containerTargetRect.width - menuDOMRect.width;
        }
        if (top > containerTargetRect.height - menuDOMRect.height) {
          //超过container右边
          top = containerTargetRect.height - menuDOMRect.height;
        }
      } else {
        if (e.pageX > body.clientWidth - menuDOMRect.width) {
          //超过浏览器右边
          left = body.clientWidth - menuDOMRect.width - containerTargetRect.left;
        }
        if (e.pageY > body.clientHeight - menuDOMRect.height) {
          //超过浏览器底部
          top = body.clientHeight - menuDOMRect.height - containerTargetRect.top;
        }
      }
      _this.setState({
        showMenu: true,
        left: left + 'px',
        top: top + 'px'
      });
      _this.documentMousedownEvent && _this.documentMousedownEvent.remove();
      _this.documentMousedownEvent = (0, _addEventListener2.default)(containerTarget.ownerDocument, 'mousedown', function (e) {
        if (!(0, _contains2.default)(menuDOM, e.target)) {
          _this.documentMousedownEvent.remove();
          _this.setState({
            showMenu: false
          });
        }
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ContextMenu, [{
    key: 'renderContextmenu',
    value: function renderContextmenu() {
      var content = this.props.content;
      var _state = this.state,
          showMenu = _state.showMenu,
          left = _state.left,
          top = _state.top;

      return (0, _util.cloneElement)(content, {
        key: 'menu',
        ref: 'menu',
        style: {
          visibility: showMenu ? 'visible' : 'hidden',
          color: 'red',
          position: 'absolute',
          whiteSpace: 'nowrap',
          zIndex: 100000,
          left: left,
          top: top
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return (0, _util.cloneElement)(children, {
        ref: 'containerTarget',
        onContextMenu: this.onContextMenu
      }, this.renderContextmenu());
    }
  }]);
  return ContextMenu;
}(_react2.default.Component), _class.propTypes = {
  content: _propTypes2.default.element,
  //overflow 是否不能超出容器的边界，默认可以超出
  overflow: _propTypes2.default.bool
}, _temp2);
exports.default = ContextMenu;