'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2; //外部依赖包

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _index = require('../../index');

var _index2 = _interopRequireDefault(_index);

var _const = require('../../utils/const');

var _timeSlider = require('./time-slider');

var _timeSlider2 = _interopRequireDefault(_timeSlider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HistoryPlayer = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(HistoryPlayer, _React$Component);

  function HistoryPlayer() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, HistoryPlayer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = HistoryPlayer.__proto__ || (0, _getPrototypeOf2.default)(HistoryPlayer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      activeItem: _this.getFirstActiveItem()
    }, _this.setActiveItem = function (value) {
      _this.activeItem = value;
    }, _this.storage = { defaultCurrentTime: 0 }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(HistoryPlayer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        playlist: this.fragments,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem,
        isHistory: true,
        historyDuration: this.duration
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.storage.defaultCurrentTime = 0;
      if (!(0, _isEqual2.default)(nextProps.historyList, this.props.historyList)) {
        //historyList不一样，需要进行更新
        this.historyListChanged = true;
      }
    }
    //获取第一个可播放的activeItem

  }, {
    key: 'getFirstActiveItem',
    value: function getFirstActiveItem() {
      if (!this.props.historyList) {
        return 0;
      }
      var activeItem = 0;
      for (var k = 0; k < this.fragments.length; k++) {
        var v = this.fragments[k];
        if (v.file) {
          activeItem = k;
          break;
        }
      }
      this.lastActiveItem = activeItem;
      return activeItem;
    }
  }, {
    key: 'renderSlider',
    value: function renderSlider() {
      var beginDate = this.props.historyList.beginDate;

      return _react2.default.createElement(_timeSlider2.default, {
        fragments: this.fragments,
        duration: this.duration,
        beginDateTime: +new Date(beginDate.replace(/-/g, '/')) / 1000,
        storage: this.storage,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem
      });
    }
  }, {
    key: 'getAspectratioNumber',
    value: function getAspectratioNumber(aspectratio) {
      var ratio = aspectratio.split(':');
      if (ratio.length !== 2 || isNaN(ratio[0]) || isNaN(ratio[1])) {
        console.warn('Config error:', 'Aspectratio format is wrong,aspectratio format should be "x:y".');
        aspectratio = _const.ASPECT_RATIO;
        ratio = aspectratio.split(':');
      }
      return {
        x: parseInt(ratio[0], 10),
        y: parseInt(ratio[1], 10)
      };
    }
  }, {
    key: 'getContainerStyle',
    value: function getContainerStyle() {
      var _props = this.props,
          _props$aspectratio = _props.aspectratio,
          aspectratio = _props$aspectratio === undefined ? _const.ASPECT_RATIO : _props$aspectratio,
          height = _props.height,
          width = _props.width,
          style = _props.style;

      var containerStyle = {};
      if (width) {
        containerStyle.width = width;
      }
      if (height) {
        containerStyle.height = height;
      }
      if (width && !height && this.playerConainerDOM) {
        //第二次渲染，执行在计算height之前
        width = this.playerConainerDOM.clientWidth;
      }
      if ((0, _isNumber2.default)(width) && !height) {
        //width是数字是才计算
        var ratio = this.getAspectratioNumber(aspectratio);
        containerStyle.height = width * ratio.y / ratio.x;
      }
      if (style) {
        containerStyle = (0, _extends3.default)({}, containerStyle, style);
      }
      return containerStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          noneVideoComponent = _props2.noneVideoComponent,
          autoplay = _props2.autoplay,
          controls = _props2.controls,
          historyList = _props2.historyList,
          other = (0, _objectWithoutProperties3.default)(_props2, ['noneVideoComponent', 'autoplay', 'controls', 'historyList']);

      var containerStyle = this.getContainerStyle();
      if (!historyList || !this.file) {
        return _react2.default.createElement(
          'div',
          { className: 'html5-player-container', style: containerStyle },
          _react2.default.createElement(
            'div',
            { className: 'html5-player-error-message-container' },
            !noneVideoComponent && '请选择有视频的时间段',
            noneVideoComponent
          )
        );
      }
      return _react2.default.createElement(_index2.default, (0, _extends3.default)({}, other, {
        file: this.file,
        controls: (0, _extends3.default)({}, controls, { timeSlider: false, time: false }),
        customTimeSlider: this.renderSlider(),
        autoplay: true,
        defaultCurrentTime: this.storage.defaultCurrentTime
      }));
    }
  }, {
    key: 'fragments',
    get: function get() {
      var historyList = this.props.historyList;

      var fragments = historyList && historyList.fragments && historyList.fragments;
      return fragments || [];
    }
  }, {
    key: 'duration',
    get: function get() {
      var historyList = this.props.historyList;

      return historyList && historyList.duration || 0;
    }
  }, {
    key: 'file',
    get: function get() {
      return this.fragments[this.activeItem] && this.fragments[this.activeItem].file;
    }
  }, {
    key: 'activeItem',
    get: function get() {
      if (this.historyListChanged) {
        this.historyListChanged = false;
        var activeItem = this.getFirstActiveItem();
        return activeItem;
      }
      return this.lastActiveItem;
    },
    set: function set(value) {
      var k = 0;
      if (!this.fragments[value]) {
        return;
      }
      while (!this.fragments[value].file) {
        k++;
        if (value === this.fragments.length - 1) {
          value = 0;
        } else {
          value++;
        }
        if (k > this.fragments.length) {
          //最后一个视频是断点（即无视频）
          // this.setState({ end: true });
          break;
        }
      }
      this.lastActiveItem = value;
      this.setState({ activeItem: value });
      //重置
      this.storage.defaultCurrentTime = 0;
      if (window.historyVideoCurrentTime) {
        window.historyVideoCurrentTime = 0;
      }
    }
    //给timeSrlider，存放一些变量

  }]);
  return HistoryPlayer;
}(_react2.default.Component), _class.displayName = 'HistoryPlayer ', _class.propTypes = {
  historyList: _propTypes2.default.oneOfType([_propTypes2.default.object.isRequired, _propTypes2.default.bool.isRequired]),
  noneVideoComponent: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string]),

  //当前选择播放的视频源（播放列表中的某项）
  activeItem: _propTypes2.default.number
}, _class.childContextTypes = {
  playlist: _propTypes2.default.array,
  activeItem: _propTypes2.default.number,
  setActiveItem: _propTypes2.default.func,
  isHistory: _propTypes2.default.bool,
  historyDuration: _propTypes2.default.number
}, _temp2);
exports.default = HistoryPlayer;