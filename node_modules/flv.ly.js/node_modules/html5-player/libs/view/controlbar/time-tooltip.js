'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class, _class2, _temp2; //外部依赖包

//import ReactDOM from 'react-dom';
//import PropTypes from 'prop-types';

//内部依赖包


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _tooltip = require('../components/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _util = require('../../utils/util');

var _time = require('../../model/time');

var _track = require('../../model/track');

var _fragment = require('../../model/fragment');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TimeTooltip = (_dec = (0, _reactRedux.connect)(function (state) {
  var thumbnails = state[_track.namespace].thumbnails;
  var props = {
    duration: state[_time.namespace].secondDuration,
    fragment: state[_fragment.namespace],
    thumbnails: thumbnails
  };
  return props;
}), _dec(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(TimeTooltip, _React$Component);

  function TimeTooltip() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, TimeTooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TimeTooltip.__proto__ || (0, _getPrototypeOf2.default)(TimeTooltip)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'TimeTooltip', _this.state = {
      percent: 0.5
    }, _this.dispatch = _this.props.dispatch, _this.onChange = function (percent) {
      _this.setState({
        percent: percent
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  //这里的配置参考jw-player的api


  (0, _createClass3.default)(TimeTooltip, [{
    key: 'renderContent',
    value: function renderContent() {
      //historyTrack是播放录像（合成录像，摄像头上传视频会中断，会分成几个视频，然后这几个视频会合并成一个视频
      //但是这个视频不是整个时段的，会有断的，historyTrack就是给用户知道这段录像哪里断了）
      //一般都用不到historyTrack，如果存在historyTrack就优先使用historyTrack的duration
      var _props = this.props,
          duration = _props.duration,
          fragment = _props.fragment,
          thumbnails = _props.thumbnails,
          timeSliderShowFormat = _props.timeSliderShowFormat;
      var videoBeginDateTime = fragment.videoBeginDateTime;

      if (duration === 0) {
        return false;
      }
      if (fragment && fragment.duration) {
        duration = fragment.duration;
      }
      var _state$percent = this.state.percent,
          percent = _state$percent === undefined ? 0.5 : _state$percent;

      if (thumbnails && thumbnails[0]) {
        var position = percent * duration;
        var style = {};
        thumbnails.forEach(function (v) {
          if (position >= v.begin && position < v.end) {
            var url = '';
            if (!(0, _isString2.default)(v)) {
              //一张图片中有多张缩略图
              url = v.thumbnail[1];
              style.backgroundImage = 'url("' + url + '")';
              style.backgroundPosition = v.thumbnail[2] * -1 + 'px ' + v.thumbnail[3] * -1 + 'px';
              style.width = v.thumbnail[4] + 'px';
              style.height = v.thumbnail[5] + 'px';
            } else {
              //单张图片直接做缩略图
              url = v.thumbnail;
            }
          }
        });
        return _react2.default.createElement(
          'div',
          {
            className: (0, _classnames2.default)('html5-player-time-tooltip-content', {
              'html5-player-thumbnail-tooltip-content': thumbnails
            })
          },
          _react2.default.createElement('div', { className: 'html5-player-thumbnail', style: style }),
          _react2.default.createElement(
            'span',
            { className: 'html5-player-thumbnail-time' },
            (0, _util.hms)(percent * duration)
          )
        );
      } else {
        return _react2.default.createElement(
          'div',
          { className: 'html5-player-time-tooltip-content' },
          (!videoBeginDateTime || timeSliderShowFormat === 'time') && (0, _util.hms)(percent * duration),
          videoBeginDateTime && timeSliderShowFormat === 'date' && (0, _util.dateFormat)((videoBeginDateTime + percent * duration) * 1000, 'YYYY-MM-DD HH:mm:ss')
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _tooltip2.default,
        {
          className: 'html5-player-time-tooltip',
          content: this.renderContent(),
          type: 'move',
          onChange: this.onChange,
          percent: this.state.percent,
          isAnimateActive: false
        },
        _react2.default.createElement('div', { className: 'html5-player-for-tooltip' })
      );
    }
  }]);
  return TimeTooltip;
}(_react2.default.Component), _class2.propTypes = {}, _temp2)) || _class);
exports.default = TimeTooltip;