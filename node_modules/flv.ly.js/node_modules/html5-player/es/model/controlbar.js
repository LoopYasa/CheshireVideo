import _regeneratorRuntime from 'babel-runtime/regenerator';
export var namespace = 'controlbar';
export default function () {
  return {
    namespace: namespace,
    state: false,
    reducers: {
      controlbarReducer: function controlbarReducer(state, _ref) {
        var payload = _ref.payload;

        return payload;
      },
      clear: function clear(state, _ref2) {
        var payload = _ref2.payload;

        return this.state;
      }
    },
    sagas: {
      controlbarSaga: /*#__PURE__*/_regeneratorRuntime.mark(function controlbarSaga(_ref3, _ref4) {
        var payload = _ref3.payload;
        var put = _ref4.put;
        return _regeneratorRuntime.wrap(function controlbarSaga$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return put({
                  type: 'controlbarReducer',
                  payload: payload
                });

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, controlbarSaga, this);
      })
    }
  };
}