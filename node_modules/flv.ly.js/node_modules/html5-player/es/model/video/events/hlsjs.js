import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import { namespace as videoNamespace } from '../../video';
import * as logger from '../../../utils/logger';

var HlsjsEvents = function () {
  function HlsjsEvents(payload) {
    _classCallCheck(this, HlsjsEvents);

    this.api = payload.api;
    this.dispatch = payload.dispatch;
    this.config = payload.config;
    if (!this.api.hlsObj) {
      logger.warn('No hls.js instantiation.');
      return;
    }
    this.loaded();
    logger.info('Listening:', 'listening on some hls.js events.');
  }

  _createClass(HlsjsEvents, [{
    key: 'loaded',
    value: function loaded() {
      var _this = this;

      var api = this.api;
      api.hlsObj.on(api.Hls.Events.MANIFEST_LOADED, function (event, data) {
        _this.setSubtitle();
        _this.setQuality();
      });
    }
  }, {
    key: 'setQuality',
    value: function setQuality() {
      var api = this.api;
      var dispatch = this.dispatch;
      var list = [];
      api.hlsObj.levels.forEach(function (v, k) {
        if (v.bitrate) {
          list.push({
            label: v.height + 'p',
            value: k
          });
        }
      });
      if (list[0]) {
        dispatch({
          type: videoNamespace + '/pictureQualityList',
          payload: {
            list: list
          }
        });
      }
    }
  }, {
    key: 'setSubtitle',
    value: function setSubtitle() {
      var api = this.api;
      var dispatch = this.dispatch;
      // console.log(api.hlsObj.subtitleTracks);
      var clearIntervalObj = void 0;
      api.hlsObj.on(api.Hls.Events.SUBTITLE_TRACK_SWITCH, function (event, data) {
        var currentTextTrack = api.textTracks[data.id];
        var cues = [];
        if (currentTextTrack) {
          //vtt没有加载时，切换是没信息的，所以首次切换字幕这里是不会触发dispatch
          cues = currentTextTrack.cues;
        }
        logger.info('Subtitle switched');
        dispatch({
          type: videoNamespace + '/hlsSubtitleCues',
          payload: cues
        });
      });
      api.hlsObj.on(api.Hls.Events.SUBTITLE_TRACK_LOADED, function (event, data) {
        //首次切换字幕，加载字幕才会触发这个事件，第二次切换不会触发。
        var currentTextTrack = api.textTracks[api.currentSubtitleTrack];
        if (!currentTextTrack) {
          return;
        }
        //防止切换过快没清除。
        clearInterval(clearIntervalObj);
        var tempLength = 0;
        var k = 0;
        clearIntervalObj = setInterval(function () {
          var length = currentTextTrack.cues.length;
          if (currentTextTrack.cues.length > 0 && tempLength !== length) {
            tempLength = length;
            dispatch({
              type: videoNamespace + '/hlsSubtitleCues',
              payload: currentTextTrack.cues
            });
          } else {
            //因为是异步的无法确定什么时候加载完字幕，字幕也可能分几个片段加载的。
            if (k >= 2) {
              logger.info('Subtitle switched');
              //如果两次以上length都没变化就判断为，加载完成。
              //这里不排除网络很差的导致加载字幕出问题，但是这种极端情况，不好处理，也没必要处理。
              //因为如果网络都差到连2KB的内容都加载不了，也完全播放不了视频了。
              clearInterval(clearIntervalObj);
            }
            k++;
          }
        }, 200);
      });
      dispatch({
        type: videoNamespace + '/subtitleList',
        payload: {
          subtitleList: api.hlsObj.subtitleTracks,
          subtitleId: -1
        }
      });
    }
  }]);

  return HlsjsEvents;
}();

export default function (payload) {
  return new HlsjsEvents(payload);
}