import _Object$defineProperty from 'babel-runtime/core-js/object/define-property';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import { namespace } from './index';
import { namespace as selectionNamespace } from '../selection';

//忽略的saga名，不忽略的saga名注意不要跟下面的properties重复
var outSideSagas = ['play', 'pause', 'volume', 'muted', 'replay', 'seeking', 'fullscreen', 'controlbar', 'errorMessage', 'playbackRate'];

var oustSidePropertyList = ['playing', 'ended', 'loading', 'bufferTime', 'seekingState', 'currentTime', 'duration', 'isError'];

var OutsideApi = function () {
  // eslint-disable-next-line
  function OutsideApi(payload, sagas) {
    var _this = this;

    _classCallCheck(this, OutsideApi);

    this.api = payload.api;
    this.dispatch = payload.dispatch;
    this.config = payload.config;
    this.autoplay = payload.config.autoplay;
    this.sagas = sagas;
    var api = payload.api;
    //begin--对外提供的借口
    var outSideApi = {
      on: api.on.bind(api),
      off: api.off.bind(api),
      setCurrentTime: function setCurrentTime(currentTime) {
        _this.api.currentTime = currentTime;
      }
    };
    this.getSagaFunction(outSideApi);
    this.getProperty(outSideApi);
    payload.videoCallback && payload.videoCallback(outSideApi);
    return outSideApi;
  }

  _createClass(OutsideApi, [{
    key: 'getSagaFunction',
    value: function getSagaFunction(outSideApi) {
      var _this2 = this;

      var dispatch = this.dispatch;

      var _loop = function _loop(k) {
        var sagaName = k.replace(namespace + '/', '');
        if (!!~outSideSagas.indexOf(sagaName)) {
          var funcName = void 0;
          switch (sagaName) {
            case 'volume':
              funcName = 'setVolume';
              break;
            case 'muted':
              funcName = 'setMuted';
              break;
            case 'seeking':
              funcName = 'setSeeking';
              break;
            case 'errorMessage':
              funcName = 'showErrorMessage';
              break;
            case 'playbackRate':
              funcName = 'setPlaybackRate';
              break;
            default:
              funcName = sagaName;
          }
          // eslint-disable-next-line
          outSideApi[funcName] = function () {
            var action = {
              type: k
            };
            switch (sagaName) {
              case 'seeking':
                if (!_this2.config.isHistory) {
                  action.payload = { percent: arguments.length <= 0 ? undefined : arguments[0], pause: true };
                }
                break;
              case 'controlbar':
                action.payload = arguments.length <= 0 ? undefined : arguments[0];
                action.delayTime = arguments.length <= 1 ? undefined : arguments[1];
                action.onControlbarEnter = arguments.length <= 2 ? undefined : arguments[2];
                break;
              case 'errorMessage':
                action.payload = { message: arguments.length <= 0 ? undefined : arguments[0] };
                break;
              default:
                if (arguments.length <= 0 ? undefined : arguments[0]) {
                  action.payload = arguments.length <= 0 ? undefined : arguments[0];
                }
            }
            if (_this2.config.isHistory && sagaName === 'seeking') {
              console.warn('history cannot use seeking');
            } else {
              dispatch(action);
            }
          };
        }
      };

      for (var k in this.sagas) {
        _loop(k);
      }
      outSideApi['setSelection'] = function (payload) {
        var action = {
          type: selectionNamespace + '/dataReducer',
          payload: payload
        };
        dispatch(action);
        //对外提供selection事件
        _this2.api.trigger('selection', action.payload);
      };
    }
  }, {
    key: 'getProperty',
    value: function getProperty(outSideApi) {
      var _this3 = this;

      oustSidePropertyList.forEach(function (v) {
        var key = v;
        if (v === 'seekingState') {
          key = 'seeking';
        }
        _Object$defineProperty(outSideApi, key, {
          get: function get() {
            if (key === 'duration' && _this3.config.historyDuration) {
              return _this3.config.historyDuration;
            }
            if (key === 'currentTime') {
              return _this3.api.historyCurrentTime;
            }
            return _this3.api[v];
          },
          set: function set() {
            throw new Error(v + ' is read only!');
          },
          enumerable: true
        });
      });
    }
  }]);

  return OutsideApi;
}();

export default function (payload, sagas) {
  return new OutsideApi(payload, sagas);
}