import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import API from './api';
import * as logger from '../utils/logger';
import { DEBUG } from '../utils//const';

var flvAPI = function (_API) {
  _inherits(flvAPI, _API);

  function flvAPI(videoDOM, file, flvjs) {
    var _this2, _ret;

    var flvConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, flvAPI);

    var _this = (_this2 = _possibleConstructorReturn(this, (flvAPI.__proto__ || _Object$getPrototypeOf(flvAPI)).call(this, videoDOM, file)), _this2);
    _this2.flvConfig = flvConfig;
    if (flvjs.isSupported()) {
      flvjs.LoggingControl.enableDebug = false;
      flvjs.LoggingControl.enableVerbose = false;
      flvjs.LoggingControl.enableWarn = false;
      _this2.flvjs = flvjs;
    }
    return _ret = _this, _possibleConstructorReturn(_this2, _ret);
  }

  _createClass(flvAPI, [{
    key: 'detachMedia',
    value: function detachMedia() {
      var player = this.flvPlayer;
      if (player) {
        this.pause();
        this.detachEvent();
        player.unload();
        player.detachMediaElement();
        player.destroy();
        this.flvPlayer = null;
        logger.success('Detach Media:', 'detach media for flv.js sucessfully.');
      }
    }
    //载入视频源，这里不可以用箭头函数

  }, {
    key: 'loadSource',
    value: function loadSource(file) {
      var flvjs = this.flvjs;
      if (flvjs) {
        var flvPlayer = flvjs.createPlayer({
          type: 'flv',
          url: file
        }, _extends({}, this.flvConfig));
        this.flvPlayer = flvPlayer;
        flvPlayer.attachMediaElement(this);
        flvPlayer.load();
        logger.info('Source Loading :', 'loading flv video.');
        //flv的log事件是全局的，这是个坑
        this.attachEvent();
      }
    }
  }, {
    key: 'detachEvent',
    value: function detachEvent() {
      if (this.LoggingControlListener && DEBUG) {
        this.flvjs.LoggingControl.removeLogListener(this.LoggingControlListener);
      }
    }
  }, {
    key: 'attachEvent',
    value: function attachEvent() {
      if (!DEBUG) {
        return;
      }
      // const locale = this.localization;
      var errorTitle = 'Flv.js Error,';
      if (this.flvjs) {
        this.LoggingControlListener = function (type, str) {
          if (type === 'error') {
            // let message;
            if (~str.indexOf('IOController')) {
              logger.error(errorTitle, 'load error');
              // message = locale.fileCouldNotPlay;
              // //一般trigger都是为了对外提供api，error是个比较特殊的情况，寄对外提供了事件，也对内提供了事件。
              // //如果只是对内不对外的话，不可以使用trigger处理事件，所有的都用redux。
              // this.event.trigger('error', {
              //   data: str,
              //   message,
              //   type,
              // });
            }
          }
        };

        this.flvjs.LoggingControl.addLogListener(this.LoggingControlListener);
      }
    }
  }]);

  return flvAPI;
}(API);

export { flvAPI as default };