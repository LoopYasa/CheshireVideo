import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

import React from 'react';
import PropTypes from 'prop-types';
import Provider from './redux-provider';
import getSagaModel from './saga-model';

/**
 * @prop { array } middlewares redux middlewares
 * @prop { array } enhancers redux enhancers
 * @prop { object } reducers redux reducers (传进来后会被combineReducers)
 * @prop { any } preloadedState redux preloadedState
 * @prop { boolean } production 是否是生产环境，默认为true
 */
var ModelProvider = (_temp2 = _class = function (_React$Component) {
  _inherits(ModelProvider, _React$Component);

  function ModelProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ModelProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModelProvider.__proto__ || _Object$getPrototypeOf(ModelProvider)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'SagaModelProvider', _this.state = {}, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModelProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        sagaStore: this.store,
        prefix: this.props.prefix
      };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.store = null;
    }
  }, {
    key: 'getStore',
    value: function getStore() {
      var _props = this.props,
          reducers = _props.reducers,
          preloadedState = _props.preloadedState,
          _props$models = _props.models,
          models = _props$models === undefined ? [] : _props$models,
          _props$middlewares = _props.middlewares,
          middlewares = _props$middlewares === undefined ? [] : _props$middlewares,
          _props$plugins = _props.plugins,
          plugins = _props$plugins === undefined ? [] : _props$plugins,
          _props$production = _props.production,
          production = _props$production === undefined ? true : _props$production;

      var sagaModel = getSagaModel(reducers, preloadedState, models, middlewares, plugins, !production);
      var store = sagaModel.store();
      return store;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          production = _props2.production;

      if (!this.store) {
        this.store = this.getStore();
      }
      return React.createElement(
        Provider,
        { store: this.store, production: production },
        children
      );
    }
  }]);

  return ModelProvider;
}(React.Component), _class.propTypes = {
  middlewares: PropTypes.array,
  preloadedState: PropTypes.any,
  enhancers: PropTypes.array,
  reducers: PropTypes.object,
  production: PropTypes.bool
}, _class.childContextTypes = {
  sagaStore: PropTypes.object,
  prefix: PropTypes.string
}, _temp2);
export { ModelProvider as default };