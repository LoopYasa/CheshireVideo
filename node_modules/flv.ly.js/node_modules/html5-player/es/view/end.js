import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classnames from 'classnames';
//内部依赖包
import clearDecorator from './decorator/clear';
import { namespace as endNamespace } from '../model/end';
import { namespace as videoNamespace } from '../model/video';

/**
 * 播放器视频播放结束后的组件
 */
var End = (_dec = connect(function (state) {
  return {
    end: state[endNamespace]
  };
}), _dec2 = clearDecorator([endNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(End, _React$Component);

  function End() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, End);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = End.__proto__ || _Object$getPrototypeOf(End)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.dispatch = _this.props.dispatch, _this.replay = function (e) {
      var _this$context = _this.context,
          isHistory = _this$context.isHistory,
          setActiveItem = _this$context.setActiveItem,
          activeItem = _this$context.activeItem;

      if (isHistory && activeItem !== 0) {
        _this.dispatch({
          type: videoNamespace + '/end',
          payload: false
        });
        setActiveItem(0);
      } else {
        _this.dispatch({
          type: videoNamespace + '/replay'
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  //这里的配置参考jw-player的api


  _createClass(End, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.end) {
        //播放列表，单个视频播放完的情况
        var _context = this.context,
            activeItem = _context.activeItem,
            setActiveItem = _context.setActiveItem;

        if (!this.isLastVideo) {
          setActiveItem(activeItem + 1);
        }
      }
    }
    //是否是最后一个可以播放的视频

  }, {
    key: 'getClassName',
    value: function getClassName(flag) {
      return classnames('html5-player-cover-view html5-player-end-view', {
        'html5-player-hide': flag
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var end = this.props.end;

      if (!end || !this.isLastVideo) {
        return React.createElement('div', { className: this.getClassName(true) });
      }
      return React.createElement(
        'div',
        {
          className: this.getClassName(),
          onDoubleClick: function onDoubleClick(e) {
            e.stopPropagation();
          },
          onClick: function onClick(e) {
            e.stopPropagation();
          }
        },
        React.createElement(
          'button',
          { className: 'html5-player-middle-button', onClick: this.replay },
          React.createElement(
            'svg',
            {
              className: 'html5-player-icon html5-player-replay-icon',
              'aria-hidden': 'true'
            },
            React.createElement('use', { xlinkHref: '#icon-replay' })
          )
        )
      );
    }
  }, {
    key: 'isLastVideo',
    get: function get() {
      var _context2 = this.context,
          playlist = _context2.playlist,
          activeItem = _context2.activeItem,
          isHistory = _context2.isHistory;

      if (isHistory) {
        //history列表的从0算起
        activeItem += 1;
        if (playlist[activeItem] && !playlist[activeItem].file && playlist.length - 1 === activeItem) {
          //判断下一个是否有视频（最后一个视频）
          return true;
        }
      }
      if (playlist && playlist[0] && activeItem < playlist.length) {
        return false;
      }
      return true;
    }
  }]);

  return End;
}(React.Component), _class2.propTypes = {}, _class2.contextTypes = {
  playlist: PropTypes.array,
  activeItem: PropTypes.number,
  setActiveItem: PropTypes.func,
  isHistory: PropTypes.bool
}, _class2.displayName = 'End', _temp2)) || _class) || _class);
export { End as default };