import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

//外部依赖包
import React from 'react';
import PropTypes from 'prop-types';
//内部依赖包
import { namespace as videoNamespace } from '../../../model/video';

var List = (_temp2 = _class = function (_React$Component) {
  _inherits(List, _React$Component);

  function List() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, List);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = List.__proto__ || _Object$getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'List', _this.dispatch = _this.props.dispatch, _this.onSelectEvent = function (value, callback) {
      return function (e) {
        var onSelect = _this.props.onSelect;

        onSelect && onSelect(value, e);
        callback && callback();
        if (!_this.context.playerDOM.paused) {
          //播放才处理，选择的时候因为鼠标位置已经离开了controlbar
          //所有选择完成需要，触发隐藏controlbar
          _this.dispatch({
            type: videoNamespace + '/controlbar',
            payload: false,
            delayTime: _this.context.controlbarHideTime,
            onControlbarEnter: false
          });
        }
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(List, [{
    key: 'getLocale',
    value: function getLocale() {
      return this.context.localization;
    }
  }, {
    key: 'renderBack',
    value: function renderBack(title) {
      var onBackEvent = this.props.onBackEvent;

      if (!onBackEvent) {
        return false;
      } else {
        return React.createElement(
          'li',
          { className: 'html5-player-list-title', onClick: onBackEvent },
          React.createElement(
            'svg',
            {
              className: 'html5-player-icon html5-player-left-icon',
              'aria-hidden': 'true'
            },
            React.createElement('use', { xlinkHref: '#icon-left' })
          ),
          title
        );
      }
    }
  }]);

  return List;
}(React.Component), _class.contextTypes = {
  localization: PropTypes.object,
  playerDOM: PropTypes.object,
  controlbarHideTime: PropTypes.number
}, _temp2);
export { List as default };