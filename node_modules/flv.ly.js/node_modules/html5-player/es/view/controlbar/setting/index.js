import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
//import classnames from 'classnames';
//内部依赖包
import clearDecorator from '../../decorator/clear';
import addEventListener from '../../../utils/dom/addEventListener';
import Tooltip from '../../components/tooltip';
import PlaybackRateList from './playback-rate-list';
import SubtitleList from './subtitle-list';
import PictureQualityList from './picture-quality-list';
import { namespace as playbackRateNamespace } from '../../../model/playback-rate';
import { namespace as trackNamespace } from '../../../model/track';
import { namespace as qualityNamespace } from '../../../model/picture-quality';
import contains from '../../../utils/dom/contains';

var state = {
  showSetting: false,
  showRateSelect: false,
  showSubtileSelect: false,
  showPictureQualitySelect: false
};

var Setting = (_dec = connect(function (state) {
  return {
    playbackRate: state[playbackRateNamespace],
    subtitleList: state[trackNamespace].subtitleList,
    subtitleId: state[trackNamespace].subtitleId,
    qualityList: state[qualityNamespace].list,
    currentQuality: state[qualityNamespace].currentQuality
  };
}), _dec2 = clearDecorator([playbackRateNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(Setting, _React$Component);

  function Setting() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Setting);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Setting.__proto__ || _Object$getPrototypeOf(Setting)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Setting', _this.state = { showSetting: true }, _this.dispatch = _this.props.dispatch, _this.onListClickEvent = function (type) {
      return function (e) {
        switch (type) {
          case 'rate':
            _this.setState(_extends({}, state, {
              showRateSelect: true
            }));
            break;
          case 'subtile':
            _this.setState(_extends({}, state, {
              showSubtileSelect: true
            }));
            break;
          case 'picture-quality':
            _this.setState(_extends({}, state, {
              showPictureQualitySelect: true
            }));
            break;
          default:
        }
        var settingDOM = ReactDOM.findDOMNode(_this.refs.setting);
        _this.documentClickEvent = addEventListener(settingDOM.ownerDocument, 'mousedown', function (e) {
          if (!contains(settingDOM, e.target)) {
            _this.documentClickEvent.remove();
            _this.setState(_extends({}, state, {
              showSetting: true
            }));
          }
        });
      };
    }, _this.onSelect = function (rate, e) {
      _this.documentClickEvent.remove();
      _this.setState(_extends({}, state, {
        showSetting: true
      }));
    }, _this.onBackEvent = function (e) {
      _this.setState(_extends({}, state, {
        showSetting: true
      }));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Setting, [{
    key: 'componentDidMount',
    value: function componentDidMount() {}
  }, {
    key: 'getLocale',
    value: function getLocale() {
      return this.context.localization;
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _props = this.props,
          playbackRate = _props.playbackRate,
          subtitleList = _props.subtitleList,
          subtitleId = _props.subtitleId,
          qualityList = _props.qualityList,
          currentQuality = _props.currentQuality;
      var _state = this.state,
          showRateSelect = _state.showRateSelect,
          showSubtileSelect = _state.showSubtileSelect,
          showSetting = _state.showSetting,
          showPictureQualitySelect = _state.showPictureQualitySelect;

      var locale = this.getLocale();
      var commonIcon = React.createElement(
        'svg',
        {
          className: 'html5-player-icon html5-player-right-icon',
          'aria-hidden': 'true'
        },
        React.createElement('use', { xlinkHref: '#icon-right' })
      );
      return React.createElement(
        'div',
        { className: 'html5-player-setting-container' },
        showSetting && React.createElement(
          'ul',
          { className: 'html5-player-setting-list' },
          React.createElement(
            'li',
            { onClick: this.onListClickEvent('rate') },
            React.createElement(
              'span',
              { className: 'float-right' },
              React.createElement(
                'span',
                null,
                playbackRate + locale.speed
              ),
              commonIcon
            ),
            React.createElement(
              'span',
              { className: 'float-left' },
              locale.speed
            )
          ),
          subtitleList && subtitleList[0] && React.createElement(
            'li',
            { onClick: this.onListClickEvent('subtile') },
            React.createElement(
              'span',
              { className: 'float-right' },
              subtitleId !== -1 && React.createElement(
                'span',
                null,
                subtitleList[subtitleId].name
              ),
              subtitleId === -1 && React.createElement(
                'span',
                null,
                locale.subtitleOff
              ),
              commonIcon
            ),
            React.createElement(
              'span',
              { className: 'float-left' },
              locale.subtitle
            )
          ),
          qualityList && qualityList[0] && React.createElement(
            'li',
            { onClick: this.onListClickEvent('picture-quality') },
            React.createElement(
              'span',
              { className: 'float-right' },
              currentQuality !== -1 && React.createElement(
                'span',
                null,
                qualityList[currentQuality].label
              ),
              currentQuality === -1 && React.createElement(
                'span',
                null,
                locale.autoQuality
              ),
              commonIcon
            ),
            React.createElement(
              'span',
              { className: 'float-left' },
              locale.pictureQuality
            )
          )
        ),
        showRateSelect && React.createElement(PlaybackRateList, _extends({}, this.props, {
          onSelect: this.onSelect,
          onBackEvent: this.onBackEvent
        })),
        showSubtileSelect && React.createElement(SubtitleList, {
          onSelect: this.onSelect,
          onBackEvent: this.onBackEvent
        }),
        showPictureQualitySelect && React.createElement(PictureQualityList, {
          onSelect: this.onSelect,
          onBackEvent: this.onBackEvent
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var living = this.props.living;

      return React.createElement(
        Tooltip,
        {
          ref: 'setting',
          trigger: 'click',
          content: this.renderContent(),
          toTargetGap: living ? 5 : 13
        },
        React.createElement(
          'button',
          { className: 'float-right html5-player-small-button html5-player-setting-button' },
          React.createElement(
            'svg',
            {
              className: 'html5-player-icon html5-player-setting-icon',
              'aria-hidden': 'true'
            },
            React.createElement('use', { xlinkHref: '#icon-setting' })
          )
        )
      );
    }
  }]);

  return Setting;
}(React.Component), _class2.contextTypes = {
  localization: PropTypes.object
}, _temp2)) || _class) || _class);
export { Setting as default };