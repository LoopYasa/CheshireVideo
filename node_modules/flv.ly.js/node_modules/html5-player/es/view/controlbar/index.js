import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _dec, _dec2, _class, _class2, _temp2;

//外部依赖包
import React from 'react';
//import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classnames from 'classnames';
import isBoolean from 'lodash/isBoolean';
//内部依赖包
import clearDecorator from '../decorator/clear';
import PlayPause from '../controlbar/play-pause';
import Volume from '../controlbar/volume';
import Next from '../controlbar/next';
import Prev from '../controlbar/prev';
import FullOffScreen from '../controlbar/full-off-screen';
import Time from '../controlbar/time-container';
import TimeSlider from '../controlbar/time-slider';
import Setting from '../controlbar/setting';
import PlaybackRate from '../controlbar/playback-rate';
import SubtitleSelect from '../controlbar/subtitle-select';
import PictureQuality from '../controlbar/picture-quality';
import Rotate from '../controlbar/rotate';
import Capture from '../controlbar/capture';
import { getChildProps, cloneElement } from '../../utils/util';
import { namespace as controlbarNamespace } from '../../model/controlbar';
import { namespace as videoNamespace } from '../../model/video';
import { namespace as playPauseNamespace } from '../../model/play-pause';
import { namespace as livingNamespace } from '../../model/living';
import { namespace as readyNamespace } from '../../model/ready';
import { namespace as trackNamespace } from '../../model/track';

/**
 * 播放器加载状态的组件
 */
var Controlbar = (_dec = connect(function (state) {
  return {
    show: state[controlbarNamespace],
    playing: state[playPauseNamespace],
    living: state[livingNamespace],
    ready: state[readyNamespace],
    subtitleList: state[trackNamespace].subtitleList
  };
}), _dec2 = clearDecorator([controlbarNamespace, livingNamespace]), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_React$Component) {
  _inherits(Controlbar, _React$Component);

  function Controlbar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Controlbar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Controlbar.__proto__ || _Object$getPrototypeOf(Controlbar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.dispatch = _this.props.dispatch, _this.onMouseEnter = function (e) {
      e.stopPropagation();
      var playing = _this.props.playing;

      if (playing) {
        _this.dispatch({
          type: videoNamespace + '/controlbarClearTimeout',
          payload: {
            onControlbarEnter: true
          }
        });
      }
    }, _this.onMouseLeave = function (e) {
      e.stopPropagation();
      var playing = _this.props.playing;

      if (playing) {
        _this.dispatch({
          type: videoNamespace + '/controlbar',
          payload: false,
          delayTime: _this.context.controlbarHideTime,
          onControlbarEnter: false
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Controlbar, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.context.isHistory) {
        this.dispatch({
          type: readyNamespace + '/clear'
        });
      }
    }
  }, {
    key: 'getLocale',
    value: function getLocale() {
      return this.context.localization;
    }
  }, {
    key: 'renderCustomButton',
    value: function renderCustomButton(buttons) {
      var buttonJSX = [];
      for (var i in buttons) {
        var button = buttons[i];
        if (!button) {
          continue;
        }
        if (!React.isValidElement(button)) {
          console.error('自定义按钮必须是React组件！');
          continue;
        }
        buttonJSX.push(cloneElement(button, {
          className: classnames('html5-player-small-button', getChildProps(button).className),
          key: i
        }));
      }
      return buttonJSX;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          playbackRates = _props.playbackRates,
          playbackRateControls = _props.playbackRateControls,
          show = _props.show,
          muted = _props.muted,
          tracks = _props.tracks,
          isLiving = _props.isLiving,
          ready = _props.ready,
          timeSliderShowFormat = _props.timeSliderShowFormat,
          hasFragment = _props.hasFragment,
          subtitleList = _props.subtitleList,
          customTimeSlider = _props.customTimeSlider;
      var living = this.props.living;
      var isHistory = this.context.isHistory;

      if (isLiving) {
        living = true;
      }
      var locale = this.getLocale();
      var _props$controls = this.props.controls,
          controls = _props$controls === undefined ? true : _props$controls;

      if (isBoolean(controls)) {
        if (!controls) {
          //controls=false时，需要设置这些值为false
          controls = {
            playPause: false,
            volume: false,
            prev: false,
            next: false,
            fullscreen: false,
            setting: false,
            time: false,
            timeSlider: false,
            speed: false,
            subtitle: false,
            pictureQuality: false,
            rotate: false,
            capture: false
          };
        } else {
          controls = {};
        }
      }

      var _controls = controls,
          _controls$playPause = _controls.playPause,
          playPause = _controls$playPause === undefined ? true : _controls$playPause,
          _controls$volume = _controls.volume,
          volume = _controls$volume === undefined ? true : _controls$volume,
          _controls$prev = _controls.prev,
          prev = _controls$prev === undefined ? true : _controls$prev,
          _controls$next = _controls.next,
          next = _controls$next === undefined ? true : _controls$next,
          _controls$fullscreen = _controls.fullscreen,
          fullscreen = _controls$fullscreen === undefined ? true : _controls$fullscreen,
          _controls$setting = _controls.setting,
          setting = _controls$setting === undefined ? false : _controls$setting,
          _controls$time = _controls.time,
          time = _controls$time === undefined ? true : _controls$time,
          _controls$timeSlider = _controls.timeSlider,
          timeSlider = _controls$timeSlider === undefined ? true : _controls$timeSlider,
          _controls$speed = _controls.speed,
          speed = _controls$speed === undefined ? false : _controls$speed,
          _controls$subtitle = _controls.subtitle,
          subtitle = _controls$subtitle === undefined ? true : _controls$subtitle,
          _controls$pictureQual = _controls.pictureQuality,
          pictureQuality = _controls$pictureQual === undefined ? true : _controls$pictureQual,
          _controls$rotate = _controls.rotate,
          rotate = _controls$rotate === undefined ? false : _controls$rotate,
          _controls$capture = _controls.capture,
          capture = _controls$capture === undefined ? false : _controls$capture,
          customButton = _objectWithoutProperties(_controls, ['playPause', 'volume', 'prev', 'next', 'fullscreen', 'setting', 'time', 'timeSlider', 'speed', 'subtitle', 'pictureQuality', 'rotate', 'capture']);

      return React.createElement(
        'div',
        {
          className: classnames('html5-player-controlbar', {
            'html5-player-hide': !show,
            'html5-player-show': show
          }),
          onMouseEnter: this.onMouseEnter,
          onMouseLeave: this.onMouseLeave
        },
        ready && !living && !customTimeSlider && timeSlider && React.createElement(TimeSlider, {
          hasFragment: hasFragment,
          tracks: tracks,
          timeSliderShowFormat: timeSliderShowFormat
        }),
        ready && !living && customTimeSlider,
        React.createElement(
          'div',
          { className: 'html5-player-button-container' },
          playPause && React.createElement(PlayPause, { living: living }),
          volume && React.createElement(Volume, {
            autoMuted: muted,
            living: living,
            hasFragment: hasFragment || isHistory
          }),
          living && React.createElement(
            'button',
            { className: 'html5-player-small-button cursor-default html5-player-live-button' },
            React.createElement(
              'svg',
              {
                className: 'html5-player-icon html5-player-live-icon',
                'aria-hidden': 'true'
              },
              React.createElement('use', { xlinkHref: '#icon-live' })
            )
          ),
          !isHistory && prev && React.createElement(Prev, null),
          !isHistory && next && React.createElement(Next, null),
          ready && !living && time && React.createElement(Time, null),
          fullscreen && React.createElement(FullOffScreen, null),
          ready && setting && React.createElement(Setting, {
            living: living,
            playbackRates: playbackRates,
            playbackRateControls: playbackRateControls
          }),
          rotate && React.createElement(Rotate, null),
          capture && React.createElement(Capture, null),
          ready && !living && speed && React.createElement(PlaybackRate, { playbackRates: playbackRates, locale: locale }),
          ready && !living && subtitleList[0] && subtitle && React.createElement(SubtitleSelect, { locale: locale }),
          ready && !living && pictureQuality && React.createElement(PictureQuality, { locale: locale }),
          ready && this.renderCustomButton(customButton)
        )
      );
    }
  }]);

  return Controlbar;
}(React.Component), _class2.contextTypes = {
  localization: PropTypes.object,
  controlbarHideTime: PropTypes.number,
  isHistory: PropTypes.bool
}, _class2.displayName = 'Controlbar', _temp2)) || _class) || _class);
export { Controlbar as default };