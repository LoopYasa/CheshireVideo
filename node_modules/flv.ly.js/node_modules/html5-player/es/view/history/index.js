import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _class, _temp2;

//外部依赖包
import React from 'react';
import PropTypes from 'prop-types';
import isNumber from 'lodash/isNumber';
import isEqual from 'lodash/isEqual';
//内部依赖包
import Player from '../../index';
import { ASPECT_RATIO } from '../../utils/const';
import TimeSlider from './time-slider';

var HistoryPlayer = (_temp2 = _class = function (_React$Component) {
  _inherits(HistoryPlayer, _React$Component);

  function HistoryPlayer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HistoryPlayer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HistoryPlayer.__proto__ || _Object$getPrototypeOf(HistoryPlayer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      activeItem: _this.getFirstActiveItem()
    }, _this.setActiveItem = function (value) {
      _this.activeItem = value;
    }, _this.storage = { defaultCurrentTime: 0 }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HistoryPlayer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        playlist: this.fragments,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem,
        isHistory: true,
        historyDuration: this.duration
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.storage.defaultCurrentTime = 0;
      if (!isEqual(nextProps.historyList, this.props.historyList)) {
        //historyList不一样，需要进行更新
        this.historyListChanged = true;
      }
    }
    //获取第一个可播放的activeItem

  }, {
    key: 'getFirstActiveItem',
    value: function getFirstActiveItem() {
      if (!this.props.historyList) {
        return 0;
      }
      var activeItem = 0;
      for (var k = 0; k < this.fragments.length; k++) {
        var v = this.fragments[k];
        if (v.file) {
          activeItem = k;
          break;
        }
      }
      this.lastActiveItem = activeItem;
      return activeItem;
    }
  }, {
    key: 'renderSlider',
    value: function renderSlider() {
      var beginDate = this.props.historyList.beginDate;

      return React.createElement(TimeSlider, {
        fragments: this.fragments,
        duration: this.duration,
        beginDateTime: +new Date(beginDate.replace(/-/g, '/')) / 1000,
        storage: this.storage,
        activeItem: this.activeItem,
        setActiveItem: this.setActiveItem
      });
    }
  }, {
    key: 'getAspectratioNumber',
    value: function getAspectratioNumber(aspectratio) {
      var ratio = aspectratio.split(':');
      if (ratio.length !== 2 || isNaN(ratio[0]) || isNaN(ratio[1])) {
        console.warn('Config error:', 'Aspectratio format is wrong,aspectratio format should be "x:y".');
        aspectratio = ASPECT_RATIO;
        ratio = aspectratio.split(':');
      }
      return {
        x: parseInt(ratio[0], 10),
        y: parseInt(ratio[1], 10)
      };
    }
  }, {
    key: 'getContainerStyle',
    value: function getContainerStyle() {
      var _props = this.props,
          _props$aspectratio = _props.aspectratio,
          aspectratio = _props$aspectratio === undefined ? ASPECT_RATIO : _props$aspectratio,
          height = _props.height,
          width = _props.width,
          style = _props.style;

      var containerStyle = {};
      if (width) {
        containerStyle.width = width;
      }
      if (height) {
        containerStyle.height = height;
      }
      if (width && !height && this.playerConainerDOM) {
        //第二次渲染，执行在计算height之前
        width = this.playerConainerDOM.clientWidth;
      }
      if (isNumber(width) && !height) {
        //width是数字是才计算
        var ratio = this.getAspectratioNumber(aspectratio);
        containerStyle.height = width * ratio.y / ratio.x;
      }
      if (style) {
        containerStyle = _extends({}, containerStyle, style);
      }
      return containerStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          noneVideoComponent = _props2.noneVideoComponent,
          autoplay = _props2.autoplay,
          controls = _props2.controls,
          historyList = _props2.historyList,
          other = _objectWithoutProperties(_props2, ['noneVideoComponent', 'autoplay', 'controls', 'historyList']);

      var containerStyle = this.getContainerStyle();
      if (!historyList || !this.file) {
        return React.createElement(
          'div',
          { className: 'html5-player-container', style: containerStyle },
          React.createElement(
            'div',
            { className: 'html5-player-error-message-container' },
            !noneVideoComponent && '请选择有视频的时间段',
            noneVideoComponent
          )
        );
      }
      return React.createElement(Player, _extends({}, other, {
        file: this.file,
        controls: _extends({}, controls, { timeSlider: false, time: false }),
        customTimeSlider: this.renderSlider(),
        autoplay: true,
        defaultCurrentTime: this.storage.defaultCurrentTime
      }));
    }
  }, {
    key: 'fragments',
    get: function get() {
      var historyList = this.props.historyList;

      var fragments = historyList && historyList.fragments && historyList.fragments;
      return fragments || [];
    }
  }, {
    key: 'duration',
    get: function get() {
      var historyList = this.props.historyList;

      return historyList && historyList.duration || 0;
    }
  }, {
    key: 'file',
    get: function get() {
      return this.fragments[this.activeItem] && this.fragments[this.activeItem].file;
    }
  }, {
    key: 'activeItem',
    get: function get() {
      if (this.historyListChanged) {
        this.historyListChanged = false;
        var activeItem = this.getFirstActiveItem();
        return activeItem;
      }
      return this.lastActiveItem;
    },
    set: function set(value) {
      var k = 0;
      if (!this.fragments[value]) {
        return;
      }
      while (!this.fragments[value].file) {
        k++;
        if (value === this.fragments.length - 1) {
          value = 0;
        } else {
          value++;
        }
        if (k > this.fragments.length) {
          //最后一个视频是断点（即无视频）
          // this.setState({ end: true });
          break;
        }
      }
      this.lastActiveItem = value;
      this.setState({ activeItem: value });
      //重置
      this.storage.defaultCurrentTime = 0;
      if (window.historyVideoCurrentTime) {
        window.historyVideoCurrentTime = 0;
      }
    }
    //给timeSrlider，存放一些变量

  }]);

  return HistoryPlayer;
}(React.Component), _class.displayName = 'HistoryPlayer ', _class.propTypes = {
  historyList: PropTypes.oneOfType([PropTypes.object.isRequired, PropTypes.bool.isRequired]),
  noneVideoComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),

  //当前选择播放的视频源（播放列表中的某项）
  activeItem: PropTypes.number
}, _class.childContextTypes = {
  playlist: PropTypes.array,
  activeItem: PropTypes.number,
  setActiveItem: PropTypes.func,
  isHistory: PropTypes.bool,
  historyDuration: PropTypes.number
}, _temp2);
export { HistoryPlayer as default };